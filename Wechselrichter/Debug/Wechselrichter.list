
Wechselrichter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000816c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f0  08008340  08008340  00018340  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008830  08008830  00018830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08008838  08008838  00018838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008840  08008840  00018840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000009b8  20000000  08008844  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005d8  200009b8  080091fc  000209b8  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  20000f90  080091fc  00020f90  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000209b8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012072  00000000  00000000  000209e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002bb0  00000000  00000000  00032a5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000984e  00000000  00000000  0003560a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000e30  00000000  00000000  0003ee58  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000d98  00000000  00000000  0003fc88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00023fe9  00000000  00000000  00040a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000cc56  00000000  00000000  00064a09  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000d5cc7  00000000  00000000  0007165f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  00147326  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000037c0  00000000  00000000  001473a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200009b8 	.word	0x200009b8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008324 	.word	0x08008324

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200009bc 	.word	0x200009bc
 800020c:	08008324 	.word	0x08008324

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b972 	b.w	8000ee4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	4688      	mov	r8, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14b      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4615      	mov	r5, r2
 8000c2a:	d967      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0720 	rsb	r7, r2, #32
 8000c36:	fa01 f302 	lsl.w	r3, r1, r2
 8000c3a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c3e:	4095      	lsls	r5, r2
 8000c40:	ea47 0803 	orr.w	r8, r7, r3
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c50:	fa1f fc85 	uxth.w	ip, r5
 8000c54:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c58:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18eb      	adds	r3, r5, r3
 8000c66:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c6a:	f080 811b 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8118 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000c74:	3f02      	subs	r7, #2
 8000c76:	442b      	add	r3, r5
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8c:	45a4      	cmp	ip, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	192c      	adds	r4, r5, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8107 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c9a:	45a4      	cmp	ip, r4
 8000c9c:	f240 8104 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	442c      	add	r4, r5
 8000ca4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ca8:	eba4 040c 	sub.w	r4, r4, ip
 8000cac:	2700      	movs	r7, #0
 8000cae:	b11e      	cbz	r6, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb8:	4639      	mov	r1, r7
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d909      	bls.n	8000cd6 <__udivmoddi4+0xbe>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80eb 	beq.w	8000e9e <__udivmoddi4+0x286>
 8000cc8:	2700      	movs	r7, #0
 8000cca:	e9c6 0100 	strd	r0, r1, [r6]
 8000cce:	4638      	mov	r0, r7
 8000cd0:	4639      	mov	r1, r7
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	fab3 f783 	clz	r7, r3
 8000cda:	2f00      	cmp	r7, #0
 8000cdc:	d147      	bne.n	8000d6e <__udivmoddi4+0x156>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d302      	bcc.n	8000ce8 <__udivmoddi4+0xd0>
 8000ce2:	4282      	cmp	r2, r0
 8000ce4:	f200 80fa 	bhi.w	8000edc <__udivmoddi4+0x2c4>
 8000ce8:	1a84      	subs	r4, r0, r2
 8000cea:	eb61 0303 	sbc.w	r3, r1, r3
 8000cee:	2001      	movs	r0, #1
 8000cf0:	4698      	mov	r8, r3
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d0e0      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000cf6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cfa:	e7dd      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000cfc:	b902      	cbnz	r2, 8000d00 <__udivmoddi4+0xe8>
 8000cfe:	deff      	udf	#255	; 0xff
 8000d00:	fab2 f282 	clz	r2, r2
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f040 808f 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d0a:	1b49      	subs	r1, r1, r5
 8000d0c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d10:	fa1f f885 	uxth.w	r8, r5
 8000d14:	2701      	movs	r7, #1
 8000d16:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d24:	fb08 f10c 	mul.w	r1, r8, ip
 8000d28:	4299      	cmp	r1, r3
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2c:	18eb      	adds	r3, r5, r3
 8000d2e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4299      	cmp	r1, r3
 8000d36:	f200 80cd 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d3a:	4684      	mov	ip, r0
 8000d3c:	1a59      	subs	r1, r3, r1
 8000d3e:	b2a3      	uxth	r3, r4
 8000d40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d44:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d48:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d4c:	fb08 f800 	mul.w	r8, r8, r0
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	d907      	bls.n	8000d64 <__udivmoddi4+0x14c>
 8000d54:	192c      	adds	r4, r5, r4
 8000d56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x14a>
 8000d5c:	45a0      	cmp	r8, r4
 8000d5e:	f200 80b6 	bhi.w	8000ece <__udivmoddi4+0x2b6>
 8000d62:	4618      	mov	r0, r3
 8000d64:	eba4 0408 	sub.w	r4, r4, r8
 8000d68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d6c:	e79f      	b.n	8000cae <__udivmoddi4+0x96>
 8000d6e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d72:	40bb      	lsls	r3, r7
 8000d74:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d78:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d7c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d80:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d84:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d88:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d8c:	4325      	orrs	r5, r4
 8000d8e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d92:	0c2c      	lsrs	r4, r5, #16
 8000d94:	fb08 3319 	mls	r3, r8, r9, r3
 8000d98:	fa1f fa8e 	uxth.w	sl, lr
 8000d9c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000da0:	fb09 f40a 	mul.w	r4, r9, sl
 8000da4:	429c      	cmp	r4, r3
 8000da6:	fa02 f207 	lsl.w	r2, r2, r7
 8000daa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1e 0303 	adds.w	r3, lr, r3
 8000db4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000db8:	f080 8087 	bcs.w	8000eca <__udivmoddi4+0x2b2>
 8000dbc:	429c      	cmp	r4, r3
 8000dbe:	f240 8084 	bls.w	8000eca <__udivmoddi4+0x2b2>
 8000dc2:	f1a9 0902 	sub.w	r9, r9, #2
 8000dc6:	4473      	add	r3, lr
 8000dc8:	1b1b      	subs	r3, r3, r4
 8000dca:	b2ad      	uxth	r5, r5
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dd8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ddc:	45a2      	cmp	sl, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1e 0404 	adds.w	r4, lr, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	d26b      	bcs.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dea:	45a2      	cmp	sl, r4
 8000dec:	d969      	bls.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dee:	3802      	subs	r0, #2
 8000df0:	4474      	add	r4, lr
 8000df2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000df6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dfa:	eba4 040a 	sub.w	r4, r4, sl
 8000dfe:	454c      	cmp	r4, r9
 8000e00:	46c2      	mov	sl, r8
 8000e02:	464b      	mov	r3, r9
 8000e04:	d354      	bcc.n	8000eb0 <__udivmoddi4+0x298>
 8000e06:	d051      	beq.n	8000eac <__udivmoddi4+0x294>
 8000e08:	2e00      	cmp	r6, #0
 8000e0a:	d069      	beq.n	8000ee0 <__udivmoddi4+0x2c8>
 8000e0c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e10:	eb64 0403 	sbc.w	r4, r4, r3
 8000e14:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e18:	40fd      	lsrs	r5, r7
 8000e1a:	40fc      	lsrs	r4, r7
 8000e1c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e20:	e9c6 5400 	strd	r5, r4, [r6]
 8000e24:	2700      	movs	r7, #0
 8000e26:	e747      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000e28:	f1c2 0320 	rsb	r3, r2, #32
 8000e2c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e30:	4095      	lsls	r5, r2
 8000e32:	fa01 f002 	lsl.w	r0, r1, r2
 8000e36:	fa21 f303 	lsr.w	r3, r1, r3
 8000e3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e3e:	4338      	orrs	r0, r7
 8000e40:	0c01      	lsrs	r1, r0, #16
 8000e42:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e46:	fa1f f885 	uxth.w	r8, r5
 8000e4a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e52:	fb07 f308 	mul.w	r3, r7, r8
 8000e56:	428b      	cmp	r3, r1
 8000e58:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5c:	d907      	bls.n	8000e6e <__udivmoddi4+0x256>
 8000e5e:	1869      	adds	r1, r5, r1
 8000e60:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e64:	d22f      	bcs.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e66:	428b      	cmp	r3, r1
 8000e68:	d92d      	bls.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e6a:	3f02      	subs	r7, #2
 8000e6c:	4429      	add	r1, r5
 8000e6e:	1acb      	subs	r3, r1, r3
 8000e70:	b281      	uxth	r1, r0
 8000e72:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e76:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb00 f308 	mul.w	r3, r0, r8
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0x27e>
 8000e86:	1869      	adds	r1, r5, r1
 8000e88:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e8c:	d217      	bcs.n	8000ebe <__udivmoddi4+0x2a6>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d915      	bls.n	8000ebe <__udivmoddi4+0x2a6>
 8000e92:	3802      	subs	r0, #2
 8000e94:	4429      	add	r1, r5
 8000e96:	1ac9      	subs	r1, r1, r3
 8000e98:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e9c:	e73b      	b.n	8000d16 <__udivmoddi4+0xfe>
 8000e9e:	4637      	mov	r7, r6
 8000ea0:	4630      	mov	r0, r6
 8000ea2:	e709      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea4:	4607      	mov	r7, r0
 8000ea6:	e6e7      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	e6fb      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000eac:	4541      	cmp	r1, r8
 8000eae:	d2ab      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000eb4:	eb69 020e 	sbc.w	r2, r9, lr
 8000eb8:	3801      	subs	r0, #1
 8000eba:	4613      	mov	r3, r2
 8000ebc:	e7a4      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ebe:	4660      	mov	r0, ip
 8000ec0:	e7e9      	b.n	8000e96 <__udivmoddi4+0x27e>
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	e795      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec6:	4667      	mov	r7, ip
 8000ec8:	e7d1      	b.n	8000e6e <__udivmoddi4+0x256>
 8000eca:	4681      	mov	r9, r0
 8000ecc:	e77c      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	442c      	add	r4, r5
 8000ed2:	e747      	b.n	8000d64 <__udivmoddi4+0x14c>
 8000ed4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed8:	442b      	add	r3, r5
 8000eda:	e72f      	b.n	8000d3c <__udivmoddi4+0x124>
 8000edc:	4638      	mov	r0, r7
 8000ede:	e708      	b.n	8000cf2 <__udivmoddi4+0xda>
 8000ee0:	4637      	mov	r7, r6
 8000ee2:	e6e9      	b.n	8000cb8 <__udivmoddi4+0xa0>

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee8:	b510      	push	{r4, lr}
 8000eea:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eec:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <HAL_InitTick+0x40>)
 8000eee:	7818      	ldrb	r0, [r3, #0]
 8000ef0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef4:	fbb3 f3f0 	udiv	r3, r3, r0
 8000ef8:	4a0c      	ldr	r2, [pc, #48]	; (8000f2c <HAL_InitTick+0x44>)
 8000efa:	6810      	ldr	r0, [r2, #0]
 8000efc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f00:	f000 fb3a 	bl	8001578 <HAL_SYSTICK_Config>
 8000f04:	b968      	cbnz	r0, 8000f22 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f06:	2c0f      	cmp	r4, #15
 8000f08:	d901      	bls.n	8000f0e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000f0a:	2001      	movs	r0, #1
 8000f0c:	e00a      	b.n	8000f24 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	4621      	mov	r1, r4
 8000f12:	f04f 30ff 	mov.w	r0, #4294967295
 8000f16:	f000 faed 	bl	80014f4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f1a:	4b03      	ldr	r3, [pc, #12]	; (8000f28 <HAL_InitTick+0x40>)
 8000f1c:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8000f1e:	2000      	movs	r0, #0
 8000f20:	e000      	b.n	8000f24 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000f22:	2001      	movs	r0, #1
}
 8000f24:	bd10      	pop	{r4, pc}
 8000f26:	bf00      	nop
 8000f28:	20000000 	.word	0x20000000
 8000f2c:	20000008 	.word	0x20000008

08000f30 <HAL_Init>:
{
 8000f30:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f32:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <HAL_Init+0x30>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f3a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f42:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f4a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f4c:	2003      	movs	r0, #3
 8000f4e:	f000 fabf 	bl	80014d0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f52:	2000      	movs	r0, #0
 8000f54:	f7ff ffc8 	bl	8000ee8 <HAL_InitTick>
  HAL_MspInit();
 8000f58:	f002 f85c 	bl	8003014 <HAL_MspInit>
}
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	bd08      	pop	{r3, pc}
 8000f60:	40023c00 	.word	0x40023c00

08000f64 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000f64:	4a03      	ldr	r2, [pc, #12]	; (8000f74 <HAL_IncTick+0x10>)
 8000f66:	6811      	ldr	r1, [r2, #0]
 8000f68:	4b03      	ldr	r3, [pc, #12]	; (8000f78 <HAL_IncTick+0x14>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	440b      	add	r3, r1
 8000f6e:	6013      	str	r3, [r2, #0]
}
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	20000a48 	.word	0x20000a48
 8000f78:	20000000 	.word	0x20000000

08000f7c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f7c:	4b01      	ldr	r3, [pc, #4]	; (8000f84 <HAL_GetTick+0x8>)
 8000f7e:	6818      	ldr	r0, [r3, #0]
}
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	20000a48 	.word	0x20000a48

08000f88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f88:	b538      	push	{r3, r4, r5, lr}
 8000f8a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f8c:	f7ff fff6 	bl	8000f7c <HAL_GetTick>
 8000f90:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f92:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000f96:	d002      	beq.n	8000f9e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f98:	4b04      	ldr	r3, [pc, #16]	; (8000fac <HAL_Delay+0x24>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f9e:	f7ff ffed 	bl	8000f7c <HAL_GetTick>
 8000fa2:	1b40      	subs	r0, r0, r5
 8000fa4:	42a0      	cmp	r0, r4
 8000fa6:	d3fa      	bcc.n	8000f9e <HAL_Delay+0x16>
  {
  }
}
 8000fa8:	bd38      	pop	{r3, r4, r5, pc}
 8000faa:	bf00      	nop
 8000fac:	20000000 	.word	0x20000000

08000fb0 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000fb0:	4b4a      	ldr	r3, [pc, #296]	; (80010dc <ADC_Init+0x12c>)
 8000fb2:	685a      	ldr	r2, [r3, #4]
 8000fb4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000fb8:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000fba:	685a      	ldr	r2, [r3, #4]
 8000fbc:	6841      	ldr	r1, [r0, #4]
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000fc2:	6802      	ldr	r2, [r0, #0]
 8000fc4:	6853      	ldr	r3, [r2, #4]
 8000fc6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fca:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000fcc:	6802      	ldr	r2, [r0, #0]
 8000fce:	6853      	ldr	r3, [r2, #4]
 8000fd0:	6901      	ldr	r1, [r0, #16]
 8000fd2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000fd6:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000fd8:	6802      	ldr	r2, [r0, #0]
 8000fda:	6853      	ldr	r3, [r2, #4]
 8000fdc:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000fe0:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000fe2:	6802      	ldr	r2, [r0, #0]
 8000fe4:	6853      	ldr	r3, [r2, #4]
 8000fe6:	6881      	ldr	r1, [r0, #8]
 8000fe8:	430b      	orrs	r3, r1
 8000fea:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000fec:	6802      	ldr	r2, [r0, #0]
 8000fee:	6893      	ldr	r3, [r2, #8]
 8000ff0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000ff4:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000ff6:	6802      	ldr	r2, [r0, #0]
 8000ff8:	6893      	ldr	r3, [r2, #8]
 8000ffa:	68c1      	ldr	r1, [r0, #12]
 8000ffc:	430b      	orrs	r3, r1
 8000ffe:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001000:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001002:	4b37      	ldr	r3, [pc, #220]	; (80010e0 <ADC_Init+0x130>)
 8001004:	429a      	cmp	r2, r3
 8001006:	d04b      	beq.n	80010a0 <ADC_Init+0xf0>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001008:	6802      	ldr	r2, [r0, #0]
 800100a:	6893      	ldr	r3, [r2, #8]
 800100c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001010:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001012:	6802      	ldr	r2, [r0, #0]
 8001014:	6893      	ldr	r3, [r2, #8]
 8001016:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001018:	430b      	orrs	r3, r1
 800101a:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800101c:	6802      	ldr	r2, [r0, #0]
 800101e:	6893      	ldr	r3, [r2, #8]
 8001020:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001024:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001026:	6802      	ldr	r2, [r0, #0]
 8001028:	6893      	ldr	r3, [r2, #8]
 800102a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800102c:	430b      	orrs	r3, r1
 800102e:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001030:	6802      	ldr	r2, [r0, #0]
 8001032:	6893      	ldr	r3, [r2, #8]
 8001034:	f023 0302 	bic.w	r3, r3, #2
 8001038:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800103a:	6802      	ldr	r2, [r0, #0]
 800103c:	6893      	ldr	r3, [r2, #8]
 800103e:	7e01      	ldrb	r1, [r0, #24]
 8001040:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8001044:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001046:	f890 3020 	ldrb.w	r3, [r0, #32]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d133      	bne.n	80010b6 <ADC_Init+0x106>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800104e:	6802      	ldr	r2, [r0, #0]
 8001050:	6853      	ldr	r3, [r2, #4]
 8001052:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001056:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001058:	6802      	ldr	r2, [r0, #0]
 800105a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800105c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001060:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001062:	6801      	ldr	r1, [r0, #0]
 8001064:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001066:	69c2      	ldr	r2, [r0, #28]
 8001068:	3a01      	subs	r2, #1
 800106a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800106e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001070:	6802      	ldr	r2, [r0, #0]
 8001072:	6893      	ldr	r3, [r2, #8]
 8001074:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001078:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800107a:	6802      	ldr	r2, [r0, #0]
 800107c:	6893      	ldr	r3, [r2, #8]
 800107e:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 8001082:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8001086:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001088:	6802      	ldr	r2, [r0, #0]
 800108a:	6893      	ldr	r3, [r2, #8]
 800108c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001090:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001092:	6802      	ldr	r2, [r0, #0]
 8001094:	6893      	ldr	r3, [r2, #8]
 8001096:	6941      	ldr	r1, [r0, #20]
 8001098:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 800109c:	6093      	str	r3, [r2, #8]
}
 800109e:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80010a0:	6802      	ldr	r2, [r0, #0]
 80010a2:	6893      	ldr	r3, [r2, #8]
 80010a4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80010a8:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80010aa:	6802      	ldr	r2, [r0, #0]
 80010ac:	6893      	ldr	r3, [r2, #8]
 80010ae:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80010b2:	6093      	str	r3, [r2, #8]
 80010b4:	e7bc      	b.n	8001030 <ADC_Init+0x80>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80010b6:	6802      	ldr	r2, [r0, #0]
 80010b8:	6853      	ldr	r3, [r2, #4]
 80010ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010be:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80010c0:	6802      	ldr	r2, [r0, #0]
 80010c2:	6853      	ldr	r3, [r2, #4]
 80010c4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80010c8:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80010ca:	6801      	ldr	r1, [r0, #0]
 80010cc:	684b      	ldr	r3, [r1, #4]
 80010ce:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80010d0:	3a01      	subs	r2, #1
 80010d2:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80010d6:	604b      	str	r3, [r1, #4]
 80010d8:	e7be      	b.n	8001058 <ADC_Init+0xa8>
 80010da:	bf00      	nop
 80010dc:	40012300 	.word	0x40012300
 80010e0:	0f000001 	.word	0x0f000001

080010e4 <HAL_ADC_Init>:
  if(hadc == NULL)
 80010e4:	b338      	cbz	r0, 8001136 <HAL_ADC_Init+0x52>
{
 80010e6:	b510      	push	{r4, lr}
 80010e8:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 80010ea:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80010ec:	b143      	cbz	r3, 8001100 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010f0:	f013 0f10 	tst.w	r3, #16
 80010f4:	d00b      	beq.n	800110e <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 80010f6:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80010f8:	2300      	movs	r3, #0
 80010fa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80010fe:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8001100:	f001 fd78 	bl	8002bf4 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001104:	2300      	movs	r3, #0
 8001106:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 8001108:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800110c:	e7ef      	b.n	80010ee <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 800110e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001110:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001114:	f023 0302 	bic.w	r3, r3, #2
 8001118:	f043 0302 	orr.w	r3, r3, #2
 800111c:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 800111e:	4620      	mov	r0, r4
 8001120:	f7ff ff46 	bl	8000fb0 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 8001124:	2000      	movs	r0, #0
 8001126:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001128:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800112a:	f023 0303 	bic.w	r3, r3, #3
 800112e:	f043 0301 	orr.w	r3, r3, #1
 8001132:	6423      	str	r3, [r4, #64]	; 0x40
 8001134:	e7e0      	b.n	80010f8 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 8001136:	2001      	movs	r0, #1
}
 8001138:	4770      	bx	lr
	...

0800113c <HAL_ADC_Start>:
{
 800113c:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 800113e:	2300      	movs	r3, #0
 8001140:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001142:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001146:	2b01      	cmp	r3, #1
 8001148:	d07d      	beq.n	8001246 <HAL_ADC_Start+0x10a>
 800114a:	2301      	movs	r3, #1
 800114c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001150:	6803      	ldr	r3, [r0, #0]
 8001152:	689a      	ldr	r2, [r3, #8]
 8001154:	f012 0f01 	tst.w	r2, #1
 8001158:	d113      	bne.n	8001182 <HAL_ADC_Start+0x46>
    __HAL_ADC_ENABLE(hadc);
 800115a:	689a      	ldr	r2, [r3, #8]
 800115c:	f042 0201 	orr.w	r2, r2, #1
 8001160:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001162:	4b3e      	ldr	r3, [pc, #248]	; (800125c <HAL_ADC_Start+0x120>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a3e      	ldr	r2, [pc, #248]	; (8001260 <HAL_ADC_Start+0x124>)
 8001168:	fba2 2303 	umull	r2, r3, r2, r3
 800116c:	0c9b      	lsrs	r3, r3, #18
 800116e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001172:	9301      	str	r3, [sp, #4]
    while(counter != 0U)
 8001174:	e002      	b.n	800117c <HAL_ADC_Start+0x40>
      counter--;
 8001176:	9b01      	ldr	r3, [sp, #4]
 8001178:	3b01      	subs	r3, #1
 800117a:	9301      	str	r3, [sp, #4]
    while(counter != 0U)
 800117c:	9b01      	ldr	r3, [sp, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d1f9      	bne.n	8001176 <HAL_ADC_Start+0x3a>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001182:	6802      	ldr	r2, [r0, #0]
 8001184:	6893      	ldr	r3, [r2, #8]
 8001186:	f013 0f01 	tst.w	r3, #1
 800118a:	d05e      	beq.n	800124a <HAL_ADC_Start+0x10e>
    ADC_STATE_CLR_SET(hadc->State,
 800118c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800118e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001192:	f023 0301 	bic.w	r3, r3, #1
 8001196:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800119a:	6403      	str	r3, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800119c:	6853      	ldr	r3, [r2, #4]
 800119e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80011a2:	d005      	beq.n	80011b0 <HAL_ADC_Start+0x74>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011a4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80011a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011ae:	6403      	str	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011b0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80011b2:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80011b6:	d01b      	beq.n	80011f0 <HAL_ADC_Start+0xb4>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011b8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80011ba:	f023 0306 	bic.w	r3, r3, #6
 80011be:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 80011c0:	2300      	movs	r3, #0
 80011c2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011c6:	f06f 0322 	mvn.w	r3, #34	; 0x22
 80011ca:	6013      	str	r3, [r2, #0]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80011cc:	4b25      	ldr	r3, [pc, #148]	; (8001264 <HAL_ADC_Start+0x128>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f013 0f1f 	tst.w	r3, #31
 80011d4:	d127      	bne.n	8001226 <HAL_ADC_Start+0xea>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80011d6:	6803      	ldr	r3, [r0, #0]
 80011d8:	4a23      	ldr	r2, [pc, #140]	; (8001268 <HAL_ADC_Start+0x12c>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d019      	beq.n	8001212 <HAL_ADC_Start+0xd6>
 80011de:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d007      	beq.n	80011f6 <HAL_ADC_Start+0xba>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80011e6:	4a21      	ldr	r2, [pc, #132]	; (800126c <HAL_ADC_Start+0x130>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d00b      	beq.n	8001204 <HAL_ADC_Start+0xc8>
  return HAL_OK;
 80011ec:	2000      	movs	r0, #0
 80011ee:	e02d      	b.n	800124c <HAL_ADC_Start+0x110>
      ADC_CLEAR_ERRORCODE(hadc);
 80011f0:	2300      	movs	r3, #0
 80011f2:	6443      	str	r3, [r0, #68]	; 0x44
 80011f4:	e7e4      	b.n	80011c0 <HAL_ADC_Start+0x84>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80011f6:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80011fa:	6852      	ldr	r2, [r2, #4]
 80011fc:	f012 0f1f 	tst.w	r2, #31
 8001200:	d007      	beq.n	8001212 <HAL_ADC_Start+0xd6>
 8001202:	e7f0      	b.n	80011e6 <HAL_ADC_Start+0xaa>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001204:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8001208:	6852      	ldr	r2, [r2, #4]
 800120a:	f002 021f 	and.w	r2, r2, #31
 800120e:	2a0f      	cmp	r2, #15
 8001210:	d81e      	bhi.n	8001250 <HAL_ADC_Start+0x114>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001212:	689a      	ldr	r2, [r3, #8]
 8001214:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8001218:	d11c      	bne.n	8001254 <HAL_ADC_Start+0x118>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800121a:	689a      	ldr	r2, [r3, #8]
 800121c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001220:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001222:	2000      	movs	r0, #0
 8001224:	e012      	b.n	800124c <HAL_ADC_Start+0x110>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001226:	6803      	ldr	r3, [r0, #0]
 8001228:	4a0f      	ldr	r2, [pc, #60]	; (8001268 <HAL_ADC_Start+0x12c>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d001      	beq.n	8001232 <HAL_ADC_Start+0xf6>
  return HAL_OK;
 800122e:	2000      	movs	r0, #0
 8001230:	e00c      	b.n	800124c <HAL_ADC_Start+0x110>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001232:	689a      	ldr	r2, [r3, #8]
 8001234:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8001238:	d10e      	bne.n	8001258 <HAL_ADC_Start+0x11c>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800123a:	689a      	ldr	r2, [r3, #8]
 800123c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001240:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001242:	2000      	movs	r0, #0
 8001244:	e002      	b.n	800124c <HAL_ADC_Start+0x110>
  __HAL_LOCK(hadc);
 8001246:	2002      	movs	r0, #2
 8001248:	e000      	b.n	800124c <HAL_ADC_Start+0x110>
  return HAL_OK;
 800124a:	2000      	movs	r0, #0
}
 800124c:	b002      	add	sp, #8
 800124e:	4770      	bx	lr
  return HAL_OK;
 8001250:	2000      	movs	r0, #0
 8001252:	e7fb      	b.n	800124c <HAL_ADC_Start+0x110>
 8001254:	2000      	movs	r0, #0
 8001256:	e7f9      	b.n	800124c <HAL_ADC_Start+0x110>
 8001258:	2000      	movs	r0, #0
 800125a:	e7f7      	b.n	800124c <HAL_ADC_Start+0x110>
 800125c:	20000008 	.word	0x20000008
 8001260:	431bde83 	.word	0x431bde83
 8001264:	40012300 	.word	0x40012300
 8001268:	40012000 	.word	0x40012000
 800126c:	40012200 	.word	0x40012200

08001270 <HAL_ADC_PollForConversion>:
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001270:	6803      	ldr	r3, [r0, #0]
 8001272:	689a      	ldr	r2, [r3, #8]
 8001274:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001278:	d003      	beq.n	8001282 <HAL_ADC_PollForConversion+0x12>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800127a:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800127c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001280:	d11c      	bne.n	80012bc <HAL_ADC_PollForConversion+0x4c>
{
 8001282:	b570      	push	{r4, r5, r6, lr}
 8001284:	460d      	mov	r5, r1
 8001286:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 8001288:	f7ff fe78 	bl	8000f7c <HAL_GetTick>
 800128c:	4606      	mov	r6, r0
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800128e:	6823      	ldr	r3, [r4, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	f012 0f02 	tst.w	r2, #2
 8001296:	d11a      	bne.n	80012ce <HAL_ADC_PollForConversion+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 8001298:	f1b5 3fff 	cmp.w	r5, #4294967295
 800129c:	d0f7      	beq.n	800128e <HAL_ADC_PollForConversion+0x1e>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800129e:	b125      	cbz	r5, 80012aa <HAL_ADC_PollForConversion+0x3a>
 80012a0:	f7ff fe6c 	bl	8000f7c <HAL_GetTick>
 80012a4:	1b80      	subs	r0, r0, r6
 80012a6:	42a8      	cmp	r0, r5
 80012a8:	d9f1      	bls.n	800128e <HAL_ADC_PollForConversion+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012ac:	f043 0304 	orr.w	r3, r3, #4
 80012b0:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 80012b2:	2300      	movs	r3, #0
 80012b4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 80012b8:	2003      	movs	r0, #3
 80012ba:	e02d      	b.n	8001318 <HAL_ADC_PollForConversion+0xa8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012bc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80012be:	f043 0320 	orr.w	r3, r3, #32
 80012c2:	6403      	str	r3, [r0, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 80012c4:	2300      	movs	r3, #0
 80012c6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 80012ca:	2001      	movs	r0, #1
}
 80012cc:	4770      	bx	lr
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80012ce:	f06f 0212 	mvn.w	r2, #18
 80012d2:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80012d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012da:	6423      	str	r3, [r4, #64]	; 0x40
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012dc:	6823      	ldr	r3, [r4, #0]
 80012de:	689a      	ldr	r2, [r3, #8]
 80012e0:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80012e4:	d117      	bne.n	8001316 <HAL_ADC_PollForConversion+0xa6>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012e6:	7e22      	ldrb	r2, [r4, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012e8:	b9ba      	cbnz	r2, 800131a <HAL_ADC_PollForConversion+0xaa>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80012ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012ec:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 80012f0:	d003      	beq.n	80012fa <HAL_ADC_PollForConversion+0x8a>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80012f2:	689b      	ldr	r3, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80012f4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80012f8:	d111      	bne.n	800131e <HAL_ADC_PollForConversion+0xae>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80012fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001300:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001302:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001304:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001308:	d10b      	bne.n	8001322 <HAL_ADC_PollForConversion+0xb2>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800130a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	6423      	str	r3, [r4, #64]	; 0x40
  return HAL_OK;
 8001312:	2000      	movs	r0, #0
 8001314:	e000      	b.n	8001318 <HAL_ADC_PollForConversion+0xa8>
 8001316:	2000      	movs	r0, #0
}
 8001318:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800131a:	2000      	movs	r0, #0
 800131c:	e7fc      	b.n	8001318 <HAL_ADC_PollForConversion+0xa8>
 800131e:	2000      	movs	r0, #0
 8001320:	e7fa      	b.n	8001318 <HAL_ADC_PollForConversion+0xa8>
 8001322:	2000      	movs	r0, #0
 8001324:	e7f8      	b.n	8001318 <HAL_ADC_PollForConversion+0xa8>

08001326 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8001326:	6803      	ldr	r3, [r0, #0]
 8001328:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 800132a:	4770      	bx	lr

0800132c <HAL_ADC_ConfigChannel>:
{
 800132c:	b430      	push	{r4, r5}
 800132e:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8001330:	2300      	movs	r3, #0
 8001332:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001334:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001338:	2b01      	cmp	r3, #1
 800133a:	f000 80bd 	beq.w	80014b8 <HAL_ADC_ConfigChannel+0x18c>
 800133e:	2301      	movs	r3, #1
 8001340:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001344:	680b      	ldr	r3, [r1, #0]
 8001346:	2b09      	cmp	r3, #9
 8001348:	d93e      	bls.n	80013c8 <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800134a:	6805      	ldr	r5, [r0, #0]
 800134c:	68ea      	ldr	r2, [r5, #12]
 800134e:	b29b      	uxth	r3, r3
 8001350:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001354:	3b1e      	subs	r3, #30
 8001356:	2407      	movs	r4, #7
 8001358:	fa04 f303 	lsl.w	r3, r4, r3
 800135c:	ea22 0303 	bic.w	r3, r2, r3
 8001360:	60eb      	str	r3, [r5, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001362:	6805      	ldr	r5, [r0, #0]
 8001364:	68ea      	ldr	r2, [r5, #12]
 8001366:	688c      	ldr	r4, [r1, #8]
 8001368:	880b      	ldrh	r3, [r1, #0]
 800136a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800136e:	3b1e      	subs	r3, #30
 8001370:	fa04 f303 	lsl.w	r3, r4, r3
 8001374:	4313      	orrs	r3, r2
 8001376:	60eb      	str	r3, [r5, #12]
  if (sConfig->Rank < 7U)
 8001378:	684b      	ldr	r3, [r1, #4]
 800137a:	2b06      	cmp	r3, #6
 800137c:	d83a      	bhi.n	80013f4 <HAL_ADC_ConfigChannel+0xc8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800137e:	6805      	ldr	r5, [r0, #0]
 8001380:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001382:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001386:	3b05      	subs	r3, #5
 8001388:	241f      	movs	r4, #31
 800138a:	fa04 f303 	lsl.w	r3, r4, r3
 800138e:	ea22 0303 	bic.w	r3, r2, r3
 8001392:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001394:	6805      	ldr	r5, [r0, #0]
 8001396:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001398:	684b      	ldr	r3, [r1, #4]
 800139a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800139e:	3b05      	subs	r3, #5
 80013a0:	880c      	ldrh	r4, [r1, #0]
 80013a2:	fa04 f303 	lsl.w	r3, r4, r3
 80013a6:	4313      	orrs	r3, r2
 80013a8:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80013aa:	6802      	ldr	r2, [r0, #0]
 80013ac:	4b43      	ldr	r3, [pc, #268]	; (80014bc <HAL_ADC_ConfigChannel+0x190>)
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d050      	beq.n	8001454 <HAL_ADC_ConfigChannel+0x128>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80013b2:	6802      	ldr	r2, [r0, #0]
 80013b4:	4b41      	ldr	r3, [pc, #260]	; (80014bc <HAL_ADC_ConfigChannel+0x190>)
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d059      	beq.n	800146e <HAL_ADC_ConfigChannel+0x142>
  __HAL_UNLOCK(hadc);
 80013ba:	2300      	movs	r3, #0
 80013bc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80013c0:	4618      	mov	r0, r3
}
 80013c2:	b002      	add	sp, #8
 80013c4:	bc30      	pop	{r4, r5}
 80013c6:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80013c8:	6805      	ldr	r5, [r0, #0]
 80013ca:	692a      	ldr	r2, [r5, #16]
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80013d2:	2407      	movs	r4, #7
 80013d4:	fa04 f303 	lsl.w	r3, r4, r3
 80013d8:	ea22 0303 	bic.w	r3, r2, r3
 80013dc:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013de:	6805      	ldr	r5, [r0, #0]
 80013e0:	692a      	ldr	r2, [r5, #16]
 80013e2:	688c      	ldr	r4, [r1, #8]
 80013e4:	880b      	ldrh	r3, [r1, #0]
 80013e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80013ea:	fa04 f303 	lsl.w	r3, r4, r3
 80013ee:	4313      	orrs	r3, r2
 80013f0:	612b      	str	r3, [r5, #16]
 80013f2:	e7c1      	b.n	8001378 <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 80013f4:	2b0c      	cmp	r3, #12
 80013f6:	d816      	bhi.n	8001426 <HAL_ADC_ConfigChannel+0xfa>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80013f8:	6805      	ldr	r5, [r0, #0]
 80013fa:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80013fc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001400:	3b23      	subs	r3, #35	; 0x23
 8001402:	241f      	movs	r4, #31
 8001404:	fa04 f303 	lsl.w	r3, r4, r3
 8001408:	ea22 0303 	bic.w	r3, r2, r3
 800140c:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800140e:	6805      	ldr	r5, [r0, #0]
 8001410:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001412:	684b      	ldr	r3, [r1, #4]
 8001414:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001418:	3b23      	subs	r3, #35	; 0x23
 800141a:	880c      	ldrh	r4, [r1, #0]
 800141c:	fa04 f303 	lsl.w	r3, r4, r3
 8001420:	4313      	orrs	r3, r2
 8001422:	632b      	str	r3, [r5, #48]	; 0x30
 8001424:	e7c1      	b.n	80013aa <HAL_ADC_ConfigChannel+0x7e>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001426:	6805      	ldr	r5, [r0, #0]
 8001428:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800142a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800142e:	3b41      	subs	r3, #65	; 0x41
 8001430:	241f      	movs	r4, #31
 8001432:	fa04 f303 	lsl.w	r3, r4, r3
 8001436:	ea22 0303 	bic.w	r3, r2, r3
 800143a:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800143c:	6805      	ldr	r5, [r0, #0]
 800143e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001440:	684b      	ldr	r3, [r1, #4]
 8001442:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001446:	3b41      	subs	r3, #65	; 0x41
 8001448:	880c      	ldrh	r4, [r1, #0]
 800144a:	fa04 f303 	lsl.w	r3, r4, r3
 800144e:	4313      	orrs	r3, r2
 8001450:	62eb      	str	r3, [r5, #44]	; 0x2c
 8001452:	e7aa      	b.n	80013aa <HAL_ADC_ConfigChannel+0x7e>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001454:	680b      	ldr	r3, [r1, #0]
 8001456:	2b12      	cmp	r3, #18
 8001458:	d1ab      	bne.n	80013b2 <HAL_ADC_ConfigChannel+0x86>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800145a:	4b19      	ldr	r3, [pc, #100]	; (80014c0 <HAL_ADC_ConfigChannel+0x194>)
 800145c:	685a      	ldr	r2, [r3, #4]
 800145e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001462:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001464:	685a      	ldr	r2, [r3, #4]
 8001466:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	e7a1      	b.n	80013b2 <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800146e:	680b      	ldr	r3, [r1, #0]
 8001470:	4a14      	ldr	r2, [pc, #80]	; (80014c4 <HAL_ADC_ConfigChannel+0x198>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d001      	beq.n	800147a <HAL_ADC_ConfigChannel+0x14e>
 8001476:	2b11      	cmp	r3, #17
 8001478:	d19f      	bne.n	80013ba <HAL_ADC_ConfigChannel+0x8e>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800147a:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <HAL_ADC_ConfigChannel+0x194>)
 800147c:	685a      	ldr	r2, [r3, #4]
 800147e:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8001482:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001484:	685a      	ldr	r2, [r3, #4]
 8001486:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800148a:	605a      	str	r2, [r3, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800148c:	680a      	ldr	r2, [r1, #0]
 800148e:	4b0d      	ldr	r3, [pc, #52]	; (80014c4 <HAL_ADC_ConfigChannel+0x198>)
 8001490:	429a      	cmp	r2, r3
 8001492:	d192      	bne.n	80013ba <HAL_ADC_ConfigChannel+0x8e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <HAL_ADC_ConfigChannel+0x19c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a0c      	ldr	r2, [pc, #48]	; (80014cc <HAL_ADC_ConfigChannel+0x1a0>)
 800149a:	fba2 2303 	umull	r2, r3, r2, r3
 800149e:	0c9b      	lsrs	r3, r3, #18
 80014a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80014a4:	005a      	lsls	r2, r3, #1
 80014a6:	9201      	str	r2, [sp, #4]
      while(counter != 0U)
 80014a8:	e002      	b.n	80014b0 <HAL_ADC_ConfigChannel+0x184>
        counter--;
 80014aa:	9b01      	ldr	r3, [sp, #4]
 80014ac:	3b01      	subs	r3, #1
 80014ae:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80014b0:	9b01      	ldr	r3, [sp, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1f9      	bne.n	80014aa <HAL_ADC_ConfigChannel+0x17e>
 80014b6:	e780      	b.n	80013ba <HAL_ADC_ConfigChannel+0x8e>
  __HAL_LOCK(hadc);
 80014b8:	2002      	movs	r0, #2
 80014ba:	e782      	b.n	80013c2 <HAL_ADC_ConfigChannel+0x96>
 80014bc:	40012000 	.word	0x40012000
 80014c0:	40012300 	.word	0x40012300
 80014c4:	10000012 	.word	0x10000012
 80014c8:	20000008 	.word	0x20000008
 80014cc:	431bde83 	.word	0x431bde83

080014d0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014d0:	4a07      	ldr	r2, [pc, #28]	; (80014f0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80014d2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014d4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80014d8:	041b      	lsls	r3, r3, #16
 80014da:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014dc:	0200      	lsls	r0, r0, #8
 80014de:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014e2:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80014e4:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80014e8:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80014ec:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80014ee:	4770      	bx	lr
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014f4:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f6:	4b17      	ldr	r3, [pc, #92]	; (8001554 <HAL_NVIC_SetPriority+0x60>)
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014fe:	f1c3 0407 	rsb	r4, r3, #7
 8001502:	2c04      	cmp	r4, #4
 8001504:	bf28      	it	cs
 8001506:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001508:	1d1d      	adds	r5, r3, #4
 800150a:	2d06      	cmp	r5, #6
 800150c:	d918      	bls.n	8001540 <HAL_NVIC_SetPriority+0x4c>
 800150e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001510:	f04f 35ff 	mov.w	r5, #4294967295
 8001514:	fa05 f404 	lsl.w	r4, r5, r4
 8001518:	ea21 0104 	bic.w	r1, r1, r4
 800151c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800151e:	fa05 f303 	lsl.w	r3, r5, r3
 8001522:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001526:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001528:	2800      	cmp	r0, #0
 800152a:	db0b      	blt.n	8001544 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152c:	0109      	lsls	r1, r1, #4
 800152e:	b2c9      	uxtb	r1, r1
 8001530:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001534:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001538:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800153c:	bc30      	pop	{r4, r5}
 800153e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001540:	2300      	movs	r3, #0
 8001542:	e7e5      	b.n	8001510 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001544:	f000 000f 	and.w	r0, r0, #15
 8001548:	0109      	lsls	r1, r1, #4
 800154a:	b2c9      	uxtb	r1, r1
 800154c:	4b02      	ldr	r3, [pc, #8]	; (8001558 <HAL_NVIC_SetPriority+0x64>)
 800154e:	5419      	strb	r1, [r3, r0]
 8001550:	e7f4      	b.n	800153c <HAL_NVIC_SetPriority+0x48>
 8001552:	bf00      	nop
 8001554:	e000ed00 	.word	0xe000ed00
 8001558:	e000ed14 	.word	0xe000ed14

0800155c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800155c:	2800      	cmp	r0, #0
 800155e:	db07      	blt.n	8001570 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001560:	f000 021f 	and.w	r2, r0, #31
 8001564:	0940      	lsrs	r0, r0, #5
 8001566:	2301      	movs	r3, #1
 8001568:	4093      	lsls	r3, r2
 800156a:	4a02      	ldr	r2, [pc, #8]	; (8001574 <HAL_NVIC_EnableIRQ+0x18>)
 800156c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000e100 	.word	0xe000e100

08001578 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001578:	3801      	subs	r0, #1
 800157a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800157e:	d20a      	bcs.n	8001596 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001580:	4b06      	ldr	r3, [pc, #24]	; (800159c <HAL_SYSTICK_Config+0x24>)
 8001582:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001584:	4a06      	ldr	r2, [pc, #24]	; (80015a0 <HAL_SYSTICK_Config+0x28>)
 8001586:	21f0      	movs	r1, #240	; 0xf0
 8001588:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800158c:	2000      	movs	r0, #0
 800158e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001590:	2207      	movs	r2, #7
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001596:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000e010 	.word	0xe000e010
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015a4:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80015a6:	6805      	ldr	r5, [r0, #0]
 80015a8:	682c      	ldr	r4, [r5, #0]
 80015aa:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 80015ae:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80015b0:	6804      	ldr	r4, [r0, #0]
 80015b2:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015b4:	6883      	ldr	r3, [r0, #8]
 80015b6:	2b40      	cmp	r3, #64	; 0x40
 80015b8:	d005      	beq.n	80015c6 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 80015ba:	6803      	ldr	r3, [r0, #0]
 80015bc:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 80015be:	6803      	ldr	r3, [r0, #0]
 80015c0:	60da      	str	r2, [r3, #12]
  }
}
 80015c2:	bc30      	pop	{r4, r5}
 80015c4:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 80015c6:	6803      	ldr	r3, [r0, #0]
 80015c8:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 80015ca:	6803      	ldr	r3, [r0, #0]
 80015cc:	60d9      	str	r1, [r3, #12]
 80015ce:	e7f8      	b.n	80015c2 <DMA_SetConfig+0x1e>

080015d0 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80015d0:	6802      	ldr	r2, [r0, #0]
 80015d2:	b2d3      	uxtb	r3, r2
 80015d4:	3b10      	subs	r3, #16
 80015d6:	490b      	ldr	r1, [pc, #44]	; (8001604 <DMA_CalcBaseAndBitshift+0x34>)
 80015d8:	fba1 1303 	umull	r1, r3, r1, r3
 80015dc:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80015de:	490a      	ldr	r1, [pc, #40]	; (8001608 <DMA_CalcBaseAndBitshift+0x38>)
 80015e0:	5cc9      	ldrb	r1, [r1, r3]
 80015e2:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 80015e4:	2b03      	cmp	r3, #3
 80015e6:	d806      	bhi.n	80015f6 <DMA_CalcBaseAndBitshift+0x26>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80015e8:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 80015ec:	f022 0203 	bic.w	r2, r2, #3
 80015f0:	6582      	str	r2, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 80015f2:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80015f4:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80015f6:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 80015fa:	f022 0203 	bic.w	r2, r2, #3
 80015fe:	3204      	adds	r2, #4
 8001600:	6582      	str	r2, [r0, #88]	; 0x58
 8001602:	e7f6      	b.n	80015f2 <DMA_CalcBaseAndBitshift+0x22>
 8001604:	aaaaaaab 	.word	0xaaaaaaab
 8001608:	08008340 	.word	0x08008340

0800160c <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800160c:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800160e:	6982      	ldr	r2, [r0, #24]
 8001610:	b992      	cbnz	r2, 8001638 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8001612:	2b01      	cmp	r3, #1
 8001614:	d00a      	beq.n	800162c <DMA_CheckFifoParam+0x20>
 8001616:	b11b      	cbz	r3, 8001620 <DMA_CheckFifoParam+0x14>
 8001618:	2b02      	cmp	r3, #2
 800161a:	d001      	beq.n	8001620 <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 800161c:	2000      	movs	r0, #0
 800161e:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001620:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001622:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001626:	d12c      	bne.n	8001682 <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 8001628:	2000      	movs	r0, #0
 800162a:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800162c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800162e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001632:	d028      	beq.n	8001686 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8001634:	2000      	movs	r0, #0
 8001636:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001638:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800163c:	d005      	beq.n	800164a <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800163e:	2b02      	cmp	r3, #2
 8001640:	d929      	bls.n	8001696 <DMA_CheckFifoParam+0x8a>
 8001642:	2b03      	cmp	r3, #3
 8001644:	d015      	beq.n	8001672 <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 8001646:	2000      	movs	r0, #0
 8001648:	4770      	bx	lr
    switch (tmp)
 800164a:	2b03      	cmp	r3, #3
 800164c:	d803      	bhi.n	8001656 <DMA_CheckFifoParam+0x4a>
 800164e:	e8df f003 	tbb	[pc, r3]
 8001652:	041c      	.short	0x041c
 8001654:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 8001656:	2000      	movs	r0, #0
 8001658:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800165a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800165c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001660:	d115      	bne.n	800168e <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 8001662:	2000      	movs	r0, #0
 8001664:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001666:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001668:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800166c:	d011      	beq.n	8001692 <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 800166e:	2000      	movs	r0, #0
 8001670:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001672:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001674:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001678:	d001      	beq.n	800167e <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 800167a:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 800167c:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 800167e:	2000      	movs	r0, #0
 8001680:	4770      	bx	lr
        status = HAL_ERROR;
 8001682:	2001      	movs	r0, #1
 8001684:	4770      	bx	lr
        status = HAL_ERROR;
 8001686:	2001      	movs	r0, #1
 8001688:	4770      	bx	lr
      status = HAL_ERROR;
 800168a:	2001      	movs	r0, #1
 800168c:	4770      	bx	lr
        status = HAL_ERROR;
 800168e:	2001      	movs	r0, #1
 8001690:	4770      	bx	lr
        status = HAL_ERROR;
 8001692:	2001      	movs	r0, #1
 8001694:	4770      	bx	lr
      status = HAL_ERROR;
 8001696:	2001      	movs	r0, #1
 8001698:	4770      	bx	lr
	...

0800169c <HAL_DMA_Init>:
{
 800169c:	b570      	push	{r4, r5, r6, lr}
 800169e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80016a0:	f7ff fc6c 	bl	8000f7c <HAL_GetTick>
  if(hdma == NULL)
 80016a4:	2c00      	cmp	r4, #0
 80016a6:	d05b      	beq.n	8001760 <HAL_DMA_Init+0xc4>
 80016a8:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 80016aa:	2300      	movs	r3, #0
 80016ac:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80016b0:	2302      	movs	r3, #2
 80016b2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80016b6:	6822      	ldr	r2, [r4, #0]
 80016b8:	6813      	ldr	r3, [r2, #0]
 80016ba:	f023 0301 	bic.w	r3, r3, #1
 80016be:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016c0:	6823      	ldr	r3, [r4, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	f012 0f01 	tst.w	r2, #1
 80016c8:	d00a      	beq.n	80016e0 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016ca:	f7ff fc57 	bl	8000f7c <HAL_GetTick>
 80016ce:	1b40      	subs	r0, r0, r5
 80016d0:	2805      	cmp	r0, #5
 80016d2:	d9f5      	bls.n	80016c0 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016d4:	2320      	movs	r3, #32
 80016d6:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016d8:	2003      	movs	r0, #3
 80016da:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80016de:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 80016e0:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80016e2:	4820      	ldr	r0, [pc, #128]	; (8001764 <HAL_DMA_Init+0xc8>)
 80016e4:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016e6:	6861      	ldr	r1, [r4, #4]
 80016e8:	68a2      	ldr	r2, [r4, #8]
 80016ea:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016ec:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016ee:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016f0:	6921      	ldr	r1, [r4, #16]
 80016f2:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016f4:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016f6:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016f8:	69a1      	ldr	r1, [r4, #24]
 80016fa:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80016fc:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016fe:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001700:	6a21      	ldr	r1, [r4, #32]
 8001702:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001704:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001706:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001708:	2904      	cmp	r1, #4
 800170a:	d01e      	beq.n	800174a <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 800170c:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 800170e:	6826      	ldr	r6, [r4, #0]
 8001710:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001712:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8001716:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001718:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800171a:	2b04      	cmp	r3, #4
 800171c:	d107      	bne.n	800172e <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 800171e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001720:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001722:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001724:	b11b      	cbz	r3, 800172e <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001726:	4620      	mov	r0, r4
 8001728:	f7ff ff70 	bl	800160c <DMA_CheckFifoParam>
 800172c:	b990      	cbnz	r0, 8001754 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 800172e:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001730:	4620      	mov	r0, r4
 8001732:	f7ff ff4d 	bl	80015d0 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001736:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001738:	233f      	movs	r3, #63	; 0x3f
 800173a:	4093      	lsls	r3, r2
 800173c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800173e:	2000      	movs	r0, #0
 8001740:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001742:	2301      	movs	r3, #1
 8001744:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001748:	e7c9      	b.n	80016de <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800174a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800174c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800174e:	4301      	orrs	r1, r0
 8001750:	430a      	orrs	r2, r1
 8001752:	e7db      	b.n	800170c <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001754:	2340      	movs	r3, #64	; 0x40
 8001756:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001758:	2001      	movs	r0, #1
 800175a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 800175e:	e7be      	b.n	80016de <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8001760:	2001      	movs	r0, #1
 8001762:	e7bc      	b.n	80016de <HAL_DMA_Init+0x42>
 8001764:	f010803f 	.word	0xf010803f

08001768 <HAL_DMA_Start_IT>:
{
 8001768:	b538      	push	{r3, r4, r5, lr}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800176a:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 800176c:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8001770:	2c01      	cmp	r4, #1
 8001772:	d02c      	beq.n	80017ce <HAL_DMA_Start_IT+0x66>
 8001774:	2401      	movs	r4, #1
 8001776:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800177a:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 800177e:	b2e4      	uxtb	r4, r4
 8001780:	2c01      	cmp	r4, #1
 8001782:	d004      	beq.n	800178e <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 8001784:	2300      	movs	r3, #0
 8001786:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 800178a:	2002      	movs	r0, #2
}
 800178c:	bd38      	pop	{r3, r4, r5, pc}
 800178e:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 8001790:	2002      	movs	r0, #2
 8001792:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001796:	2000      	movs	r0, #0
 8001798:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800179a:	4620      	mov	r0, r4
 800179c:	f7ff ff02 	bl	80015a4 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017a0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80017a2:	233f      	movs	r3, #63	; 0x3f
 80017a4:	4093      	lsls	r3, r2
 80017a6:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80017a8:	6822      	ldr	r2, [r4, #0]
 80017aa:	6813      	ldr	r3, [r2, #0]
 80017ac:	f043 0316 	orr.w	r3, r3, #22
 80017b0:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 80017b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80017b4:	b123      	cbz	r3, 80017c0 <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 80017b6:	6822      	ldr	r2, [r4, #0]
 80017b8:	6813      	ldr	r3, [r2, #0]
 80017ba:	f043 0308 	orr.w	r3, r3, #8
 80017be:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80017c0:	6822      	ldr	r2, [r4, #0]
 80017c2:	6813      	ldr	r3, [r2, #0]
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017ca:	2000      	movs	r0, #0
 80017cc:	e7de      	b.n	800178c <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 80017ce:	2002      	movs	r0, #2
 80017d0:	e7dc      	b.n	800178c <HAL_DMA_Start_IT+0x24>
	...

080017d4 <HAL_DMA_IRQHandler>:
{
 80017d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017d6:	b083      	sub	sp, #12
 80017d8:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 80017da:	2300      	movs	r3, #0
 80017dc:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80017de:	4b72      	ldr	r3, [pc, #456]	; (80019a8 <HAL_DMA_IRQHandler+0x1d4>)
 80017e0:	681d      	ldr	r5, [r3, #0]
 80017e2:	4b72      	ldr	r3, [pc, #456]	; (80019ac <HAL_DMA_IRQHandler+0x1d8>)
 80017e4:	fba3 3505 	umull	r3, r5, r3, r5
 80017e8:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017ea:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 80017ec:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80017ee:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80017f0:	2308      	movs	r3, #8
 80017f2:	4093      	lsls	r3, r2
 80017f4:	4233      	tst	r3, r6
 80017f6:	d010      	beq.n	800181a <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80017f8:	6803      	ldr	r3, [r0, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	f012 0f04 	tst.w	r2, #4
 8001800:	d00b      	beq.n	800181a <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	f022 0204 	bic.w	r2, r2, #4
 8001808:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800180a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800180c:	2308      	movs	r3, #8
 800180e:	4093      	lsls	r3, r2
 8001810:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001812:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800181a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800181c:	2301      	movs	r3, #1
 800181e:	4093      	lsls	r3, r2
 8001820:	4233      	tst	r3, r6
 8001822:	d009      	beq.n	8001838 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001824:	6822      	ldr	r2, [r4, #0]
 8001826:	6952      	ldr	r2, [r2, #20]
 8001828:	f012 0f80 	tst.w	r2, #128	; 0x80
 800182c:	d004      	beq.n	8001838 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800182e:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001830:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001832:	f043 0302 	orr.w	r3, r3, #2
 8001836:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001838:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800183a:	2304      	movs	r3, #4
 800183c:	4093      	lsls	r3, r2
 800183e:	4233      	tst	r3, r6
 8001840:	d009      	beq.n	8001856 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001842:	6822      	ldr	r2, [r4, #0]
 8001844:	6812      	ldr	r2, [r2, #0]
 8001846:	f012 0f02 	tst.w	r2, #2
 800184a:	d004      	beq.n	8001856 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800184c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800184e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001850:	f043 0304 	orr.w	r3, r3, #4
 8001854:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001856:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001858:	2310      	movs	r3, #16
 800185a:	4093      	lsls	r3, r2
 800185c:	4233      	tst	r3, r6
 800185e:	d024      	beq.n	80018aa <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001860:	6822      	ldr	r2, [r4, #0]
 8001862:	6812      	ldr	r2, [r2, #0]
 8001864:	f012 0f08 	tst.w	r2, #8
 8001868:	d01f      	beq.n	80018aa <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800186a:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800186c:	6823      	ldr	r3, [r4, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001874:	d00d      	beq.n	8001892 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800187c:	d104      	bne.n	8001888 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 800187e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001880:	b19b      	cbz	r3, 80018aa <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8001882:	4620      	mov	r0, r4
 8001884:	4798      	blx	r3
 8001886:	e010      	b.n	80018aa <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001888:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800188a:	b173      	cbz	r3, 80018aa <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 800188c:	4620      	mov	r0, r4
 800188e:	4798      	blx	r3
 8001890:	e00b      	b.n	80018aa <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001898:	d103      	bne.n	80018a2 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	f022 0208 	bic.w	r2, r2, #8
 80018a0:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80018a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018a4:	b10b      	cbz	r3, 80018aa <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 80018a6:	4620      	mov	r0, r4
 80018a8:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80018aa:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80018ac:	2320      	movs	r3, #32
 80018ae:	4093      	lsls	r3, r2
 80018b0:	4233      	tst	r3, r6
 80018b2:	d055      	beq.n	8001960 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80018b4:	6822      	ldr	r2, [r4, #0]
 80018b6:	6812      	ldr	r2, [r2, #0]
 80018b8:	f012 0f10 	tst.w	r2, #16
 80018bc:	d050      	beq.n	8001960 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80018be:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80018c0:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	2b05      	cmp	r3, #5
 80018c8:	d00e      	beq.n	80018e8 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018ca:	6823      	ldr	r3, [r4, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80018d2:	d033      	beq.n	800193c <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80018da:	d12a      	bne.n	8001932 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 80018dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d03e      	beq.n	8001960 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 80018e2:	4620      	mov	r0, r4
 80018e4:	4798      	blx	r3
 80018e6:	e03b      	b.n	8001960 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018e8:	6822      	ldr	r2, [r4, #0]
 80018ea:	6813      	ldr	r3, [r2, #0]
 80018ec:	f023 0316 	bic.w	r3, r3, #22
 80018f0:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018f2:	6822      	ldr	r2, [r4, #0]
 80018f4:	6953      	ldr	r3, [r2, #20]
 80018f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80018fa:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018fe:	b1a3      	cbz	r3, 800192a <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001900:	6822      	ldr	r2, [r4, #0]
 8001902:	6813      	ldr	r3, [r2, #0]
 8001904:	f023 0308 	bic.w	r3, r3, #8
 8001908:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800190a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800190c:	233f      	movs	r3, #63	; 0x3f
 800190e:	4093      	lsls	r3, r2
 8001910:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8001912:	2300      	movs	r3, #0
 8001914:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8001918:	2301      	movs	r3, #1
 800191a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 800191e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001920:	2b00      	cmp	r3, #0
 8001922:	d03f      	beq.n	80019a4 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8001924:	4620      	mov	r0, r4
 8001926:	4798      	blx	r3
 8001928:	e03c      	b.n	80019a4 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800192a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1e7      	bne.n	8001900 <HAL_DMA_IRQHandler+0x12c>
 8001930:	e7eb      	b.n	800190a <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8001932:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001934:	b1a3      	cbz	r3, 8001960 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8001936:	4620      	mov	r0, r4
 8001938:	4798      	blx	r3
 800193a:	e011      	b.n	8001960 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001942:	d109      	bne.n	8001958 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	f022 0210 	bic.w	r2, r2, #16
 800194a:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 800194c:	2300      	movs	r3, #0
 800194e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8001952:	2301      	movs	r3, #1
 8001954:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8001958:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800195a:	b10b      	cbz	r3, 8001960 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 800195c:	4620      	mov	r0, r4
 800195e:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001960:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001962:	b1fb      	cbz	r3, 80019a4 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001964:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001966:	f013 0f01 	tst.w	r3, #1
 800196a:	d017      	beq.n	800199c <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 800196c:	2305      	movs	r3, #5
 800196e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001972:	6822      	ldr	r2, [r4, #0]
 8001974:	6813      	ldr	r3, [r2, #0]
 8001976:	f023 0301 	bic.w	r3, r3, #1
 800197a:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 800197c:	9b01      	ldr	r3, [sp, #4]
 800197e:	3301      	adds	r3, #1
 8001980:	9301      	str	r3, [sp, #4]
 8001982:	42ab      	cmp	r3, r5
 8001984:	d804      	bhi.n	8001990 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001986:	6823      	ldr	r3, [r4, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f013 0f01 	tst.w	r3, #1
 800198e:	d1f5      	bne.n	800197c <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8001990:	2300      	movs	r3, #0
 8001992:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8001996:	2301      	movs	r3, #1
 8001998:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 800199c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800199e:	b10b      	cbz	r3, 80019a4 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 80019a0:	4620      	mov	r0, r4
 80019a2:	4798      	blx	r3
}
 80019a4:	b003      	add	sp, #12
 80019a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019a8:	20000008 	.word	0x20000008
 80019ac:	1b4e81b5 	.word	0x1b4e81b5

080019b0 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019b0:	2300      	movs	r3, #0
 80019b2:	2b0f      	cmp	r3, #15
 80019b4:	f200 80d1 	bhi.w	8001b5a <HAL_GPIO_Init+0x1aa>
{
 80019b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ba:	b083      	sub	sp, #12
 80019bc:	e039      	b.n	8001a32 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019be:	2206      	movs	r2, #6
 80019c0:	e000      	b.n	80019c4 <HAL_GPIO_Init+0x14>
 80019c2:	2200      	movs	r2, #0
 80019c4:	40aa      	lsls	r2, r5
 80019c6:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019c8:	3402      	adds	r4, #2
 80019ca:	4d64      	ldr	r5, [pc, #400]	; (8001b5c <HAL_GPIO_Init+0x1ac>)
 80019cc:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019d0:	4a63      	ldr	r2, [pc, #396]	; (8001b60 <HAL_GPIO_Init+0x1b0>)
 80019d2:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80019d4:	43f2      	mvns	r2, r6
 80019d6:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019da:	684f      	ldr	r7, [r1, #4]
 80019dc:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80019e0:	d001      	beq.n	80019e6 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 80019e2:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->IMR = temp;
 80019e6:	4c5e      	ldr	r4, [pc, #376]	; (8001b60 <HAL_GPIO_Init+0x1b0>)
 80019e8:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 80019ea:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80019ec:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019f0:	684f      	ldr	r7, [r1, #4]
 80019f2:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80019f6:	d001      	beq.n	80019fc <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 80019f8:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->EMR = temp;
 80019fc:	4c58      	ldr	r4, [pc, #352]	; (8001b60 <HAL_GPIO_Init+0x1b0>)
 80019fe:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a00:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8001a02:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a06:	684f      	ldr	r7, [r1, #4]
 8001a08:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001a0c:	d001      	beq.n	8001a12 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8001a0e:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->RTSR = temp;
 8001a12:	4c53      	ldr	r4, [pc, #332]	; (8001b60 <HAL_GPIO_Init+0x1b0>)
 8001a14:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8001a16:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001a18:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a1a:	684d      	ldr	r5, [r1, #4]
 8001a1c:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 8001a20:	d001      	beq.n	8001a26 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8001a22:	ea46 0204 	orr.w	r2, r6, r4
        }
        EXTI->FTSR = temp;
 8001a26:	4c4e      	ldr	r4, [pc, #312]	; (8001b60 <HAL_GPIO_Init+0x1b0>)
 8001a28:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	2b0f      	cmp	r3, #15
 8001a2e:	f200 8092 	bhi.w	8001b56 <HAL_GPIO_Init+0x1a6>
    ioposition = 0x01U << position;
 8001a32:	2201      	movs	r2, #1
 8001a34:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a36:	680c      	ldr	r4, [r1, #0]
 8001a38:	ea04 0602 	and.w	r6, r4, r2
    if(iocurrent == ioposition)
 8001a3c:	42b2      	cmp	r2, r6
 8001a3e:	d1f4      	bne.n	8001a2a <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a40:	684c      	ldr	r4, [r1, #4]
 8001a42:	1e65      	subs	r5, r4, #1
 8001a44:	2d01      	cmp	r5, #1
 8001a46:	d903      	bls.n	8001a50 <HAL_GPIO_Init+0xa0>
 8001a48:	2c11      	cmp	r4, #17
 8001a4a:	d001      	beq.n	8001a50 <HAL_GPIO_Init+0xa0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a4c:	2c12      	cmp	r4, #18
 8001a4e:	d112      	bne.n	8001a76 <HAL_GPIO_Init+0xc6>
        temp = GPIOx->OSPEEDR; 
 8001a50:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a52:	005f      	lsls	r7, r3, #1
 8001a54:	2403      	movs	r4, #3
 8001a56:	40bc      	lsls	r4, r7
 8001a58:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a5c:	68cc      	ldr	r4, [r1, #12]
 8001a5e:	40bc      	lsls	r4, r7
 8001a60:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8001a62:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8001a64:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a66:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a6a:	684c      	ldr	r4, [r1, #4]
 8001a6c:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8001a70:	409a      	lsls	r2, r3
 8001a72:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8001a74:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8001a76:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a78:	005f      	lsls	r7, r3, #1
 8001a7a:	2203      	movs	r2, #3
 8001a7c:	40ba      	lsls	r2, r7
 8001a7e:	43d2      	mvns	r2, r2
 8001a80:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a82:	688d      	ldr	r5, [r1, #8]
 8001a84:	40bd      	lsls	r5, r7
 8001a86:	4325      	orrs	r5, r4
      GPIOx->PUPDR = temp;
 8001a88:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a8a:	684c      	ldr	r4, [r1, #4]
 8001a8c:	2c02      	cmp	r4, #2
 8001a8e:	d001      	beq.n	8001a94 <HAL_GPIO_Init+0xe4>
 8001a90:	2c12      	cmp	r4, #18
 8001a92:	d113      	bne.n	8001abc <HAL_GPIO_Init+0x10c>
        temp = GPIOx->AFR[position >> 3U];
 8001a94:	08dd      	lsrs	r5, r3, #3
 8001a96:	3508      	adds	r5, #8
 8001a98:	f850 e025 	ldr.w	lr, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a9c:	f003 0407 	and.w	r4, r3, #7
 8001aa0:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8001aa4:	240f      	movs	r4, #15
 8001aa6:	fa04 f40c 	lsl.w	r4, r4, ip
 8001aaa:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001aae:	690c      	ldr	r4, [r1, #16]
 8001ab0:	fa04 f40c 	lsl.w	r4, r4, ip
 8001ab4:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001ab8:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 8001abc:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001abe:	4022      	ands	r2, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ac0:	684c      	ldr	r4, [r1, #4]
 8001ac2:	f004 0403 	and.w	r4, r4, #3
 8001ac6:	40bc      	lsls	r4, r7
 8001ac8:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8001aca:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001acc:	684a      	ldr	r2, [r1, #4]
 8001ace:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8001ad2:	d0aa      	beq.n	8001a2a <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	9201      	str	r2, [sp, #4]
 8001ad8:	4a22      	ldr	r2, [pc, #136]	; (8001b64 <HAL_GPIO_Init+0x1b4>)
 8001ada:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8001adc:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8001ae0:	6454      	str	r4, [r2, #68]	; 0x44
 8001ae2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001ae4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001ae8:	9201      	str	r2, [sp, #4]
 8001aea:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001aec:	089c      	lsrs	r4, r3, #2
 8001aee:	1ca5      	adds	r5, r4, #2
 8001af0:	4a1a      	ldr	r2, [pc, #104]	; (8001b5c <HAL_GPIO_Init+0x1ac>)
 8001af2:	f852 7025 	ldr.w	r7, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001af6:	f003 0203 	and.w	r2, r3, #3
 8001afa:	0095      	lsls	r5, r2, #2
 8001afc:	220f      	movs	r2, #15
 8001afe:	40aa      	lsls	r2, r5
 8001b00:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b04:	4a18      	ldr	r2, [pc, #96]	; (8001b68 <HAL_GPIO_Init+0x1b8>)
 8001b06:	4290      	cmp	r0, r2
 8001b08:	f43f af5b 	beq.w	80019c2 <HAL_GPIO_Init+0x12>
 8001b0c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b10:	4290      	cmp	r0, r2
 8001b12:	d016      	beq.n	8001b42 <HAL_GPIO_Init+0x192>
 8001b14:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b18:	4290      	cmp	r0, r2
 8001b1a:	d014      	beq.n	8001b46 <HAL_GPIO_Init+0x196>
 8001b1c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b20:	4290      	cmp	r0, r2
 8001b22:	d012      	beq.n	8001b4a <HAL_GPIO_Init+0x19a>
 8001b24:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b28:	4290      	cmp	r0, r2
 8001b2a:	d010      	beq.n	8001b4e <HAL_GPIO_Init+0x19e>
 8001b2c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b30:	4290      	cmp	r0, r2
 8001b32:	d00e      	beq.n	8001b52 <HAL_GPIO_Init+0x1a2>
 8001b34:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b38:	4290      	cmp	r0, r2
 8001b3a:	f43f af40 	beq.w	80019be <HAL_GPIO_Init+0xe>
 8001b3e:	2207      	movs	r2, #7
 8001b40:	e740      	b.n	80019c4 <HAL_GPIO_Init+0x14>
 8001b42:	2201      	movs	r2, #1
 8001b44:	e73e      	b.n	80019c4 <HAL_GPIO_Init+0x14>
 8001b46:	2202      	movs	r2, #2
 8001b48:	e73c      	b.n	80019c4 <HAL_GPIO_Init+0x14>
 8001b4a:	2203      	movs	r2, #3
 8001b4c:	e73a      	b.n	80019c4 <HAL_GPIO_Init+0x14>
 8001b4e:	2204      	movs	r2, #4
 8001b50:	e738      	b.n	80019c4 <HAL_GPIO_Init+0x14>
 8001b52:	2205      	movs	r2, #5
 8001b54:	e736      	b.n	80019c4 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8001b56:	b003      	add	sp, #12
 8001b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b5a:	4770      	bx	lr
 8001b5c:	40013800 	.word	0x40013800
 8001b60:	40013c00 	.word	0x40013c00
 8001b64:	40023800 	.word	0x40023800
 8001b68:	40020000 	.word	0x40020000

08001b6c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b6c:	b912      	cbnz	r2, 8001b74 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b6e:	0409      	lsls	r1, r1, #16
 8001b70:	6181      	str	r1, [r0, #24]
  }
}
 8001b72:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8001b74:	6181      	str	r1, [r0, #24]
 8001b76:	4770      	bx	lr

08001b78 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001b78:	b510      	push	{r4, lr}
 8001b7a:	b082      	sub	sp, #8
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	9301      	str	r3, [sp, #4]
 8001b80:	4b19      	ldr	r3, [pc, #100]	; (8001be8 <HAL_PWREx_EnableOverDrive+0x70>)
 8001b82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b84:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b88:	641a      	str	r2, [r3, #64]	; 0x40
 8001b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b90:	9301      	str	r3, [sp, #4]
 8001b92:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001b94:	4b15      	ldr	r3, [pc, #84]	; (8001bec <HAL_PWREx_EnableOverDrive+0x74>)
 8001b96:	2201      	movs	r2, #1
 8001b98:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b9a:	f7ff f9ef 	bl	8000f7c <HAL_GetTick>
 8001b9e:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001ba0:	4b13      	ldr	r3, [pc, #76]	; (8001bf0 <HAL_PWREx_EnableOverDrive+0x78>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001ba8:	d108      	bne.n	8001bbc <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001baa:	f7ff f9e7 	bl	8000f7c <HAL_GetTick>
 8001bae:	1b00      	subs	r0, r0, r4
 8001bb0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001bb4:	d9f4      	bls.n	8001ba0 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8001bb6:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8001bb8:	b002      	add	sp, #8
 8001bba:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001bbc:	4b0d      	ldr	r3, [pc, #52]	; (8001bf4 <HAL_PWREx_EnableOverDrive+0x7c>)
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8001bc2:	f7ff f9db 	bl	8000f7c <HAL_GetTick>
 8001bc6:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001bc8:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <HAL_PWREx_EnableOverDrive+0x78>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001bd0:	d107      	bne.n	8001be2 <HAL_PWREx_EnableOverDrive+0x6a>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001bd2:	f7ff f9d3 	bl	8000f7c <HAL_GetTick>
 8001bd6:	1b00      	subs	r0, r0, r4
 8001bd8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001bdc:	d9f4      	bls.n	8001bc8 <HAL_PWREx_EnableOverDrive+0x50>
      return HAL_TIMEOUT;
 8001bde:	2003      	movs	r0, #3
 8001be0:	e7ea      	b.n	8001bb8 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8001be2:	2000      	movs	r0, #0
 8001be4:	e7e8      	b.n	8001bb8 <HAL_PWREx_EnableOverDrive+0x40>
 8001be6:	bf00      	nop
 8001be8:	40023800 	.word	0x40023800
 8001bec:	420e0040 	.word	0x420e0040
 8001bf0:	40007000 	.word	0x40007000
 8001bf4:	420e0044 	.word	0x420e0044

08001bf8 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bf8:	2800      	cmp	r0, #0
 8001bfa:	f000 809e 	beq.w	8001d3a <HAL_RCC_ClockConfig+0x142>
{
 8001bfe:	b570      	push	{r4, r5, r6, lr}
 8001c00:	4604      	mov	r4, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c02:	4b50      	ldr	r3, [pc, #320]	; (8001d44 <HAL_RCC_ClockConfig+0x14c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 030f 	and.w	r3, r3, #15
 8001c0a:	428b      	cmp	r3, r1
 8001c0c:	d209      	bcs.n	8001c22 <HAL_RCC_ClockConfig+0x2a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0e:	b2cb      	uxtb	r3, r1
 8001c10:	4a4c      	ldr	r2, [pc, #304]	; (8001d44 <HAL_RCC_ClockConfig+0x14c>)
 8001c12:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c14:	6813      	ldr	r3, [r2, #0]
 8001c16:	f003 030f 	and.w	r3, r3, #15
 8001c1a:	428b      	cmp	r3, r1
 8001c1c:	d001      	beq.n	8001c22 <HAL_RCC_ClockConfig+0x2a>
    {
      return HAL_ERROR;
 8001c1e:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 8001c20:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c22:	6823      	ldr	r3, [r4, #0]
 8001c24:	f013 0f02 	tst.w	r3, #2
 8001c28:	d017      	beq.n	8001c5a <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c2a:	f013 0f04 	tst.w	r3, #4
 8001c2e:	d004      	beq.n	8001c3a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c30:	4a45      	ldr	r2, [pc, #276]	; (8001d48 <HAL_RCC_ClockConfig+0x150>)
 8001c32:	6893      	ldr	r3, [r2, #8]
 8001c34:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c38:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c3a:	6823      	ldr	r3, [r4, #0]
 8001c3c:	f013 0f08 	tst.w	r3, #8
 8001c40:	d004      	beq.n	8001c4c <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c42:	4a41      	ldr	r2, [pc, #260]	; (8001d48 <HAL_RCC_ClockConfig+0x150>)
 8001c44:	6893      	ldr	r3, [r2, #8]
 8001c46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c4a:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c4c:	4a3e      	ldr	r2, [pc, #248]	; (8001d48 <HAL_RCC_ClockConfig+0x150>)
 8001c4e:	6893      	ldr	r3, [r2, #8]
 8001c50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c54:	68a0      	ldr	r0, [r4, #8]
 8001c56:	4303      	orrs	r3, r0
 8001c58:	6093      	str	r3, [r2, #8]
 8001c5a:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c5c:	6823      	ldr	r3, [r4, #0]
 8001c5e:	f013 0f01 	tst.w	r3, #1
 8001c62:	d032      	beq.n	8001cca <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c64:	6863      	ldr	r3, [r4, #4]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d021      	beq.n	8001cae <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c6a:	1e9a      	subs	r2, r3, #2
 8001c6c:	2a01      	cmp	r2, #1
 8001c6e:	d925      	bls.n	8001cbc <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c70:	4a35      	ldr	r2, [pc, #212]	; (8001d48 <HAL_RCC_ClockConfig+0x150>)
 8001c72:	6812      	ldr	r2, [r2, #0]
 8001c74:	f012 0f02 	tst.w	r2, #2
 8001c78:	d061      	beq.n	8001d3e <HAL_RCC_ClockConfig+0x146>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c7a:	4933      	ldr	r1, [pc, #204]	; (8001d48 <HAL_RCC_ClockConfig+0x150>)
 8001c7c:	688a      	ldr	r2, [r1, #8]
 8001c7e:	f022 0203 	bic.w	r2, r2, #3
 8001c82:	4313      	orrs	r3, r2
 8001c84:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001c86:	f7ff f979 	bl	8000f7c <HAL_GetTick>
 8001c8a:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c8c:	4b2e      	ldr	r3, [pc, #184]	; (8001d48 <HAL_RCC_ClockConfig+0x150>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f003 030c 	and.w	r3, r3, #12
 8001c94:	6862      	ldr	r2, [r4, #4]
 8001c96:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001c9a:	d016      	beq.n	8001cca <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c9c:	f7ff f96e 	bl	8000f7c <HAL_GetTick>
 8001ca0:	1b80      	subs	r0, r0, r6
 8001ca2:	f241 3388 	movw	r3, #5000	; 0x1388
 8001ca6:	4298      	cmp	r0, r3
 8001ca8:	d9f0      	bls.n	8001c8c <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8001caa:	2003      	movs	r0, #3
 8001cac:	e7b8      	b.n	8001c20 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cae:	4a26      	ldr	r2, [pc, #152]	; (8001d48 <HAL_RCC_ClockConfig+0x150>)
 8001cb0:	6812      	ldr	r2, [r2, #0]
 8001cb2:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001cb6:	d1e0      	bne.n	8001c7a <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8001cb8:	2001      	movs	r0, #1
 8001cba:	e7b1      	b.n	8001c20 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cbc:	4a22      	ldr	r2, [pc, #136]	; (8001d48 <HAL_RCC_ClockConfig+0x150>)
 8001cbe:	6812      	ldr	r2, [r2, #0]
 8001cc0:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001cc4:	d1d9      	bne.n	8001c7a <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8001cc6:	2001      	movs	r0, #1
 8001cc8:	e7aa      	b.n	8001c20 <HAL_RCC_ClockConfig+0x28>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cca:	4b1e      	ldr	r3, [pc, #120]	; (8001d44 <HAL_RCC_ClockConfig+0x14c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 030f 	and.w	r3, r3, #15
 8001cd2:	42ab      	cmp	r3, r5
 8001cd4:	d909      	bls.n	8001cea <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd6:	b2ea      	uxtb	r2, r5
 8001cd8:	4b1a      	ldr	r3, [pc, #104]	; (8001d44 <HAL_RCC_ClockConfig+0x14c>)
 8001cda:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 030f 	and.w	r3, r3, #15
 8001ce2:	42ab      	cmp	r3, r5
 8001ce4:	d001      	beq.n	8001cea <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 8001ce6:	2001      	movs	r0, #1
 8001ce8:	e79a      	b.n	8001c20 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cea:	6823      	ldr	r3, [r4, #0]
 8001cec:	f013 0f04 	tst.w	r3, #4
 8001cf0:	d006      	beq.n	8001d00 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cf2:	4a15      	ldr	r2, [pc, #84]	; (8001d48 <HAL_RCC_ClockConfig+0x150>)
 8001cf4:	6893      	ldr	r3, [r2, #8]
 8001cf6:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001cfa:	68e1      	ldr	r1, [r4, #12]
 8001cfc:	430b      	orrs	r3, r1
 8001cfe:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d00:	6823      	ldr	r3, [r4, #0]
 8001d02:	f013 0f08 	tst.w	r3, #8
 8001d06:	d007      	beq.n	8001d18 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d08:	4a0f      	ldr	r2, [pc, #60]	; (8001d48 <HAL_RCC_ClockConfig+0x150>)
 8001d0a:	6893      	ldr	r3, [r2, #8]
 8001d0c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001d10:	6921      	ldr	r1, [r4, #16]
 8001d12:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001d16:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d18:	f000 f844 	bl	8001da4 <HAL_RCC_GetSysClockFreq>
 8001d1c:	4b0a      	ldr	r3, [pc, #40]	; (8001d48 <HAL_RCC_ClockConfig+0x150>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001d24:	4a09      	ldr	r2, [pc, #36]	; (8001d4c <HAL_RCC_ClockConfig+0x154>)
 8001d26:	5cd3      	ldrb	r3, [r2, r3]
 8001d28:	40d8      	lsrs	r0, r3
 8001d2a:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <HAL_RCC_ClockConfig+0x158>)
 8001d2c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001d2e:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <HAL_RCC_ClockConfig+0x15c>)
 8001d30:	6818      	ldr	r0, [r3, #0]
 8001d32:	f7ff f8d9 	bl	8000ee8 <HAL_InitTick>
  return HAL_OK;
 8001d36:	2000      	movs	r0, #0
 8001d38:	e772      	b.n	8001c20 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8001d3a:	2001      	movs	r0, #1
}
 8001d3c:	4770      	bx	lr
        return HAL_ERROR;
 8001d3e:	2001      	movs	r0, #1
 8001d40:	e76e      	b.n	8001c20 <HAL_RCC_ClockConfig+0x28>
 8001d42:	bf00      	nop
 8001d44:	40023c00 	.word	0x40023c00
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	08008348 	.word	0x08008348
 8001d50:	20000008 	.word	0x20000008
 8001d54:	20000004 	.word	0x20000004

08001d58 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001d58:	4b01      	ldr	r3, [pc, #4]	; (8001d60 <HAL_RCC_GetHCLKFreq+0x8>)
 8001d5a:	6818      	ldr	r0, [r3, #0]
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	20000008 	.word	0x20000008

08001d64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d64:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d66:	f7ff fff7 	bl	8001d58 <HAL_RCC_GetHCLKFreq>
 8001d6a:	4b04      	ldr	r3, [pc, #16]	; (8001d7c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001d72:	4a03      	ldr	r2, [pc, #12]	; (8001d80 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001d74:	5cd3      	ldrb	r3, [r2, r3]
}
 8001d76:	40d8      	lsrs	r0, r3
 8001d78:	bd08      	pop	{r3, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	08008358 	.word	0x08008358

08001d84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d84:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d86:	f7ff ffe7 	bl	8001d58 <HAL_RCC_GetHCLKFreq>
 8001d8a:	4b04      	ldr	r3, [pc, #16]	; (8001d9c <HAL_RCC_GetPCLK2Freq+0x18>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001d92:	4a03      	ldr	r2, [pc, #12]	; (8001da0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001d94:	5cd3      	ldrb	r3, [r2, r3]
}
 8001d96:	40d8      	lsrs	r0, r3
 8001d98:	bd08      	pop	{r3, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	08008358 	.word	0x08008358

08001da4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001da4:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001da8:	4b5c      	ldr	r3, [pc, #368]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x178>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f003 030c 	and.w	r3, r3, #12
 8001db0:	2b08      	cmp	r3, #8
 8001db2:	d007      	beq.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x20>
 8001db4:	2b0c      	cmp	r3, #12
 8001db6:	d05b      	beq.n	8001e70 <HAL_RCC_GetSysClockFreq+0xcc>
 8001db8:	2b04      	cmp	r3, #4
 8001dba:	f000 80ad 	beq.w	8001f18 <HAL_RCC_GetSysClockFreq+0x174>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001dbe:	4858      	ldr	r0, [pc, #352]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x17c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001dc0:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dc4:	4b55      	ldr	r3, [pc, #340]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x178>)
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001dd2:	d02a      	beq.n	8001e2a <HAL_RCC_GetSysClockFreq+0x86>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dd4:	4b51      	ldr	r3, [pc, #324]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x178>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001ddc:	461e      	mov	r6, r3
 8001dde:	2700      	movs	r7, #0
 8001de0:	015c      	lsls	r4, r3, #5
 8001de2:	2500      	movs	r5, #0
 8001de4:	1ae4      	subs	r4, r4, r3
 8001de6:	eb65 0507 	sbc.w	r5, r5, r7
 8001dea:	01a9      	lsls	r1, r5, #6
 8001dec:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8001df0:	01a0      	lsls	r0, r4, #6
 8001df2:	1b00      	subs	r0, r0, r4
 8001df4:	eb61 0105 	sbc.w	r1, r1, r5
 8001df8:	00cb      	lsls	r3, r1, #3
 8001dfa:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001dfe:	00c4      	lsls	r4, r0, #3
 8001e00:	19a0      	adds	r0, r4, r6
 8001e02:	eb43 0107 	adc.w	r1, r3, r7
 8001e06:	024b      	lsls	r3, r1, #9
 8001e08:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8001e0c:	0244      	lsls	r4, r0, #9
 8001e0e:	4620      	mov	r0, r4
 8001e10:	4619      	mov	r1, r3
 8001e12:	2300      	movs	r3, #0
 8001e14:	f7fe fee8 	bl	8000be8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e18:	4b40      	ldr	r3, [pc, #256]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x178>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001e20:	3301      	adds	r3, #1
 8001e22:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001e24:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001e28:	e7ca      	b.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x1c>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e2a:	4b3c      	ldr	r3, [pc, #240]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x178>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001e32:	461e      	mov	r6, r3
 8001e34:	2700      	movs	r7, #0
 8001e36:	015c      	lsls	r4, r3, #5
 8001e38:	2500      	movs	r5, #0
 8001e3a:	1ae4      	subs	r4, r4, r3
 8001e3c:	eb65 0507 	sbc.w	r5, r5, r7
 8001e40:	01a9      	lsls	r1, r5, #6
 8001e42:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8001e46:	01a0      	lsls	r0, r4, #6
 8001e48:	1b00      	subs	r0, r0, r4
 8001e4a:	eb61 0105 	sbc.w	r1, r1, r5
 8001e4e:	00cb      	lsls	r3, r1, #3
 8001e50:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001e54:	00c4      	lsls	r4, r0, #3
 8001e56:	19a0      	adds	r0, r4, r6
 8001e58:	eb43 0107 	adc.w	r1, r3, r7
 8001e5c:	028b      	lsls	r3, r1, #10
 8001e5e:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8001e62:	0284      	lsls	r4, r0, #10
 8001e64:	4620      	mov	r0, r4
 8001e66:	4619      	mov	r1, r3
 8001e68:	2300      	movs	r3, #0
 8001e6a:	f7fe febd 	bl	8000be8 <__aeabi_uldivmod>
 8001e6e:	e7d3      	b.n	8001e18 <HAL_RCC_GetSysClockFreq+0x74>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e70:	4b2a      	ldr	r3, [pc, #168]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x178>)
 8001e72:	685a      	ldr	r2, [r3, #4]
 8001e74:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001e7e:	d028      	beq.n	8001ed2 <HAL_RCC_GetSysClockFreq+0x12e>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e80:	4b26      	ldr	r3, [pc, #152]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x178>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001e88:	461e      	mov	r6, r3
 8001e8a:	2700      	movs	r7, #0
 8001e8c:	015c      	lsls	r4, r3, #5
 8001e8e:	2500      	movs	r5, #0
 8001e90:	1ae4      	subs	r4, r4, r3
 8001e92:	eb65 0507 	sbc.w	r5, r5, r7
 8001e96:	01a9      	lsls	r1, r5, #6
 8001e98:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8001e9c:	01a0      	lsls	r0, r4, #6
 8001e9e:	1b00      	subs	r0, r0, r4
 8001ea0:	eb61 0105 	sbc.w	r1, r1, r5
 8001ea4:	00cb      	lsls	r3, r1, #3
 8001ea6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001eaa:	00c4      	lsls	r4, r0, #3
 8001eac:	19a0      	adds	r0, r4, r6
 8001eae:	eb43 0107 	adc.w	r1, r3, r7
 8001eb2:	024b      	lsls	r3, r1, #9
 8001eb4:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8001eb8:	0244      	lsls	r4, r0, #9
 8001eba:	4620      	mov	r0, r4
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	f7fe fe92 	bl	8000be8 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001ec4:	4b15      	ldr	r3, [pc, #84]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x178>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco/pllr;
 8001ecc:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001ed0:	e776      	b.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x1c>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ed2:	4b12      	ldr	r3, [pc, #72]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x178>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001eda:	461e      	mov	r6, r3
 8001edc:	2700      	movs	r7, #0
 8001ede:	015c      	lsls	r4, r3, #5
 8001ee0:	2500      	movs	r5, #0
 8001ee2:	1ae4      	subs	r4, r4, r3
 8001ee4:	eb65 0507 	sbc.w	r5, r5, r7
 8001ee8:	01a9      	lsls	r1, r5, #6
 8001eea:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8001eee:	01a0      	lsls	r0, r4, #6
 8001ef0:	1b00      	subs	r0, r0, r4
 8001ef2:	eb61 0105 	sbc.w	r1, r1, r5
 8001ef6:	00cb      	lsls	r3, r1, #3
 8001ef8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001efc:	00c4      	lsls	r4, r0, #3
 8001efe:	19a0      	adds	r0, r4, r6
 8001f00:	eb43 0107 	adc.w	r1, r3, r7
 8001f04:	028b      	lsls	r3, r1, #10
 8001f06:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8001f0a:	0284      	lsls	r4, r0, #10
 8001f0c:	4620      	mov	r0, r4
 8001f0e:	4619      	mov	r1, r3
 8001f10:	2300      	movs	r3, #0
 8001f12:	f7fe fe69 	bl	8000be8 <__aeabi_uldivmod>
 8001f16:	e7d5      	b.n	8001ec4 <HAL_RCC_GetSysClockFreq+0x120>
      sysclockfreq = HSE_VALUE;
 8001f18:	4802      	ldr	r0, [pc, #8]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x180>)
  return sysclockfreq;
 8001f1a:	e751      	b.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x1c>
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	00f42400 	.word	0x00f42400
 8001f24:	007a1200 	.word	0x007a1200

08001f28 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f28:	b570      	push	{r4, r5, r6, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f2e:	6803      	ldr	r3, [r0, #0]
 8001f30:	f013 0f01 	tst.w	r3, #1
 8001f34:	d041      	beq.n	8001fba <HAL_RCC_OscConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001f36:	4ba6      	ldr	r3, [pc, #664]	; (80021d0 <HAL_RCC_OscConfig+0x2a8>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 030c 	and.w	r3, r3, #12
 8001f3e:	2b04      	cmp	r3, #4
 8001f40:	d032      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x80>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f42:	4ba3      	ldr	r3, [pc, #652]	; (80021d0 <HAL_RCC_OscConfig+0x2a8>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001f4a:	2b08      	cmp	r3, #8
 8001f4c:	d027      	beq.n	8001f9e <HAL_RCC_OscConfig+0x76>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f4e:	4ba0      	ldr	r3, [pc, #640]	; (80021d0 <HAL_RCC_OscConfig+0x2a8>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f56:	2b0c      	cmp	r3, #12
 8001f58:	d059      	beq.n	800200e <HAL_RCC_OscConfig+0xe6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f5a:	6863      	ldr	r3, [r4, #4]
 8001f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f60:	d05b      	beq.n	800201a <HAL_RCC_OscConfig+0xf2>
 8001f62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f66:	d05e      	beq.n	8002026 <HAL_RCC_OscConfig+0xfe>
 8001f68:	4b99      	ldr	r3, [pc, #612]	; (80021d0 <HAL_RCC_OscConfig+0x2a8>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f78:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f7a:	6863      	ldr	r3, [r4, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d05c      	beq.n	800203a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f80:	f7fe fffc 	bl	8000f7c <HAL_GetTick>
 8001f84:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f86:	4b92      	ldr	r3, [pc, #584]	; (80021d0 <HAL_RCC_OscConfig+0x2a8>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001f8e:	d114      	bne.n	8001fba <HAL_RCC_OscConfig+0x92>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f90:	f7fe fff4 	bl	8000f7c <HAL_GetTick>
 8001f94:	1b40      	subs	r0, r0, r5
 8001f96:	2864      	cmp	r0, #100	; 0x64
 8001f98:	d9f5      	bls.n	8001f86 <HAL_RCC_OscConfig+0x5e>
          {
            return HAL_TIMEOUT;
 8001f9a:	2003      	movs	r0, #3
 8001f9c:	e19d      	b.n	80022da <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f9e:	4b8c      	ldr	r3, [pc, #560]	; (80021d0 <HAL_RCC_OscConfig+0x2a8>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001fa6:	d0d2      	beq.n	8001f4e <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa8:	4b89      	ldr	r3, [pc, #548]	; (80021d0 <HAL_RCC_OscConfig+0x2a8>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001fb0:	d003      	beq.n	8001fba <HAL_RCC_OscConfig+0x92>
 8001fb2:	6863      	ldr	r3, [r4, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f000 818d 	beq.w	80022d4 <HAL_RCC_OscConfig+0x3ac>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fba:	6823      	ldr	r3, [r4, #0]
 8001fbc:	f013 0f02 	tst.w	r3, #2
 8001fc0:	d067      	beq.n	8002092 <HAL_RCC_OscConfig+0x16a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001fc2:	4b83      	ldr	r3, [pc, #524]	; (80021d0 <HAL_RCC_OscConfig+0x2a8>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f013 0f0c 	tst.w	r3, #12
 8001fca:	d04a      	beq.n	8002062 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001fcc:	4b80      	ldr	r3, [pc, #512]	; (80021d0 <HAL_RCC_OscConfig+0x2a8>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	d03f      	beq.n	8002058 <HAL_RCC_OscConfig+0x130>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fd8:	4b7d      	ldr	r3, [pc, #500]	; (80021d0 <HAL_RCC_OscConfig+0x2a8>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001fe0:	2b0c      	cmp	r3, #12
 8001fe2:	d048      	beq.n	8002076 <HAL_RCC_OscConfig+0x14e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fe4:	68e3      	ldr	r3, [r4, #12]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d074      	beq.n	80020d4 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fea:	4b7a      	ldr	r3, [pc, #488]	; (80021d4 <HAL_RCC_OscConfig+0x2ac>)
 8001fec:	2201      	movs	r2, #1
 8001fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff0:	f7fe ffc4 	bl	8000f7c <HAL_GetTick>
 8001ff4:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff6:	4b76      	ldr	r3, [pc, #472]	; (80021d0 <HAL_RCC_OscConfig+0x2a8>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f013 0f02 	tst.w	r3, #2
 8001ffe:	d160      	bne.n	80020c2 <HAL_RCC_OscConfig+0x19a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002000:	f7fe ffbc 	bl	8000f7c <HAL_GetTick>
 8002004:	1b40      	subs	r0, r0, r5
 8002006:	2802      	cmp	r0, #2
 8002008:	d9f5      	bls.n	8001ff6 <HAL_RCC_OscConfig+0xce>
          {
            return HAL_TIMEOUT;
 800200a:	2003      	movs	r0, #3
 800200c:	e165      	b.n	80022da <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800200e:	4b70      	ldr	r3, [pc, #448]	; (80021d0 <HAL_RCC_OscConfig+0x2a8>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002016:	d0a0      	beq.n	8001f5a <HAL_RCC_OscConfig+0x32>
 8002018:	e7c6      	b.n	8001fa8 <HAL_RCC_OscConfig+0x80>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800201a:	4a6d      	ldr	r2, [pc, #436]	; (80021d0 <HAL_RCC_OscConfig+0x2a8>)
 800201c:	6813      	ldr	r3, [r2, #0]
 800201e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002022:	6013      	str	r3, [r2, #0]
 8002024:	e7a9      	b.n	8001f7a <HAL_RCC_OscConfig+0x52>
 8002026:	4b6a      	ldr	r3, [pc, #424]	; (80021d0 <HAL_RCC_OscConfig+0x2a8>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	e79f      	b.n	8001f7a <HAL_RCC_OscConfig+0x52>
        tickstart = HAL_GetTick();
 800203a:	f7fe ff9f 	bl	8000f7c <HAL_GetTick>
 800203e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002040:	4b63      	ldr	r3, [pc, #396]	; (80021d0 <HAL_RCC_OscConfig+0x2a8>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002048:	d0b7      	beq.n	8001fba <HAL_RCC_OscConfig+0x92>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800204a:	f7fe ff97 	bl	8000f7c <HAL_GetTick>
 800204e:	1b40      	subs	r0, r0, r5
 8002050:	2864      	cmp	r0, #100	; 0x64
 8002052:	d9f5      	bls.n	8002040 <HAL_RCC_OscConfig+0x118>
            return HAL_TIMEOUT;
 8002054:	2003      	movs	r0, #3
 8002056:	e140      	b.n	80022da <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002058:	4b5d      	ldr	r3, [pc, #372]	; (80021d0 <HAL_RCC_OscConfig+0x2a8>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002060:	d1ba      	bne.n	8001fd8 <HAL_RCC_OscConfig+0xb0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002062:	4b5b      	ldr	r3, [pc, #364]	; (80021d0 <HAL_RCC_OscConfig+0x2a8>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f013 0f02 	tst.w	r3, #2
 800206a:	d00a      	beq.n	8002082 <HAL_RCC_OscConfig+0x15a>
 800206c:	68e3      	ldr	r3, [r4, #12]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d007      	beq.n	8002082 <HAL_RCC_OscConfig+0x15a>
        return HAL_ERROR;
 8002072:	2001      	movs	r0, #1
 8002074:	e131      	b.n	80022da <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002076:	4b56      	ldr	r3, [pc, #344]	; (80021d0 <HAL_RCC_OscConfig+0x2a8>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800207e:	d1b1      	bne.n	8001fe4 <HAL_RCC_OscConfig+0xbc>
 8002080:	e7ef      	b.n	8002062 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002082:	4a53      	ldr	r2, [pc, #332]	; (80021d0 <HAL_RCC_OscConfig+0x2a8>)
 8002084:	6813      	ldr	r3, [r2, #0]
 8002086:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800208a:	6921      	ldr	r1, [r4, #16]
 800208c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002090:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002092:	6823      	ldr	r3, [r4, #0]
 8002094:	f013 0f08 	tst.w	r3, #8
 8002098:	d040      	beq.n	800211c <HAL_RCC_OscConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800209a:	6963      	ldr	r3, [r4, #20]
 800209c:	b363      	cbz	r3, 80020f8 <HAL_RCC_OscConfig+0x1d0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800209e:	4b4e      	ldr	r3, [pc, #312]	; (80021d8 <HAL_RCC_OscConfig+0x2b0>)
 80020a0:	2201      	movs	r2, #1
 80020a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a4:	f7fe ff6a 	bl	8000f7c <HAL_GetTick>
 80020a8:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020aa:	4b49      	ldr	r3, [pc, #292]	; (80021d0 <HAL_RCC_OscConfig+0x2a8>)
 80020ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020ae:	f013 0f02 	tst.w	r3, #2
 80020b2:	d133      	bne.n	800211c <HAL_RCC_OscConfig+0x1f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020b4:	f7fe ff62 	bl	8000f7c <HAL_GetTick>
 80020b8:	1b40      	subs	r0, r0, r5
 80020ba:	2802      	cmp	r0, #2
 80020bc:	d9f5      	bls.n	80020aa <HAL_RCC_OscConfig+0x182>
        {
          return HAL_TIMEOUT;
 80020be:	2003      	movs	r0, #3
 80020c0:	e10b      	b.n	80022da <HAL_RCC_OscConfig+0x3b2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c2:	4a43      	ldr	r2, [pc, #268]	; (80021d0 <HAL_RCC_OscConfig+0x2a8>)
 80020c4:	6813      	ldr	r3, [r2, #0]
 80020c6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80020ca:	6921      	ldr	r1, [r4, #16]
 80020cc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80020d0:	6013      	str	r3, [r2, #0]
 80020d2:	e7de      	b.n	8002092 <HAL_RCC_OscConfig+0x16a>
        __HAL_RCC_HSI_DISABLE();
 80020d4:	4b3f      	ldr	r3, [pc, #252]	; (80021d4 <HAL_RCC_OscConfig+0x2ac>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80020da:	f7fe ff4f 	bl	8000f7c <HAL_GetTick>
 80020de:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020e0:	4b3b      	ldr	r3, [pc, #236]	; (80021d0 <HAL_RCC_OscConfig+0x2a8>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f013 0f02 	tst.w	r3, #2
 80020e8:	d0d3      	beq.n	8002092 <HAL_RCC_OscConfig+0x16a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020ea:	f7fe ff47 	bl	8000f7c <HAL_GetTick>
 80020ee:	1b40      	subs	r0, r0, r5
 80020f0:	2802      	cmp	r0, #2
 80020f2:	d9f5      	bls.n	80020e0 <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 80020f4:	2003      	movs	r0, #3
 80020f6:	e0f0      	b.n	80022da <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020f8:	4b37      	ldr	r3, [pc, #220]	; (80021d8 <HAL_RCC_OscConfig+0x2b0>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020fe:	f7fe ff3d 	bl	8000f7c <HAL_GetTick>
 8002102:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002104:	4b32      	ldr	r3, [pc, #200]	; (80021d0 <HAL_RCC_OscConfig+0x2a8>)
 8002106:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002108:	f013 0f02 	tst.w	r3, #2
 800210c:	d006      	beq.n	800211c <HAL_RCC_OscConfig+0x1f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800210e:	f7fe ff35 	bl	8000f7c <HAL_GetTick>
 8002112:	1b40      	subs	r0, r0, r5
 8002114:	2802      	cmp	r0, #2
 8002116:	d9f5      	bls.n	8002104 <HAL_RCC_OscConfig+0x1dc>
        {
          return HAL_TIMEOUT;
 8002118:	2003      	movs	r0, #3
 800211a:	e0de      	b.n	80022da <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800211c:	6823      	ldr	r3, [r4, #0]
 800211e:	f013 0f04 	tst.w	r3, #4
 8002122:	d079      	beq.n	8002218 <HAL_RCC_OscConfig+0x2f0>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002124:	4b2a      	ldr	r3, [pc, #168]	; (80021d0 <HAL_RCC_OscConfig+0x2a8>)
 8002126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002128:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800212c:	d133      	bne.n	8002196 <HAL_RCC_OscConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	9301      	str	r3, [sp, #4]
 8002132:	4b27      	ldr	r3, [pc, #156]	; (80021d0 <HAL_RCC_OscConfig+0x2a8>)
 8002134:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002136:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800213a:	641a      	str	r2, [r3, #64]	; 0x40
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002142:	9301      	str	r3, [sp, #4]
 8002144:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002146:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002148:	4b24      	ldr	r3, [pc, #144]	; (80021dc <HAL_RCC_OscConfig+0x2b4>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002150:	d023      	beq.n	800219a <HAL_RCC_OscConfig+0x272>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002152:	68a3      	ldr	r3, [r4, #8]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d034      	beq.n	80021c2 <HAL_RCC_OscConfig+0x29a>
 8002158:	2b05      	cmp	r3, #5
 800215a:	d041      	beq.n	80021e0 <HAL_RCC_OscConfig+0x2b8>
 800215c:	4b1c      	ldr	r3, [pc, #112]	; (80021d0 <HAL_RCC_OscConfig+0x2a8>)
 800215e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002160:	f022 0201 	bic.w	r2, r2, #1
 8002164:	671a      	str	r2, [r3, #112]	; 0x70
 8002166:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002168:	f022 0204 	bic.w	r2, r2, #4
 800216c:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800216e:	68a3      	ldr	r3, [r4, #8]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d03f      	beq.n	80021f4 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002174:	f7fe ff02 	bl	8000f7c <HAL_GetTick>
 8002178:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800217a:	4b15      	ldr	r3, [pc, #84]	; (80021d0 <HAL_RCC_OscConfig+0x2a8>)
 800217c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800217e:	f013 0f02 	tst.w	r3, #2
 8002182:	d148      	bne.n	8002216 <HAL_RCC_OscConfig+0x2ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002184:	f7fe fefa 	bl	8000f7c <HAL_GetTick>
 8002188:	1b80      	subs	r0, r0, r6
 800218a:	f241 3388 	movw	r3, #5000	; 0x1388
 800218e:	4298      	cmp	r0, r3
 8002190:	d9f3      	bls.n	800217a <HAL_RCC_OscConfig+0x252>
        {
          return HAL_TIMEOUT;
 8002192:	2003      	movs	r0, #3
 8002194:	e0a1      	b.n	80022da <HAL_RCC_OscConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 8002196:	2500      	movs	r5, #0
 8002198:	e7d6      	b.n	8002148 <HAL_RCC_OscConfig+0x220>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800219a:	4a10      	ldr	r2, [pc, #64]	; (80021dc <HAL_RCC_OscConfig+0x2b4>)
 800219c:	6813      	ldr	r3, [r2, #0]
 800219e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80021a4:	f7fe feea 	bl	8000f7c <HAL_GetTick>
 80021a8:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021aa:	4b0c      	ldr	r3, [pc, #48]	; (80021dc <HAL_RCC_OscConfig+0x2b4>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f413 7f80 	tst.w	r3, #256	; 0x100
 80021b2:	d1ce      	bne.n	8002152 <HAL_RCC_OscConfig+0x22a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b4:	f7fe fee2 	bl	8000f7c <HAL_GetTick>
 80021b8:	1b80      	subs	r0, r0, r6
 80021ba:	2802      	cmp	r0, #2
 80021bc:	d9f5      	bls.n	80021aa <HAL_RCC_OscConfig+0x282>
          return HAL_TIMEOUT;
 80021be:	2003      	movs	r0, #3
 80021c0:	e08b      	b.n	80022da <HAL_RCC_OscConfig+0x3b2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021c2:	4a03      	ldr	r2, [pc, #12]	; (80021d0 <HAL_RCC_OscConfig+0x2a8>)
 80021c4:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80021c6:	f043 0301 	orr.w	r3, r3, #1
 80021ca:	6713      	str	r3, [r2, #112]	; 0x70
 80021cc:	e7cf      	b.n	800216e <HAL_RCC_OscConfig+0x246>
 80021ce:	bf00      	nop
 80021d0:	40023800 	.word	0x40023800
 80021d4:	42470000 	.word	0x42470000
 80021d8:	42470e80 	.word	0x42470e80
 80021dc:	40007000 	.word	0x40007000
 80021e0:	4b40      	ldr	r3, [pc, #256]	; (80022e4 <HAL_RCC_OscConfig+0x3bc>)
 80021e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80021e4:	f042 0204 	orr.w	r2, r2, #4
 80021e8:	671a      	str	r2, [r3, #112]	; 0x70
 80021ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80021ec:	f042 0201 	orr.w	r2, r2, #1
 80021f0:	671a      	str	r2, [r3, #112]	; 0x70
 80021f2:	e7bc      	b.n	800216e <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f4:	f7fe fec2 	bl	8000f7c <HAL_GetTick>
 80021f8:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021fa:	4b3a      	ldr	r3, [pc, #232]	; (80022e4 <HAL_RCC_OscConfig+0x3bc>)
 80021fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fe:	f013 0f02 	tst.w	r3, #2
 8002202:	d008      	beq.n	8002216 <HAL_RCC_OscConfig+0x2ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002204:	f7fe feba 	bl	8000f7c <HAL_GetTick>
 8002208:	1b80      	subs	r0, r0, r6
 800220a:	f241 3388 	movw	r3, #5000	; 0x1388
 800220e:	4298      	cmp	r0, r3
 8002210:	d9f3      	bls.n	80021fa <HAL_RCC_OscConfig+0x2d2>
        {
          return HAL_TIMEOUT;
 8002212:	2003      	movs	r0, #3
 8002214:	e061      	b.n	80022da <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002216:	b9e5      	cbnz	r5, 8002252 <HAL_RCC_OscConfig+0x32a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002218:	69a3      	ldr	r3, [r4, #24]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d05c      	beq.n	80022d8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800221e:	4a31      	ldr	r2, [pc, #196]	; (80022e4 <HAL_RCC_OscConfig+0x3bc>)
 8002220:	6892      	ldr	r2, [r2, #8]
 8002222:	f002 020c 	and.w	r2, r2, #12
 8002226:	2a08      	cmp	r2, #8
 8002228:	d059      	beq.n	80022de <HAL_RCC_OscConfig+0x3b6>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800222a:	2b02      	cmp	r3, #2
 800222c:	d017      	beq.n	800225e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800222e:	4b2e      	ldr	r3, [pc, #184]	; (80022e8 <HAL_RCC_OscConfig+0x3c0>)
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002234:	f7fe fea2 	bl	8000f7c <HAL_GetTick>
 8002238:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800223a:	4b2a      	ldr	r3, [pc, #168]	; (80022e4 <HAL_RCC_OscConfig+0x3bc>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002242:	d045      	beq.n	80022d0 <HAL_RCC_OscConfig+0x3a8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002244:	f7fe fe9a 	bl	8000f7c <HAL_GetTick>
 8002248:	1b00      	subs	r0, r0, r4
 800224a:	2802      	cmp	r0, #2
 800224c:	d9f5      	bls.n	800223a <HAL_RCC_OscConfig+0x312>
          {
            return HAL_TIMEOUT;
 800224e:	2003      	movs	r0, #3
 8002250:	e043      	b.n	80022da <HAL_RCC_OscConfig+0x3b2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002252:	4a24      	ldr	r2, [pc, #144]	; (80022e4 <HAL_RCC_OscConfig+0x3bc>)
 8002254:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002256:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800225a:	6413      	str	r3, [r2, #64]	; 0x40
 800225c:	e7dc      	b.n	8002218 <HAL_RCC_OscConfig+0x2f0>
        __HAL_RCC_PLL_DISABLE();
 800225e:	4b22      	ldr	r3, [pc, #136]	; (80022e8 <HAL_RCC_OscConfig+0x3c0>)
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002264:	f7fe fe8a 	bl	8000f7c <HAL_GetTick>
 8002268:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800226a:	4b1e      	ldr	r3, [pc, #120]	; (80022e4 <HAL_RCC_OscConfig+0x3bc>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002272:	d006      	beq.n	8002282 <HAL_RCC_OscConfig+0x35a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002274:	f7fe fe82 	bl	8000f7c <HAL_GetTick>
 8002278:	1b40      	subs	r0, r0, r5
 800227a:	2802      	cmp	r0, #2
 800227c:	d9f5      	bls.n	800226a <HAL_RCC_OscConfig+0x342>
            return HAL_TIMEOUT;
 800227e:	2003      	movs	r0, #3
 8002280:	e02b      	b.n	80022da <HAL_RCC_OscConfig+0x3b2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002282:	69e3      	ldr	r3, [r4, #28]
 8002284:	6a22      	ldr	r2, [r4, #32]
 8002286:	4313      	orrs	r3, r2
 8002288:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800228a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800228e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002290:	0852      	lsrs	r2, r2, #1
 8002292:	3a01      	subs	r2, #1
 8002294:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002298:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800229a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800229e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80022a0:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80022a4:	4a0f      	ldr	r2, [pc, #60]	; (80022e4 <HAL_RCC_OscConfig+0x3bc>)
 80022a6:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80022a8:	4b0f      	ldr	r3, [pc, #60]	; (80022e8 <HAL_RCC_OscConfig+0x3c0>)
 80022aa:	2201      	movs	r2, #1
 80022ac:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80022ae:	f7fe fe65 	bl	8000f7c <HAL_GetTick>
 80022b2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022b4:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <HAL_RCC_OscConfig+0x3bc>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80022bc:	d106      	bne.n	80022cc <HAL_RCC_OscConfig+0x3a4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022be:	f7fe fe5d 	bl	8000f7c <HAL_GetTick>
 80022c2:	1b00      	subs	r0, r0, r4
 80022c4:	2802      	cmp	r0, #2
 80022c6:	d9f5      	bls.n	80022b4 <HAL_RCC_OscConfig+0x38c>
            return HAL_TIMEOUT;
 80022c8:	2003      	movs	r0, #3
 80022ca:	e006      	b.n	80022da <HAL_RCC_OscConfig+0x3b2>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80022cc:	2000      	movs	r0, #0
 80022ce:	e004      	b.n	80022da <HAL_RCC_OscConfig+0x3b2>
 80022d0:	2000      	movs	r0, #0
 80022d2:	e002      	b.n	80022da <HAL_RCC_OscConfig+0x3b2>
        return HAL_ERROR;
 80022d4:	2001      	movs	r0, #1
 80022d6:	e000      	b.n	80022da <HAL_RCC_OscConfig+0x3b2>
  return HAL_OK;
 80022d8:	2000      	movs	r0, #0
}
 80022da:	b002      	add	sp, #8
 80022dc:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80022de:	2001      	movs	r0, #1
 80022e0:	e7fb      	b.n	80022da <HAL_RCC_OscConfig+0x3b2>
 80022e2:	bf00      	nop
 80022e4:	40023800 	.word	0x40023800
 80022e8:	42470060 	.word	0x42470060

080022ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80022ec:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022ee:	6a03      	ldr	r3, [r0, #32]
 80022f0:	f023 0301 	bic.w	r3, r3, #1
 80022f4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022f6:	6a05      	ldr	r5, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022f8:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022fa:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80022fc:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002300:	680b      	ldr	r3, [r1, #0]
 8002302:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002304:	f025 0502 	bic.w	r5, r5, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002308:	688b      	ldr	r3, [r1, #8]
 800230a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800230c:	4d10      	ldr	r5, [pc, #64]	; (8002350 <TIM_OC1_SetConfig+0x64>)
 800230e:	42a8      	cmp	r0, r5
 8002310:	d003      	beq.n	800231a <TIM_OC1_SetConfig+0x2e>
 8002312:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002316:	42a8      	cmp	r0, r5
 8002318:	d105      	bne.n	8002326 <TIM_OC1_SetConfig+0x3a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800231a:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800231e:	68cd      	ldr	r5, [r1, #12]
 8002320:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002322:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002326:	4d0a      	ldr	r5, [pc, #40]	; (8002350 <TIM_OC1_SetConfig+0x64>)
 8002328:	42a8      	cmp	r0, r5
 800232a:	d003      	beq.n	8002334 <TIM_OC1_SetConfig+0x48>
 800232c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002330:	42a8      	cmp	r0, r5
 8002332:	d105      	bne.n	8002340 <TIM_OC1_SetConfig+0x54>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002334:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002338:	694d      	ldr	r5, [r1, #20]
 800233a:	4315      	orrs	r5, r2
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800233c:	698a      	ldr	r2, [r1, #24]
 800233e:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002340:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002342:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002344:	684a      	ldr	r2, [r1, #4]
 8002346:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002348:	6203      	str	r3, [r0, #32]
}
 800234a:	bc30      	pop	{r4, r5}
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	40010000 	.word	0x40010000

08002354 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002354:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002356:	6a03      	ldr	r3, [r0, #32]
 8002358:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800235c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800235e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002360:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002362:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002364:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002368:	680d      	ldr	r5, [r1, #0]
 800236a:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800236c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002370:	688d      	ldr	r5, [r1, #8]
 8002372:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002376:	4d12      	ldr	r5, [pc, #72]	; (80023c0 <TIM_OC3_SetConfig+0x6c>)
 8002378:	42a8      	cmp	r0, r5
 800237a:	d003      	beq.n	8002384 <TIM_OC3_SetConfig+0x30>
 800237c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002380:	42a8      	cmp	r0, r5
 8002382:	d106      	bne.n	8002392 <TIM_OC3_SetConfig+0x3e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002384:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002388:	68cd      	ldr	r5, [r1, #12]
 800238a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800238e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002392:	4d0b      	ldr	r5, [pc, #44]	; (80023c0 <TIM_OC3_SetConfig+0x6c>)
 8002394:	42a8      	cmp	r0, r5
 8002396:	d003      	beq.n	80023a0 <TIM_OC3_SetConfig+0x4c>
 8002398:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800239c:	42a8      	cmp	r0, r5
 800239e:	d107      	bne.n	80023b0 <TIM_OC3_SetConfig+0x5c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80023a0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80023a4:	694d      	ldr	r5, [r1, #20]
 80023a6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80023aa:	698d      	ldr	r5, [r1, #24]
 80023ac:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023b0:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80023b2:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80023b4:	684a      	ldr	r2, [r1, #4]
 80023b6:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023b8:	6203      	str	r3, [r0, #32]
}
 80023ba:	bc30      	pop	{r4, r5}
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	40010000 	.word	0x40010000

080023c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80023c4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80023c6:	6a03      	ldr	r3, [r0, #32]
 80023c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023cc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023ce:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023d0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80023d2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80023d4:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023d8:	680d      	ldr	r5, [r1, #0]
 80023da:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80023de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80023e2:	688d      	ldr	r5, [r1, #8]
 80023e4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023e8:	4d09      	ldr	r5, [pc, #36]	; (8002410 <TIM_OC4_SetConfig+0x4c>)
 80023ea:	42a8      	cmp	r0, r5
 80023ec:	d003      	beq.n	80023f6 <TIM_OC4_SetConfig+0x32>
 80023ee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80023f2:	42a8      	cmp	r0, r5
 80023f4:	d104      	bne.n	8002400 <TIM_OC4_SetConfig+0x3c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80023f6:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80023fa:	694d      	ldr	r5, [r1, #20]
 80023fc:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002400:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002402:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002404:	684a      	ldr	r2, [r1, #4]
 8002406:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002408:	6203      	str	r3, [r0, #32]
}
 800240a:	bc30      	pop	{r4, r5}
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	40010000 	.word	0x40010000

08002414 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8002414:	4770      	bx	lr

08002416 <TIM_DMADelayPulseCplt>:
{
 8002416:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002418:	6b84      	ldr	r4, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_READY;
 800241a:	2301      	movs	r3, #1
 800241c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002420:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002422:	4283      	cmp	r3, r0
 8002424:	d00b      	beq.n	800243e <TIM_DMADelayPulseCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002426:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002428:	4283      	cmp	r3, r0
 800242a:	d010      	beq.n	800244e <TIM_DMADelayPulseCplt+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800242c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800242e:	4283      	cmp	r3, r0
 8002430:	d010      	beq.n	8002454 <TIM_DMADelayPulseCplt+0x3e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002432:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002434:	4283      	cmp	r3, r0
 8002436:	d104      	bne.n	8002442 <TIM_DMADelayPulseCplt+0x2c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002438:	2308      	movs	r3, #8
 800243a:	7723      	strb	r3, [r4, #28]
 800243c:	e001      	b.n	8002442 <TIM_DMADelayPulseCplt+0x2c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800243e:	2301      	movs	r3, #1
 8002440:	7723      	strb	r3, [r4, #28]
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002442:	4620      	mov	r0, r4
 8002444:	f7ff ffe6 	bl	8002414 <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002448:	2300      	movs	r3, #0
 800244a:	7723      	strb	r3, [r4, #28]
}
 800244c:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800244e:	2302      	movs	r3, #2
 8002450:	7723      	strb	r3, [r4, #28]
 8002452:	e7f6      	b.n	8002442 <TIM_DMADelayPulseCplt+0x2c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002454:	2304      	movs	r3, #4
 8002456:	7723      	strb	r3, [r4, #28]
 8002458:	e7f3      	b.n	8002442 <TIM_DMADelayPulseCplt+0x2c>

0800245a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
}
 800245a:	4770      	bx	lr

0800245c <TIM_DMADelayPulseHalfCplt>:
{
 800245c:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800245e:	6b84      	ldr	r4, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_READY;
 8002460:	2301      	movs	r3, #1
 8002462:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002466:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002468:	4283      	cmp	r3, r0
 800246a:	d00b      	beq.n	8002484 <TIM_DMADelayPulseHalfCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800246c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800246e:	4283      	cmp	r3, r0
 8002470:	d010      	beq.n	8002494 <TIM_DMADelayPulseHalfCplt+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002472:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002474:	4283      	cmp	r3, r0
 8002476:	d010      	beq.n	800249a <TIM_DMADelayPulseHalfCplt+0x3e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002478:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800247a:	4283      	cmp	r3, r0
 800247c:	d104      	bne.n	8002488 <TIM_DMADelayPulseHalfCplt+0x2c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800247e:	2308      	movs	r3, #8
 8002480:	7723      	strb	r3, [r4, #28]
 8002482:	e001      	b.n	8002488 <TIM_DMADelayPulseHalfCplt+0x2c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002484:	2301      	movs	r3, #1
 8002486:	7723      	strb	r3, [r4, #28]
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8002488:	4620      	mov	r0, r4
 800248a:	f7ff ffe6 	bl	800245a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800248e:	2300      	movs	r3, #0
 8002490:	7723      	strb	r3, [r4, #28]
}
 8002492:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002494:	2302      	movs	r3, #2
 8002496:	7723      	strb	r3, [r4, #28]
 8002498:	e7f6      	b.n	8002488 <TIM_DMADelayPulseHalfCplt+0x2c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800249a:	2304      	movs	r3, #4
 800249c:	7723      	strb	r3, [r4, #28]
 800249e:	e7f3      	b.n	8002488 <TIM_DMADelayPulseHalfCplt+0x2c>

080024a0 <HAL_TIM_ErrorCallback>:
}
 80024a0:	4770      	bx	lr

080024a2 <TIM_DMAError>:
{
 80024a2:	b508      	push	{r3, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024a4:	6b80      	ldr	r0, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_READY;
 80024a6:	2301      	movs	r3, #1
 80024a8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  HAL_TIM_ErrorCallback(htim);
 80024ac:	f7ff fff8 	bl	80024a0 <HAL_TIM_ErrorCallback>
}
 80024b0:	bd08      	pop	{r3, pc}
	...

080024b4 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80024b4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024b6:	4a30      	ldr	r2, [pc, #192]	; (8002578 <TIM_Base_SetConfig+0xc4>)
 80024b8:	4290      	cmp	r0, r2
 80024ba:	d012      	beq.n	80024e2 <TIM_Base_SetConfig+0x2e>
 80024bc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80024c0:	d00f      	beq.n	80024e2 <TIM_Base_SetConfig+0x2e>
 80024c2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80024c6:	4290      	cmp	r0, r2
 80024c8:	d00b      	beq.n	80024e2 <TIM_Base_SetConfig+0x2e>
 80024ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024ce:	4290      	cmp	r0, r2
 80024d0:	d007      	beq.n	80024e2 <TIM_Base_SetConfig+0x2e>
 80024d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024d6:	4290      	cmp	r0, r2
 80024d8:	d003      	beq.n	80024e2 <TIM_Base_SetConfig+0x2e>
 80024da:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80024de:	4290      	cmp	r0, r2
 80024e0:	d103      	bne.n	80024ea <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80024e6:	684a      	ldr	r2, [r1, #4]
 80024e8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024ea:	4a23      	ldr	r2, [pc, #140]	; (8002578 <TIM_Base_SetConfig+0xc4>)
 80024ec:	4290      	cmp	r0, r2
 80024ee:	d02a      	beq.n	8002546 <TIM_Base_SetConfig+0x92>
 80024f0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80024f4:	d027      	beq.n	8002546 <TIM_Base_SetConfig+0x92>
 80024f6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80024fa:	4290      	cmp	r0, r2
 80024fc:	d023      	beq.n	8002546 <TIM_Base_SetConfig+0x92>
 80024fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002502:	4290      	cmp	r0, r2
 8002504:	d01f      	beq.n	8002546 <TIM_Base_SetConfig+0x92>
 8002506:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800250a:	4290      	cmp	r0, r2
 800250c:	d01b      	beq.n	8002546 <TIM_Base_SetConfig+0x92>
 800250e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002512:	4290      	cmp	r0, r2
 8002514:	d017      	beq.n	8002546 <TIM_Base_SetConfig+0x92>
 8002516:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800251a:	4290      	cmp	r0, r2
 800251c:	d013      	beq.n	8002546 <TIM_Base_SetConfig+0x92>
 800251e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002522:	4290      	cmp	r0, r2
 8002524:	d00f      	beq.n	8002546 <TIM_Base_SetConfig+0x92>
 8002526:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800252a:	4290      	cmp	r0, r2
 800252c:	d00b      	beq.n	8002546 <TIM_Base_SetConfig+0x92>
 800252e:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002532:	4290      	cmp	r0, r2
 8002534:	d007      	beq.n	8002546 <TIM_Base_SetConfig+0x92>
 8002536:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800253a:	4290      	cmp	r0, r2
 800253c:	d003      	beq.n	8002546 <TIM_Base_SetConfig+0x92>
 800253e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002542:	4290      	cmp	r0, r2
 8002544:	d103      	bne.n	800254e <TIM_Base_SetConfig+0x9a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002546:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800254a:	68ca      	ldr	r2, [r1, #12]
 800254c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800254e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002552:	694a      	ldr	r2, [r1, #20]
 8002554:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002556:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002558:	688b      	ldr	r3, [r1, #8]
 800255a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800255c:	680b      	ldr	r3, [r1, #0]
 800255e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002560:	4b05      	ldr	r3, [pc, #20]	; (8002578 <TIM_Base_SetConfig+0xc4>)
 8002562:	4298      	cmp	r0, r3
 8002564:	d003      	beq.n	800256e <TIM_Base_SetConfig+0xba>
 8002566:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800256a:	4298      	cmp	r0, r3
 800256c:	d101      	bne.n	8002572 <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 800256e:	690b      	ldr	r3, [r1, #16]
 8002570:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002572:	2301      	movs	r3, #1
 8002574:	6143      	str	r3, [r0, #20]
}
 8002576:	4770      	bx	lr
 8002578:	40010000 	.word	0x40010000

0800257c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800257c:	b1a8      	cbz	r0, 80025aa <HAL_TIM_PWM_Init+0x2e>
{
 800257e:	b510      	push	{r4, lr}
 8002580:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002582:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002586:	b15b      	cbz	r3, 80025a0 <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8002588:	2302      	movs	r3, #2
 800258a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800258e:	1d21      	adds	r1, r4, #4
 8002590:	6820      	ldr	r0, [r4, #0]
 8002592:	f7ff ff8f 	bl	80024b4 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002596:	2301      	movs	r3, #1
 8002598:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800259c:	2000      	movs	r0, #0
}
 800259e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80025a0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80025a4:	f000 fdb0 	bl	8003108 <HAL_TIM_PWM_MspInit>
 80025a8:	e7ee      	b.n	8002588 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80025aa:	2001      	movs	r0, #1
}
 80025ac:	4770      	bx	lr
	...

080025b0 <TIM_OC2_SetConfig>:
{
 80025b0:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025b2:	6a03      	ldr	r3, [r0, #32]
 80025b4:	f023 0310 	bic.w	r3, r3, #16
 80025b8:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80025ba:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80025bc:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80025be:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80025c0:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025c4:	680d      	ldr	r5, [r1, #0]
 80025c6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80025ca:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80025ce:	688d      	ldr	r5, [r1, #8]
 80025d0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80025d4:	4d11      	ldr	r5, [pc, #68]	; (800261c <TIM_OC2_SetConfig+0x6c>)
 80025d6:	42a8      	cmp	r0, r5
 80025d8:	d003      	beq.n	80025e2 <TIM_OC2_SetConfig+0x32>
 80025da:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80025de:	42a8      	cmp	r0, r5
 80025e0:	d106      	bne.n	80025f0 <TIM_OC2_SetConfig+0x40>
    tmpccer &= ~TIM_CCER_CC2NP;
 80025e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80025e6:	68cd      	ldr	r5, [r1, #12]
 80025e8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80025ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025f0:	4d0a      	ldr	r5, [pc, #40]	; (800261c <TIM_OC2_SetConfig+0x6c>)
 80025f2:	42a8      	cmp	r0, r5
 80025f4:	d003      	beq.n	80025fe <TIM_OC2_SetConfig+0x4e>
 80025f6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80025fa:	42a8      	cmp	r0, r5
 80025fc:	d107      	bne.n	800260e <TIM_OC2_SetConfig+0x5e>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80025fe:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002602:	694d      	ldr	r5, [r1, #20]
 8002604:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002608:	698d      	ldr	r5, [r1, #24]
 800260a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800260e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002610:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002612:	684a      	ldr	r2, [r1, #4]
 8002614:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002616:	6203      	str	r3, [r0, #32]
}
 8002618:	bc30      	pop	{r4, r5}
 800261a:	4770      	bx	lr
 800261c:	40010000 	.word	0x40010000

08002620 <HAL_TIM_PWM_ConfigChannel>:
{
 8002620:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002622:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002626:	2b01      	cmp	r3, #1
 8002628:	d066      	beq.n	80026f8 <HAL_TIM_PWM_ConfigChannel+0xd8>
 800262a:	460d      	mov	r5, r1
 800262c:	4604      	mov	r4, r0
 800262e:	2301      	movs	r3, #1
 8002630:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002634:	2302      	movs	r3, #2
 8002636:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 800263a:	2a0c      	cmp	r2, #12
 800263c:	d81a      	bhi.n	8002674 <HAL_TIM_PWM_ConfigChannel+0x54>
 800263e:	e8df f002 	tbb	[pc, r2]
 8002642:	1907      	.short	0x1907
 8002644:	19201919 	.word	0x19201919
 8002648:	19341919 	.word	0x19341919
 800264c:	1919      	.short	0x1919
 800264e:	47          	.byte	0x47
 800264f:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002650:	6800      	ldr	r0, [r0, #0]
 8002652:	f7ff fe4b 	bl	80022ec <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002656:	6822      	ldr	r2, [r4, #0]
 8002658:	6993      	ldr	r3, [r2, #24]
 800265a:	f043 0308 	orr.w	r3, r3, #8
 800265e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002660:	6822      	ldr	r2, [r4, #0]
 8002662:	6993      	ldr	r3, [r2, #24]
 8002664:	f023 0304 	bic.w	r3, r3, #4
 8002668:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800266a:	6822      	ldr	r2, [r4, #0]
 800266c:	6993      	ldr	r3, [r2, #24]
 800266e:	6929      	ldr	r1, [r5, #16]
 8002670:	430b      	orrs	r3, r1
 8002672:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002674:	2301      	movs	r3, #1
 8002676:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800267a:	2000      	movs	r0, #0
 800267c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002680:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002682:	6800      	ldr	r0, [r0, #0]
 8002684:	f7ff ff94 	bl	80025b0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002688:	6822      	ldr	r2, [r4, #0]
 800268a:	6993      	ldr	r3, [r2, #24]
 800268c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002690:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002692:	6822      	ldr	r2, [r4, #0]
 8002694:	6993      	ldr	r3, [r2, #24]
 8002696:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800269a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800269c:	6822      	ldr	r2, [r4, #0]
 800269e:	6993      	ldr	r3, [r2, #24]
 80026a0:	6929      	ldr	r1, [r5, #16]
 80026a2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80026a6:	6193      	str	r3, [r2, #24]
      break;
 80026a8:	e7e4      	b.n	8002674 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80026aa:	6800      	ldr	r0, [r0, #0]
 80026ac:	f7ff fe52 	bl	8002354 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80026b0:	6822      	ldr	r2, [r4, #0]
 80026b2:	69d3      	ldr	r3, [r2, #28]
 80026b4:	f043 0308 	orr.w	r3, r3, #8
 80026b8:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80026ba:	6822      	ldr	r2, [r4, #0]
 80026bc:	69d3      	ldr	r3, [r2, #28]
 80026be:	f023 0304 	bic.w	r3, r3, #4
 80026c2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80026c4:	6822      	ldr	r2, [r4, #0]
 80026c6:	69d3      	ldr	r3, [r2, #28]
 80026c8:	6929      	ldr	r1, [r5, #16]
 80026ca:	430b      	orrs	r3, r1
 80026cc:	61d3      	str	r3, [r2, #28]
      break;
 80026ce:	e7d1      	b.n	8002674 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80026d0:	6800      	ldr	r0, [r0, #0]
 80026d2:	f7ff fe77 	bl	80023c4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80026d6:	6822      	ldr	r2, [r4, #0]
 80026d8:	69d3      	ldr	r3, [r2, #28]
 80026da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026de:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80026e0:	6822      	ldr	r2, [r4, #0]
 80026e2:	69d3      	ldr	r3, [r2, #28]
 80026e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026e8:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80026ea:	6822      	ldr	r2, [r4, #0]
 80026ec:	69d3      	ldr	r3, [r2, #28]
 80026ee:	6929      	ldr	r1, [r5, #16]
 80026f0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80026f4:	61d3      	str	r3, [r2, #28]
      break;
 80026f6:	e7bd      	b.n	8002674 <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 80026f8:	2002      	movs	r0, #2
 80026fa:	e7c1      	b.n	8002680 <HAL_TIM_PWM_ConfigChannel+0x60>

080026fc <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80026fc:	b410      	push	{r4}
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80026fe:	f001 011f 	and.w	r1, r1, #31
 8002702:	2304      	movs	r3, #4
 8002704:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8002708:	6a03      	ldr	r3, [r0, #32]
 800270a:	ea23 0304 	bic.w	r3, r3, r4
 800270e:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002710:	6a03      	ldr	r3, [r0, #32]
 8002712:	408a      	lsls	r2, r1
 8002714:	4313      	orrs	r3, r2
 8002716:	6203      	str	r3, [r0, #32]
}
 8002718:	f85d 4b04 	ldr.w	r4, [sp], #4
 800271c:	4770      	bx	lr
	...

08002720 <HAL_TIMEx_PWMN_Start_DMA>:
{
 8002720:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_BUSY)
 8002722:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8002726:	b2e4      	uxtb	r4, r4
 8002728:	2c02      	cmp	r4, #2
 800272a:	d06e      	beq.n	800280a <HAL_TIMEx_PWMN_Start_DMA+0xea>
  else if (htim->State == HAL_TIM_STATE_READY)
 800272c:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8002730:	b2e4      	uxtb	r4, r4
 8002732:	2c01      	cmp	r4, #1
 8002734:	d01d      	beq.n	8002772 <HAL_TIMEx_PWMN_Start_DMA+0x52>
 8002736:	4616      	mov	r6, r2
 8002738:	460d      	mov	r5, r1
 800273a:	4604      	mov	r4, r0
  switch (Channel)
 800273c:	2904      	cmp	r1, #4
 800273e:	d038      	beq.n	80027b2 <HAL_TIMEx_PWMN_Start_DMA+0x92>
 8002740:	2908      	cmp	r1, #8
 8002742:	d04c      	beq.n	80027de <HAL_TIMEx_PWMN_Start_DMA+0xbe>
 8002744:	b1f1      	cbz	r1, 8002784 <HAL_TIMEx_PWMN_Start_DMA+0x64>
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8002746:	2204      	movs	r2, #4
 8002748:	4629      	mov	r1, r5
 800274a:	6820      	ldr	r0, [r4, #0]
 800274c:	f7ff ffd6 	bl	80026fc <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 8002750:	6822      	ldr	r2, [r4, #0]
 8002752:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8002754:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002758:	6453      	str	r3, [r2, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800275a:	6822      	ldr	r2, [r4, #0]
 800275c:	6893      	ldr	r3, [r2, #8]
 800275e:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002762:	2b06      	cmp	r3, #6
 8002764:	d059      	beq.n	800281a <HAL_TIMEx_PWMN_Start_DMA+0xfa>
    __HAL_TIM_ENABLE(htim);
 8002766:	6813      	ldr	r3, [r2, #0]
 8002768:	f043 0301 	orr.w	r3, r3, #1
 800276c:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800276e:	2000      	movs	r0, #0
}
 8002770:	bd70      	pop	{r4, r5, r6, pc}
    if (((uint32_t)pData == 0U) && (Length > 0U))
 8002772:	b11a      	cbz	r2, 800277c <HAL_TIMEx_PWMN_Start_DMA+0x5c>
      htim->State = HAL_TIM_STATE_BUSY;
 8002774:	2402      	movs	r4, #2
 8002776:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
 800277a:	e7dc      	b.n	8002736 <HAL_TIMEx_PWMN_Start_DMA+0x16>
    if (((uint32_t)pData == 0U) && (Length > 0U))
 800277c:	2b00      	cmp	r3, #0
 800277e:	d0f9      	beq.n	8002774 <HAL_TIMEx_PWMN_Start_DMA+0x54>
      return HAL_ERROR;
 8002780:	2001      	movs	r0, #1
 8002782:	e7f5      	b.n	8002770 <HAL_TIMEx_PWMN_Start_DMA+0x50>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002784:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002786:	4926      	ldr	r1, [pc, #152]	; (8002820 <HAL_TIMEx_PWMN_Start_DMA+0x100>)
 8002788:	63d1      	str	r1, [r2, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800278a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800278c:	4925      	ldr	r1, [pc, #148]	; (8002824 <HAL_TIMEx_PWMN_Start_DMA+0x104>)
 800278e:	6411      	str	r1, [r2, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002790:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002792:	4925      	ldr	r1, [pc, #148]	; (8002828 <HAL_TIMEx_PWMN_Start_DMA+0x108>)
 8002794:	64d1      	str	r1, [r2, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8002796:	6802      	ldr	r2, [r0, #0]
 8002798:	3234      	adds	r2, #52	; 0x34
 800279a:	4631      	mov	r1, r6
 800279c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800279e:	f7fe ffe3 	bl	8001768 <HAL_DMA_Start_IT>
 80027a2:	2800      	cmp	r0, #0
 80027a4:	d133      	bne.n	800280e <HAL_TIMEx_PWMN_Start_DMA+0xee>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80027a6:	6822      	ldr	r2, [r4, #0]
 80027a8:	68d3      	ldr	r3, [r2, #12]
 80027aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027ae:	60d3      	str	r3, [r2, #12]
      break;
 80027b0:	e7c9      	b.n	8002746 <HAL_TIMEx_PWMN_Start_DMA+0x26>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80027b2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80027b4:	491a      	ldr	r1, [pc, #104]	; (8002820 <HAL_TIMEx_PWMN_Start_DMA+0x100>)
 80027b6:	63d1      	str	r1, [r2, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80027b8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80027ba:	491a      	ldr	r1, [pc, #104]	; (8002824 <HAL_TIMEx_PWMN_Start_DMA+0x104>)
 80027bc:	6411      	str	r1, [r2, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80027be:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80027c0:	4919      	ldr	r1, [pc, #100]	; (8002828 <HAL_TIMEx_PWMN_Start_DMA+0x108>)
 80027c2:	64d1      	str	r1, [r2, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 80027c4:	6802      	ldr	r2, [r0, #0]
 80027c6:	3238      	adds	r2, #56	; 0x38
 80027c8:	4631      	mov	r1, r6
 80027ca:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80027cc:	f7fe ffcc 	bl	8001768 <HAL_DMA_Start_IT>
 80027d0:	b9f8      	cbnz	r0, 8002812 <HAL_TIMEx_PWMN_Start_DMA+0xf2>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80027d2:	6822      	ldr	r2, [r4, #0]
 80027d4:	68d3      	ldr	r3, [r2, #12]
 80027d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027da:	60d3      	str	r3, [r2, #12]
      break;
 80027dc:	e7b3      	b.n	8002746 <HAL_TIMEx_PWMN_Start_DMA+0x26>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80027de:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80027e0:	490f      	ldr	r1, [pc, #60]	; (8002820 <HAL_TIMEx_PWMN_Start_DMA+0x100>)
 80027e2:	63d1      	str	r1, [r2, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80027e4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80027e6:	490f      	ldr	r1, [pc, #60]	; (8002824 <HAL_TIMEx_PWMN_Start_DMA+0x104>)
 80027e8:	6411      	str	r1, [r2, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80027ea:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80027ec:	490e      	ldr	r1, [pc, #56]	; (8002828 <HAL_TIMEx_PWMN_Start_DMA+0x108>)
 80027ee:	64d1      	str	r1, [r2, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 80027f0:	6802      	ldr	r2, [r0, #0]
 80027f2:	323c      	adds	r2, #60	; 0x3c
 80027f4:	4631      	mov	r1, r6
 80027f6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80027f8:	f7fe ffb6 	bl	8001768 <HAL_DMA_Start_IT>
 80027fc:	b958      	cbnz	r0, 8002816 <HAL_TIMEx_PWMN_Start_DMA+0xf6>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80027fe:	6822      	ldr	r2, [r4, #0]
 8002800:	68d3      	ldr	r3, [r2, #12]
 8002802:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002806:	60d3      	str	r3, [r2, #12]
      break;
 8002808:	e79d      	b.n	8002746 <HAL_TIMEx_PWMN_Start_DMA+0x26>
    return HAL_BUSY;
 800280a:	2002      	movs	r0, #2
 800280c:	e7b0      	b.n	8002770 <HAL_TIMEx_PWMN_Start_DMA+0x50>
        return HAL_ERROR;
 800280e:	2001      	movs	r0, #1
 8002810:	e7ae      	b.n	8002770 <HAL_TIMEx_PWMN_Start_DMA+0x50>
        return HAL_ERROR;
 8002812:	2001      	movs	r0, #1
 8002814:	e7ac      	b.n	8002770 <HAL_TIMEx_PWMN_Start_DMA+0x50>
        return HAL_ERROR;
 8002816:	2001      	movs	r0, #1
 8002818:	e7aa      	b.n	8002770 <HAL_TIMEx_PWMN_Start_DMA+0x50>
  return HAL_OK;
 800281a:	2000      	movs	r0, #0
 800281c:	e7a8      	b.n	8002770 <HAL_TIMEx_PWMN_Start_DMA+0x50>
 800281e:	bf00      	nop
 8002820:	08002417 	.word	0x08002417
 8002824:	0800245d 	.word	0x0800245d
 8002828:	080024a3 	.word	0x080024a3

0800282c <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 800282c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002830:	2b01      	cmp	r3, #1
 8002832:	d03b      	beq.n	80028ac <HAL_TIMEx_MasterConfigSynchronization+0x80>
{
 8002834:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8002836:	2301      	movs	r3, #1
 8002838:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800283c:	2302      	movs	r3, #2
 800283e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8002842:	6803      	ldr	r3, [r0, #0]
 8002844:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8002846:	689d      	ldr	r5, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002848:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800284c:	680a      	ldr	r2, [r1, #0]
 800284e:	4322      	orrs	r2, r4
  htim->Instance->CR2 = tmpcr2;
 8002850:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002852:	6803      	ldr	r3, [r0, #0]
 8002854:	4a16      	ldr	r2, [pc, #88]	; (80028b0 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d01a      	beq.n	8002890 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800285a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800285e:	d017      	beq.n	8002890 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8002860:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002864:	4293      	cmp	r3, r2
 8002866:	d013      	beq.n	8002890 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8002868:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800286c:	4293      	cmp	r3, r2
 800286e:	d00f      	beq.n	8002890 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8002870:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002874:	4293      	cmp	r3, r2
 8002876:	d00b      	beq.n	8002890 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8002878:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800287c:	4293      	cmp	r3, r2
 800287e:	d007      	beq.n	8002890 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8002880:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8002884:	4293      	cmp	r3, r2
 8002886:	d003      	beq.n	8002890 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8002888:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800288c:	4293      	cmp	r3, r2
 800288e:	d104      	bne.n	800289a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002890:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002894:	684a      	ldr	r2, [r1, #4]
 8002896:	4315      	orrs	r5, r2
    htim->Instance->SMCR = tmpsmcr;
 8002898:	609d      	str	r5, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 800289a:	2301      	movs	r3, #1
 800289c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80028a0:	2300      	movs	r3, #0
 80028a2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80028a6:	4618      	mov	r0, r3
}
 80028a8:	bc30      	pop	{r4, r5}
 80028aa:	4770      	bx	lr
  __HAL_LOCK(htim);
 80028ac:	2002      	movs	r0, #2
}
 80028ae:	4770      	bx	lr
 80028b0:	40010000 	.word	0x40010000

080028b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 80028b4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d022      	beq.n	8002902 <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 80028bc:	2301      	movs	r3, #1
 80028be:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80028c2:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80028c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028c8:	688a      	ldr	r2, [r1, #8]
 80028ca:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80028cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80028d0:	684a      	ldr	r2, [r1, #4]
 80028d2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80028d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028d8:	680a      	ldr	r2, [r1, #0]
 80028da:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80028dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028e0:	690a      	ldr	r2, [r1, #16]
 80028e2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80028e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80028e8:	694a      	ldr	r2, [r1, #20]
 80028ea:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80028ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028f0:	69ca      	ldr	r2, [r1, #28]
 80028f2:	4313      	orrs	r3, r2
  htim->Instance->BDTR = tmpbdtr;
 80028f4:	6802      	ldr	r2, [r0, #0]
 80028f6:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 80028f8:	2300      	movs	r3, #0
 80028fa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80028fe:	4618      	mov	r0, r3
 8002900:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002902:	2002      	movs	r0, #2
}
 8002904:	4770      	bx	lr
	...

08002908 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002908:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 800290c:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800290e:	6802      	ldr	r2, [r0, #0]
 8002910:	6913      	ldr	r3, [r2, #16]
 8002912:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002916:	68c1      	ldr	r1, [r0, #12]
 8002918:	430b      	orrs	r3, r1
 800291a:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800291c:	6883      	ldr	r3, [r0, #8]
 800291e:	6902      	ldr	r2, [r0, #16]
 8002920:	4313      	orrs	r3, r2
 8002922:	6942      	ldr	r2, [r0, #20]
 8002924:	4313      	orrs	r3, r2
 8002926:	69c2      	ldr	r2, [r0, #28]
 8002928:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 800292a:	6801      	ldr	r1, [r0, #0]
 800292c:	68cb      	ldr	r3, [r1, #12]
 800292e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002932:	f023 030c 	bic.w	r3, r3, #12
 8002936:	4313      	orrs	r3, r2
 8002938:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800293a:	6802      	ldr	r2, [r0, #0]
 800293c:	6953      	ldr	r3, [r2, #20]
 800293e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002942:	6981      	ldr	r1, [r0, #24]
 8002944:	430b      	orrs	r3, r1
 8002946:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002948:	69c3      	ldr	r3, [r0, #28]
 800294a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800294e:	d03b      	beq.n	80029c8 <UART_SetConfig+0xc0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002950:	6803      	ldr	r3, [r0, #0]
 8002952:	4a71      	ldr	r2, [pc, #452]	; (8002b18 <UART_SetConfig+0x210>)
 8002954:	4293      	cmp	r3, r2
 8002956:	f000 80ab 	beq.w	8002ab0 <UART_SetConfig+0x1a8>
 800295a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800295e:	4293      	cmp	r3, r2
 8002960:	f000 80a6 	beq.w	8002ab0 <UART_SetConfig+0x1a8>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002964:	f7ff f9fe 	bl	8001d64 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002968:	f04f 0900 	mov.w	r9, #0
 800296c:	1806      	adds	r6, r0, r0
 800296e:	eb49 0709 	adc.w	r7, r9, r9
 8002972:	eb16 0b00 	adds.w	fp, r6, r0
 8002976:	eb47 0c09 	adc.w	ip, r7, r9
 800297a:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 800297e:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 8002982:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 8002986:	4693      	mov	fp, r2
 8002988:	469c      	mov	ip, r3
 800298a:	6863      	ldr	r3, [r4, #4]
 800298c:	009a      	lsls	r2, r3, #2
 800298e:	0f9b      	lsrs	r3, r3, #30
 8002990:	eb10 000b 	adds.w	r0, r0, fp
 8002994:	eb49 010c 	adc.w	r1, r9, ip
 8002998:	f7fe f926 	bl	8000be8 <__aeabi_uldivmod>
 800299c:	4d5f      	ldr	r5, [pc, #380]	; (8002b1c <UART_SetConfig+0x214>)
 800299e:	fba5 3200 	umull	r3, r2, r5, r0
 80029a2:	0951      	lsrs	r1, r2, #5
 80029a4:	2264      	movs	r2, #100	; 0x64
 80029a6:	fb02 0211 	mls	r2, r2, r1, r0
 80029aa:	0113      	lsls	r3, r2, #4
 80029ac:	3332      	adds	r3, #50	; 0x32
 80029ae:	fba5 2303 	umull	r2, r3, r5, r3
 80029b2:	095b      	lsrs	r3, r3, #5
 80029b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80029b8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80029bc:	f003 030f 	and.w	r3, r3, #15
 80029c0:	6821      	ldr	r1, [r4, #0]
 80029c2:	4413      	add	r3, r2
 80029c4:	608b      	str	r3, [r1, #8]
    }
  }
}
 80029c6:	e0a4      	b.n	8002b12 <UART_SetConfig+0x20a>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029c8:	6803      	ldr	r3, [r0, #0]
 80029ca:	4a53      	ldr	r2, [pc, #332]	; (8002b18 <UART_SetConfig+0x210>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d039      	beq.n	8002a44 <UART_SetConfig+0x13c>
 80029d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d035      	beq.n	8002a44 <UART_SetConfig+0x13c>
      pclk = HAL_RCC_GetPCLK1Freq();
 80029d8:	f7ff f9c4 	bl	8001d64 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80029dc:	4683      	mov	fp, r0
 80029de:	f04f 0c00 	mov.w	ip, #0
 80029e2:	1806      	adds	r6, r0, r0
 80029e4:	eb4c 070c 	adc.w	r7, ip, ip
 80029e8:	eb16 0800 	adds.w	r8, r6, r0
 80029ec:	eb47 090c 	adc.w	r9, r7, ip
 80029f0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029f4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029f8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029fc:	4690      	mov	r8, r2
 80029fe:	4699      	mov	r9, r3
 8002a00:	6862      	ldr	r2, [r4, #4]
 8002a02:	2100      	movs	r1, #0
 8002a04:	1892      	adds	r2, r2, r2
 8002a06:	eb41 0301 	adc.w	r3, r1, r1
 8002a0a:	eb1b 0008 	adds.w	r0, fp, r8
 8002a0e:	eb4c 0109 	adc.w	r1, ip, r9
 8002a12:	f7fe f8e9 	bl	8000be8 <__aeabi_uldivmod>
 8002a16:	4d41      	ldr	r5, [pc, #260]	; (8002b1c <UART_SetConfig+0x214>)
 8002a18:	fba5 3200 	umull	r3, r2, r5, r0
 8002a1c:	0951      	lsrs	r1, r2, #5
 8002a1e:	2264      	movs	r2, #100	; 0x64
 8002a20:	fb02 0211 	mls	r2, r2, r1, r0
 8002a24:	00d3      	lsls	r3, r2, #3
 8002a26:	3332      	adds	r3, #50	; 0x32
 8002a28:	fba5 2303 	umull	r2, r3, r5, r3
 8002a2c:	095b      	lsrs	r3, r3, #5
 8002a2e:	005a      	lsls	r2, r3, #1
 8002a30:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8002a34:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	6821      	ldr	r1, [r4, #0]
 8002a3e:	4413      	add	r3, r2
 8002a40:	608b      	str	r3, [r1, #8]
 8002a42:	e066      	b.n	8002b12 <UART_SetConfig+0x20a>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a44:	f7ff f99e 	bl	8001d84 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a48:	4680      	mov	r8, r0
 8002a4a:	f04f 0900 	mov.w	r9, #0
 8002a4e:	1806      	adds	r6, r0, r0
 8002a50:	eb49 0709 	adc.w	r7, r9, r9
 8002a54:	eb16 0b00 	adds.w	fp, r6, r0
 8002a58:	eb47 0c09 	adc.w	ip, r7, r9
 8002a5c:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8002a60:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 8002a64:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 8002a68:	4693      	mov	fp, r2
 8002a6a:	469c      	mov	ip, r3
 8002a6c:	6862      	ldr	r2, [r4, #4]
 8002a6e:	2100      	movs	r1, #0
 8002a70:	1892      	adds	r2, r2, r2
 8002a72:	eb41 0301 	adc.w	r3, r1, r1
 8002a76:	eb18 000b 	adds.w	r0, r8, fp
 8002a7a:	eb49 010c 	adc.w	r1, r9, ip
 8002a7e:	f7fe f8b3 	bl	8000be8 <__aeabi_uldivmod>
 8002a82:	4d26      	ldr	r5, [pc, #152]	; (8002b1c <UART_SetConfig+0x214>)
 8002a84:	fba5 3200 	umull	r3, r2, r5, r0
 8002a88:	0951      	lsrs	r1, r2, #5
 8002a8a:	2264      	movs	r2, #100	; 0x64
 8002a8c:	fb02 0211 	mls	r2, r2, r1, r0
 8002a90:	00d3      	lsls	r3, r2, #3
 8002a92:	3332      	adds	r3, #50	; 0x32
 8002a94:	fba5 2303 	umull	r2, r3, r5, r3
 8002a98:	095b      	lsrs	r3, r3, #5
 8002a9a:	005a      	lsls	r2, r3, #1
 8002a9c:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8002aa0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	6821      	ldr	r1, [r4, #0]
 8002aaa:	4413      	add	r3, r2
 8002aac:	608b      	str	r3, [r1, #8]
 8002aae:	e030      	b.n	8002b12 <UART_SetConfig+0x20a>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ab0:	f7ff f968 	bl	8001d84 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ab4:	f04f 0900 	mov.w	r9, #0
 8002ab8:	1806      	adds	r6, r0, r0
 8002aba:	eb49 0709 	adc.w	r7, r9, r9
 8002abe:	eb16 0b00 	adds.w	fp, r6, r0
 8002ac2:	eb47 0c09 	adc.w	ip, r7, r9
 8002ac6:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8002aca:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 8002ace:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 8002ad2:	4693      	mov	fp, r2
 8002ad4:	469c      	mov	ip, r3
 8002ad6:	6863      	ldr	r3, [r4, #4]
 8002ad8:	009a      	lsls	r2, r3, #2
 8002ada:	0f9b      	lsrs	r3, r3, #30
 8002adc:	eb10 000b 	adds.w	r0, r0, fp
 8002ae0:	eb49 010c 	adc.w	r1, r9, ip
 8002ae4:	f7fe f880 	bl	8000be8 <__aeabi_uldivmod>
 8002ae8:	4d0c      	ldr	r5, [pc, #48]	; (8002b1c <UART_SetConfig+0x214>)
 8002aea:	fba5 3200 	umull	r3, r2, r5, r0
 8002aee:	0951      	lsrs	r1, r2, #5
 8002af0:	2264      	movs	r2, #100	; 0x64
 8002af2:	fb02 0211 	mls	r2, r2, r1, r0
 8002af6:	0113      	lsls	r3, r2, #4
 8002af8:	3332      	adds	r3, #50	; 0x32
 8002afa:	fba5 2303 	umull	r2, r3, r5, r3
 8002afe:	095b      	lsrs	r3, r3, #5
 8002b00:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b04:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002b08:	f003 030f 	and.w	r3, r3, #15
 8002b0c:	6821      	ldr	r1, [r4, #0]
 8002b0e:	4413      	add	r3, r2
 8002b10:	608b      	str	r3, [r1, #8]
}
 8002b12:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 8002b16:	bf00      	nop
 8002b18:	40011000 	.word	0x40011000
 8002b1c:	51eb851f 	.word	0x51eb851f

08002b20 <HAL_UART_Init>:
  if (huart == NULL)
 8002b20:	b358      	cbz	r0, 8002b7a <HAL_UART_Init+0x5a>
{
 8002b22:	b510      	push	{r4, lr}
 8002b24:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002b26:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002b2a:	b30b      	cbz	r3, 8002b70 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8002b2c:	2324      	movs	r3, #36	; 0x24
 8002b2e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002b32:	6822      	ldr	r2, [r4, #0]
 8002b34:	68d3      	ldr	r3, [r2, #12]
 8002b36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b3a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002b3c:	4620      	mov	r0, r4
 8002b3e:	f7ff fee3 	bl	8002908 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b42:	6822      	ldr	r2, [r4, #0]
 8002b44:	6913      	ldr	r3, [r2, #16]
 8002b46:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002b4a:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b4c:	6822      	ldr	r2, [r4, #0]
 8002b4e:	6953      	ldr	r3, [r2, #20]
 8002b50:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002b54:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002b56:	6822      	ldr	r2, [r4, #0]
 8002b58:	68d3      	ldr	r3, [r2, #12]
 8002b5a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b5e:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b60:	2000      	movs	r0, #0
 8002b62:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002b64:	2320      	movs	r3, #32
 8002b66:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002b6a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8002b6e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002b70:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002b74:	f000 fbb4 	bl	80032e0 <HAL_UART_MspInit>
 8002b78:	e7d8      	b.n	8002b2c <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8002b7a:	2001      	movs	r0, #1
}
 8002b7c:	4770      	bx	lr
	...

08002b80 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002b80:	b500      	push	{lr}
 8002b82:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8002b84:	2300      	movs	r3, #0
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	9301      	str	r3, [sp, #4]
 8002b8a:	9302      	str	r3, [sp, #8]
 8002b8c:	9303      	str	r3, [sp, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002b8e:	4816      	ldr	r0, [pc, #88]	; (8002be8 <MX_ADC1_Init+0x68>)
 8002b90:	4a16      	ldr	r2, [pc, #88]	; (8002bec <MX_ADC1_Init+0x6c>)
 8002b92:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002b94:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b98:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8002b9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b9e:	6082      	str	r2, [r0, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	6102      	str	r2, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002ba4:	7603      	strb	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002ba6:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002baa:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002bac:	4910      	ldr	r1, [pc, #64]	; (8002bf0 <MX_ADC1_Init+0x70>)
 8002bae:	6281      	str	r1, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002bb0:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002bb2:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002bb4:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002bb8:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002bba:	f7fe fa93 	bl	80010e4 <HAL_ADC_Init>
 8002bbe:	b960      	cbnz	r0, 8002bda <MX_ADC1_Init+0x5a>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	9201      	str	r2, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002bc8:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bca:	4669      	mov	r1, sp
 8002bcc:	4806      	ldr	r0, [pc, #24]	; (8002be8 <MX_ADC1_Init+0x68>)
 8002bce:	f7fe fbad 	bl	800132c <HAL_ADC_ConfigChannel>
 8002bd2:	b928      	cbnz	r0, 8002be0 <MX_ADC1_Init+0x60>
  {
    Error_Handler();
  }

}
 8002bd4:	b005      	add	sp, #20
 8002bd6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002bda:	f000 fa19 	bl	8003010 <Error_Handler>
 8002bde:	e7ef      	b.n	8002bc0 <MX_ADC1_Init+0x40>
    Error_Handler();
 8002be0:	f000 fa16 	bl	8003010 <Error_Handler>
}
 8002be4:	e7f6      	b.n	8002bd4 <MX_ADC1_Init+0x54>
 8002be6:	bf00      	nop
 8002be8:	20000a4c 	.word	0x20000a4c
 8002bec:	40012000 	.word	0x40012000
 8002bf0:	0f000001 	.word	0x0f000001

08002bf4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002bf4:	b500      	push	{lr}
 8002bf6:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	9303      	str	r3, [sp, #12]
 8002bfc:	9304      	str	r3, [sp, #16]
 8002bfe:	9305      	str	r3, [sp, #20]
 8002c00:	9306      	str	r3, [sp, #24]
 8002c02:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC1)
 8002c04:	6802      	ldr	r2, [r0, #0]
 8002c06:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002c0a:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d002      	beq.n	8002c18 <HAL_ADC_MspInit+0x24>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002c12:	b009      	add	sp, #36	; 0x24
 8002c14:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c18:	2100      	movs	r1, #0
 8002c1a:	9101      	str	r1, [sp, #4]
 8002c1c:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8002c20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c26:	645a      	str	r2, [r3, #68]	; 0x44
 8002c28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c2a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8002c2e:	9201      	str	r2, [sp, #4]
 8002c30:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c32:	9102      	str	r1, [sp, #8]
 8002c34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c36:	f042 0201 	orr.w	r2, r2, #1
 8002c3a:	631a      	str	r2, [r3, #48]	; 0x30
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	9302      	str	r3, [sp, #8]
 8002c44:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = Sollwert_Pin;
 8002c46:	2301      	movs	r3, #1
 8002c48:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(Sollwert_GPIO_Port, &GPIO_InitStruct);
 8002c4e:	a903      	add	r1, sp, #12
 8002c50:	4801      	ldr	r0, [pc, #4]	; (8002c58 <HAL_ADC_MspInit+0x64>)
 8002c52:	f7fe fead 	bl	80019b0 <HAL_GPIO_Init>
}
 8002c56:	e7dc      	b.n	8002c12 <HAL_ADC_MspInit+0x1e>
 8002c58:	40020000 	.word	0x40020000

08002c5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002c5c:	b500      	push	{lr}
 8002c5e:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002c60:	2100      	movs	r1, #0
 8002c62:	9101      	str	r1, [sp, #4]
 8002c64:	4b09      	ldr	r3, [pc, #36]	; (8002c8c <MX_DMA_Init+0x30>)
 8002c66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c68:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002c6c:	631a      	str	r2, [r3, #48]	; 0x30
 8002c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c74:	9301      	str	r3, [sp, #4]
 8002c76:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8002c78:	460a      	mov	r2, r1
 8002c7a:	2045      	movs	r0, #69	; 0x45
 8002c7c:	f7fe fc3a 	bl	80014f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002c80:	2045      	movs	r0, #69	; 0x45
 8002c82:	f7fe fc6b 	bl	800155c <HAL_NVIC_EnableIRQ>

}
 8002c86:	b003      	add	sp, #12
 8002c88:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c8c:	40023800 	.word	0x40023800

08002c90 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002c90:	b530      	push	{r4, r5, lr}
 8002c92:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c94:	2400      	movs	r4, #0
 8002c96:	9405      	str	r4, [sp, #20]
 8002c98:	9406      	str	r4, [sp, #24]
 8002c9a:	9407      	str	r4, [sp, #28]
 8002c9c:	9408      	str	r4, [sp, #32]
 8002c9e:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ca0:	9401      	str	r4, [sp, #4]
 8002ca2:	4b26      	ldr	r3, [pc, #152]	; (8002d3c <MX_GPIO_Init+0xac>)
 8002ca4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ca6:	f042 0204 	orr.w	r2, r2, #4
 8002caa:	631a      	str	r2, [r3, #48]	; 0x30
 8002cac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cae:	f002 0204 	and.w	r2, r2, #4
 8002cb2:	9201      	str	r2, [sp, #4]
 8002cb4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002cb6:	9402      	str	r4, [sp, #8]
 8002cb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002cbe:	631a      	str	r2, [r3, #48]	; 0x30
 8002cc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cc2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002cc6:	9202      	str	r2, [sp, #8]
 8002cc8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cca:	9403      	str	r4, [sp, #12]
 8002ccc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cce:	f042 0201 	orr.w	r2, r2, #1
 8002cd2:	631a      	str	r2, [r3, #48]	; 0x30
 8002cd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cd6:	f002 0201 	and.w	r2, r2, #1
 8002cda:	9203      	str	r2, [sp, #12]
 8002cdc:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cde:	9404      	str	r4, [sp, #16]
 8002ce0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ce2:	f042 0202 	orr.w	r2, r2, #2
 8002ce6:	631a      	str	r2, [r3, #48]	; 0x30
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	9304      	str	r3, [sp, #16]
 8002cf0:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002cf2:	4d13      	ldr	r5, [pc, #76]	; (8002d40 <MX_GPIO_Init+0xb0>)
 8002cf4:	4622      	mov	r2, r4
 8002cf6:	2120      	movs	r1, #32
 8002cf8:	4628      	mov	r0, r5
 8002cfa:	f7fe ff37 	bl	8001b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002cfe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d02:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002d04:	4b0f      	ldr	r3, [pc, #60]	; (8002d44 <MX_GPIO_Init+0xb4>)
 8002d06:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d08:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002d0a:	a905      	add	r1, sp, #20
 8002d0c:	480e      	ldr	r0, [pc, #56]	; (8002d48 <MX_GPIO_Init+0xb8>)
 8002d0e:	f7fe fe4f 	bl	80019b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EIN_AUS_Pin;
 8002d12:	2302      	movs	r3, #2
 8002d14:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d16:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d18:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(EIN_AUS_GPIO_Port, &GPIO_InitStruct);
 8002d1a:	a905      	add	r1, sp, #20
 8002d1c:	4628      	mov	r0, r5
 8002d1e:	f7fe fe47 	bl	80019b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002d22:	2320      	movs	r3, #32
 8002d24:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d26:	2301      	movs	r3, #1
 8002d28:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d2c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002d2e:	a905      	add	r1, sp, #20
 8002d30:	4628      	mov	r0, r5
 8002d32:	f7fe fe3d 	bl	80019b0 <HAL_GPIO_Init>

}
 8002d36:	b00b      	add	sp, #44	; 0x2c
 8002d38:	bd30      	pop	{r4, r5, pc}
 8002d3a:	bf00      	nop
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	40020000 	.word	0x40020000
 8002d44:	10210000 	.word	0x10210000
 8002d48:	40020800 	.word	0x40020800

08002d4c <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len){
	int i=0; for(i=0 ; i<len; i++) ITM_SendChar((*ptr++)); return len;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	da23      	bge.n	8002d9a <_write+0x4e>
int _write(int file, char *ptr, int len){
 8002d52:	b410      	push	{r4}
 8002d54:	e00c      	b.n	8002d70 <_write+0x24>
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0U].u32 == 0UL)
    {
      __NOP();
 8002d56:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002d58:	f04f 4160 	mov.w	r1, #3758096384	; 0xe0000000
 8002d5c:	6809      	ldr	r1, [r1, #0]
 8002d5e:	2900      	cmp	r1, #0
 8002d60:	d0f9      	beq.n	8002d56 <_write+0xa>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002d62:	f04f 4160 	mov.w	r1, #3758096384	; 0xe0000000
 8002d66:	7008      	strb	r0, [r1, #0]
	int i=0; for(i=0 ; i<len; i++) ITM_SendChar((*ptr++)); return len;
 8002d68:	3301      	adds	r3, #1
 8002d6a:	4621      	mov	r1, r4
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	da10      	bge.n	8002d92 <_write+0x46>
 8002d70:	1c4c      	adds	r4, r1, #1
 8002d72:	7808      	ldrb	r0, [r1, #0]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002d74:	f04f 4160 	mov.w	r1, #3758096384	; 0xe0000000
 8002d78:	f8d1 1e80 	ldr.w	r1, [r1, #3712]	; 0xe80
 8002d7c:	f011 0f01 	tst.w	r1, #1
 8002d80:	d0f2      	beq.n	8002d68 <_write+0x1c>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002d82:	f04f 4160 	mov.w	r1, #3758096384	; 0xe0000000
 8002d86:	f8d1 1e00 	ldr.w	r1, [r1, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002d8a:	f011 0f01 	tst.w	r1, #1
 8002d8e:	d0eb      	beq.n	8002d68 <_write+0x1c>
 8002d90:	e7e2      	b.n	8002d58 <_write+0xc>
}
 8002d92:	4610      	mov	r0, r2
 8002d94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	4610      	mov	r0, r2
 8002d9c:	4770      	bx	lr
	...

08002da0 <tiefpass>:
float tiefpass (float Uk, float Ykminus1){
	float  T = 1 ;																// T = Zeitkonstante
	float  Ta = 0.1 ;          	                 							// Ta= Abtastzeit
	float  b = Ta / ( T + Ta );                               					// b wird errechnet
	float a = 1 - b ;															// a wird errechnet
	YK = b * Uk + a * Ykminus1;													// berechnung des neuen Yk wertes
 8002da0:	eddf 7a06 	vldr	s15, [pc, #24]	; 8002dbc <tiefpass+0x1c>
 8002da4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002da8:	eddf 7a05 	vldr	s15, [pc, #20]	; 8002dc0 <tiefpass+0x20>
 8002dac:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8002db0:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002db4:	4b03      	ldr	r3, [pc, #12]	; (8002dc4 <tiefpass+0x24>)
 8002db6:	ed83 0a00 	vstr	s0, [r3]
	return YK;
}
 8002dba:	4770      	bx	lr
 8002dbc:	3dba2e8c 	.word	0x3dba2e8c
 8002dc0:	3f68ba2e 	.word	0x3f68ba2e
 8002dc4:	200009d8 	.word	0x200009d8

08002dc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002dc8:	b530      	push	{r4, r5, lr}
 8002dca:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002dcc:	2234      	movs	r2, #52	; 0x34
 8002dce:	2100      	movs	r1, #0
 8002dd0:	a807      	add	r0, sp, #28
 8002dd2:	f000 fb11 	bl	80033f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002dd6:	2400      	movs	r4, #0
 8002dd8:	9402      	str	r4, [sp, #8]
 8002dda:	9403      	str	r4, [sp, #12]
 8002ddc:	9404      	str	r4, [sp, #16]
 8002dde:	9405      	str	r4, [sp, #20]
 8002de0:	9406      	str	r4, [sp, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002de2:	9400      	str	r4, [sp, #0]
 8002de4:	4b1c      	ldr	r3, [pc, #112]	; (8002e58 <SystemClock_Config+0x90>)
 8002de6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002de8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002dec:	641a      	str	r2, [r3, #64]	; 0x40
 8002dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df4:	9300      	str	r3, [sp, #0]
 8002df6:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002df8:	9401      	str	r4, [sp, #4]
 8002dfa:	4b18      	ldr	r3, [pc, #96]	; (8002e5c <SystemClock_Config+0x94>)
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002e0a:	9301      	str	r3, [sp, #4]
 8002e0c:	9b01      	ldr	r3, [sp, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002e0e:	2502      	movs	r5, #2
 8002e10:	9507      	str	r5, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e12:	2301      	movs	r3, #1
 8002e14:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002e16:	2310      	movs	r3, #16
 8002e18:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e1a:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002e1c:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002e1e:	2308      	movs	r3, #8
 8002e20:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002e22:	23b4      	movs	r3, #180	; 0xb4
 8002e24:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002e26:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002e28:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002e2a:	9513      	str	r5, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e2c:	a807      	add	r0, sp, #28
 8002e2e:	f7ff f87b 	bl	8001f28 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002e32:	f7fe fea1 	bl	8001b78 <HAL_PWREx_EnableOverDrive>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e36:	230f      	movs	r3, #15
 8002e38:	9302      	str	r3, [sp, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e3a:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e3c:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002e3e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002e42:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002e44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e48:	9306      	str	r3, [sp, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002e4a:	2105      	movs	r1, #5
 8002e4c:	a802      	add	r0, sp, #8
 8002e4e:	f7fe fed3 	bl	8001bf8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8002e52:	b015      	add	sp, #84	; 0x54
 8002e54:	bd30      	pop	{r4, r5, pc}
 8002e56:	bf00      	nop
 8002e58:	40023800 	.word	0x40023800
 8002e5c:	40007000 	.word	0x40007000

08002e60 <main>:
{
 8002e60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002e64:	b087      	sub	sp, #28
  HAL_Init();
 8002e66:	f7fe f863 	bl	8000f30 <HAL_Init>
  SystemClock_Config();
 8002e6a:	f7ff ffad 	bl	8002dc8 <SystemClock_Config>
  MX_GPIO_Init();
 8002e6e:	f7ff ff0f 	bl	8002c90 <MX_GPIO_Init>
  MX_DMA_Init();
 8002e72:	f7ff fef3 	bl	8002c5c <MX_DMA_Init>
  MX_ADC1_Init();
 8002e76:	f7ff fe83 	bl	8002b80 <MX_ADC1_Init>
  MX_TIM1_Init();
 8002e7a:	f000 f9b1 	bl	80031e0 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8002e7e:	f000 fa15 	bl	80032ac <MX_USART2_UART_Init>
 8002e82:	e060      	b.n	8002f46 <main+0xe6>
	 	  		  Puls=sin(((Omega* time+Winkel+M_PI/2.0)/180.0)*M_PI)*3529.4118;
 8002e84:	4c5a      	ldr	r4, [pc, #360]	; (8002ff0 <main+0x190>)
 8002e86:	e9d4 8906 	ldrd	r8, r9, [r4, #24]
 8002e8a:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8002e8e:	4640      	mov	r0, r8
 8002e90:	4649      	mov	r1, r9
 8002e92:	f7fd fbd1 	bl	8000638 <__aeabi_dmul>
 8002e96:	e9d4 670a 	ldrd	r6, r7, [r4, #40]	; 0x28
 8002e9a:	4632      	mov	r2, r6
 8002e9c:	463b      	mov	r3, r7
 8002e9e:	f7fd fa15 	bl	80002cc <__adddf3>
 8002ea2:	a347      	add	r3, pc, #284	; (adr r3, 8002fc0 <main+0x160>)
 8002ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea8:	f7fd fa10 	bl	80002cc <__adddf3>
 8002eac:	2200      	movs	r2, #0
 8002eae:	4b51      	ldr	r3, [pc, #324]	; (8002ff4 <main+0x194>)
 8002eb0:	f7fd fcec 	bl	800088c <__aeabi_ddiv>
 8002eb4:	a344      	add	r3, pc, #272	; (adr r3, 8002fc8 <main+0x168>)
 8002eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eba:	f7fd fbbd 	bl	8000638 <__aeabi_dmul>
 8002ebe:	ec41 0b10 	vmov	d0, r0, r1
 8002ec2:	f004 fa1d 	bl	8007300 <sin>
 8002ec6:	a342      	add	r3, pc, #264	; (adr r3, 8002fd0 <main+0x170>)
 8002ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ecc:	ec51 0b10 	vmov	r0, r1, d0
 8002ed0:	f7fd fbb2 	bl	8000638 <__aeabi_dmul>
 8002ed4:	4b48      	ldr	r3, [pc, #288]	; (8002ff8 <main+0x198>)
 8002ed6:	e9c3 0100 	strd	r0, r1, [r3]
	 	  		  Puls_INT =(int) Puls;
 8002eda:	f7fd fe5d 	bl	8000b98 <__aeabi_d2iz>
 8002ede:	b282      	uxth	r2, r0
 8002ee0:	8622      	strh	r2, [r4, #48]	; 0x30
	 	  		  Array [Wert]= Puls_INT;
 8002ee2:	4b46      	ldr	r3, [pc, #280]	; (8002ffc <main+0x19c>)
 8002ee4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
	 	  		  printf("Array %3i   =      %5d \t        Winkel= %4.4f  \t   Omega=  %4.4f  \t  Puls_INT= %5d  \t \n ", Wert, Array[Wert], Winkel, Omega, Puls_INT);
 8002ee8:	9204      	str	r2, [sp, #16]
 8002eea:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002eee:	e9cd 6700 	strd	r6, r7, [sp]
 8002ef2:	4629      	mov	r1, r5
 8002ef4:	4842      	ldr	r0, [pc, #264]	; (8003000 <main+0x1a0>)
 8002ef6:	f000 fa87 	bl	8003408 <printf>
	 	  		  Winkel+=0.3529;
 8002efa:	a337      	add	r3, pc, #220	; (adr r3, 8002fd8 <main+0x178>)
 8002efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f00:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
 8002f04:	f7fd f9e2 	bl	80002cc <__adddf3>
 8002f08:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
	 	  		  time+=0.0000784314;
 8002f0c:	a334      	add	r3, pc, #208	; (adr r3, 8002fe0 <main+0x180>)
 8002f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f12:	e9d4 0108 	ldrd	r0, r1, [r4, #32]
 8002f16:	f7fd f9d9 	bl	80002cc <__adddf3>
 8002f1a:	e9c4 0108 	strd	r0, r1, [r4, #32]
	 	  		  HAL_Delay(50);
 8002f1e:	2032      	movs	r0, #50	; 0x32
 8002f20:	f7fe f832 	bl	8000f88 <HAL_Delay>
	  for (int Wert = 0; Wert <= 255; Wert ++){
 8002f24:	3501      	adds	r5, #1
 8002f26:	2dff      	cmp	r5, #255	; 0xff
 8002f28:	ddac      	ble.n	8002e84 <main+0x24>
	 	  Winkel= 0.0;
 8002f2a:	4b31      	ldr	r3, [pc, #196]	; (8002ff0 <main+0x190>)
 8002f2c:	2000      	movs	r0, #0
 8002f2e:	2100      	movs	r1, #0
 8002f30:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
	 	  time=0.0;
 8002f34:	e9c3 0108 	strd	r0, r1, [r3, #32]
HAL_TIMEx_PWMN_Start_DMA(&htim1,TIM_CHANNEL_1 , Array, 256);
 8002f38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f3c:	4a2f      	ldr	r2, [pc, #188]	; (8002ffc <main+0x19c>)
 8002f3e:	2100      	movs	r1, #0
 8002f40:	4830      	ldr	r0, [pc, #192]	; (8003004 <main+0x1a4>)
 8002f42:	f7ff fbed 	bl	8002720 <HAL_TIMEx_PWMN_Start_DMA>
	  HAL_ADC_Start(&hadc1);
 8002f46:	4c30      	ldr	r4, [pc, #192]	; (8003008 <main+0x1a8>)
 8002f48:	4620      	mov	r0, r4
 8002f4a:	f7fe f8f7 	bl	800113c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1,100);
 8002f4e:	2164      	movs	r1, #100	; 0x64
 8002f50:	4620      	mov	r0, r4
 8002f52:	f7fe f98d 	bl	8001270 <HAL_ADC_PollForConversion>
	  Sollwert = HAL_ADC_GetValue(&hadc1);
 8002f56:	4620      	mov	r0, r4
 8002f58:	f7fe f9e5 	bl	8001326 <HAL_ADC_GetValue>
 8002f5c:	4c24      	ldr	r4, [pc, #144]	; (8002ff0 <main+0x190>)
 8002f5e:	6060      	str	r0, [r4, #4]
	  i= tiefpass(Sollwert, YKminus1);
 8002f60:	edd4 0a02 	vldr	s1, [r4, #8]
 8002f64:	ee07 0a90 	vmov	s15, r0
 8002f68:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 8002f6c:	f7ff ff18 	bl	8002da0 <tiefpass>
 8002f70:	ed84 0a03 	vstr	s0, [r4, #12]
	  YKminus1=i;
 8002f74:	ed84 0a02 	vstr	s0, [r4, #8]
	  Sollwert_Double =i/10+25;
 8002f78:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8002f7c:	ee80 7a27 	vdiv.f32	s14, s0, s15
 8002f80:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 8002f84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f88:	ee17 0a90 	vmov	r0, s15
 8002f8c:	f7fd fafc 	bl	8000588 <__aeabi_f2d>
 8002f90:	4602      	mov	r2, r0
 8002f92:	460b      	mov	r3, r1
 8002f94:	e9c4 2304 	strd	r2, r3, [r4, #16]
	  printf ("Sollwert: %2.2f  Hz    AD-Eingang: %3i   \n", Sollwert_Double, Sollwert);
 8002f98:	6861      	ldr	r1, [r4, #4]
 8002f9a:	9100      	str	r1, [sp, #0]
 8002f9c:	481b      	ldr	r0, [pc, #108]	; (800300c <main+0x1ac>)
 8002f9e:	f000 fa33 	bl	8003408 <printf>
	  HAL_Delay(100);
 8002fa2:	2064      	movs	r0, #100	; 0x64
 8002fa4:	f7fd fff0 	bl	8000f88 <HAL_Delay>
	  Omega= 2.0*M_PI*Sollwert_Double;
 8002fa8:	a30f      	add	r3, pc, #60	; (adr r3, 8002fe8 <main+0x188>)
 8002faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fae:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8002fb2:	f7fd fb41 	bl	8000638 <__aeabi_dmul>
 8002fb6:	e9c4 0106 	strd	r0, r1, [r4, #24]
	  for (int Wert = 0; Wert <= 255; Wert ++){
 8002fba:	2500      	movs	r5, #0
 8002fbc:	e7b3      	b.n	8002f26 <main+0xc6>
 8002fbe:	bf00      	nop
 8002fc0:	54442d18 	.word	0x54442d18
 8002fc4:	3ff921fb 	.word	0x3ff921fb
 8002fc8:	54442d18 	.word	0x54442d18
 8002fcc:	400921fb 	.word	0x400921fb
 8002fd0:	d77318fc 	.word	0xd77318fc
 8002fd4:	40ab92d2 	.word	0x40ab92d2
 8002fd8:	e1b089a0 	.word	0xe1b089a0
 8002fdc:	3fd695e9 	.word	0x3fd695e9
 8002fe0:	3121895d 	.word	0x3121895d
 8002fe4:	3f148f71 	.word	0x3f148f71
 8002fe8:	54442d18 	.word	0x54442d18
 8002fec:	401921fb 	.word	0x401921fb
 8002ff0:	200009d8 	.word	0x200009d8
 8002ff4:	40668000 	.word	0x40668000
 8002ff8:	20000a98 	.word	0x20000a98
 8002ffc:	20000aa0 	.word	0x20000aa0
 8003000:	0800838c 	.word	0x0800838c
 8003004:	20000f00 	.word	0x20000f00
 8003008:	20000a4c 	.word	0x20000a4c
 800300c:	08008360 	.word	0x08008360

08003010 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003010:	4770      	bx	lr
	...

08003014 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003014:	b500      	push	{lr}
 8003016:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003018:	2100      	movs	r1, #0
 800301a:	9100      	str	r1, [sp, #0]
 800301c:	4b0c      	ldr	r3, [pc, #48]	; (8003050 <HAL_MspInit+0x3c>)
 800301e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003020:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003024:	645a      	str	r2, [r3, #68]	; 0x44
 8003026:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003028:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800302c:	9200      	str	r2, [sp, #0]
 800302e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003030:	9101      	str	r1, [sp, #4]
 8003032:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003034:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003038:	641a      	str	r2, [r3, #64]	; 0x40
 800303a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003040:	9301      	str	r3, [sp, #4]
 8003042:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003044:	2007      	movs	r0, #7
 8003046:	f7fe fa43 	bl	80014d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800304a:	b003      	add	sp, #12
 800304c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003050:	40023800 	.word	0x40023800

08003054 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003054:	4770      	bx	lr

08003056 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003056:	e7fe      	b.n	8003056 <HardFault_Handler>

08003058 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003058:	e7fe      	b.n	8003058 <MemManage_Handler>

0800305a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800305a:	e7fe      	b.n	800305a <BusFault_Handler>

0800305c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800305c:	e7fe      	b.n	800305c <UsageFault_Handler>

0800305e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800305e:	4770      	bx	lr

08003060 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003060:	4770      	bx	lr

08003062 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003062:	4770      	bx	lr

08003064 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003064:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003066:	f7fd ff7d 	bl	8000f64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800306a:	bd08      	pop	{r3, pc}

0800306c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800306c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1_ch2_ch3);
 800306e:	4802      	ldr	r0, [pc, #8]	; (8003078 <DMA2_Stream6_IRQHandler+0xc>)
 8003070:	f7fe fbb0 	bl	80017d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8003074:	bd08      	pop	{r3, pc}
 8003076:	bf00      	nop
 8003078:	20000ea0 	.word	0x20000ea0

0800307c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800307c:	b570      	push	{r4, r5, r6, lr}
 800307e:	460d      	mov	r5, r1
 8003080:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003082:	2400      	movs	r4, #0
 8003084:	e004      	b.n	8003090 <_read+0x14>
	{
		*ptr++ = __io_getchar();
 8003086:	f3af 8000 	nop.w
 800308a:	7028      	strb	r0, [r5, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800308c:	3401      	adds	r4, #1
		*ptr++ = __io_getchar();
 800308e:	3501      	adds	r5, #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003090:	42b4      	cmp	r4, r6
 8003092:	dbf8      	blt.n	8003086 <_read+0xa>
	}

return len;
}
 8003094:	4630      	mov	r0, r6
 8003096:	bd70      	pop	{r4, r5, r6, pc}

08003098 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8003098:	b508      	push	{r3, lr}
 800309a:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800309c:	4a0b      	ldr	r2, [pc, #44]	; (80030cc <_sbrk+0x34>)
 800309e:	6812      	ldr	r2, [r2, #0]
 80030a0:	b142      	cbz	r2, 80030b4 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 80030a2:	4a0a      	ldr	r2, [pc, #40]	; (80030cc <_sbrk+0x34>)
 80030a4:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80030a6:	4403      	add	r3, r0
 80030a8:	466a      	mov	r2, sp
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d806      	bhi.n	80030bc <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 80030ae:	4a07      	ldr	r2, [pc, #28]	; (80030cc <_sbrk+0x34>)
 80030b0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 80030b2:	bd08      	pop	{r3, pc}
		heap_end = &end;
 80030b4:	4a05      	ldr	r2, [pc, #20]	; (80030cc <_sbrk+0x34>)
 80030b6:	4906      	ldr	r1, [pc, #24]	; (80030d0 <_sbrk+0x38>)
 80030b8:	6011      	str	r1, [r2, #0]
 80030ba:	e7f2      	b.n	80030a2 <_sbrk+0xa>
		errno = ENOMEM;
 80030bc:	f000 f972 	bl	80033a4 <__errno>
 80030c0:	230c      	movs	r3, #12
 80030c2:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80030c4:	f04f 30ff 	mov.w	r0, #4294967295
 80030c8:	e7f3      	b.n	80030b2 <_sbrk+0x1a>
 80030ca:	bf00      	nop
 80030cc:	20000a0c 	.word	0x20000a0c
 80030d0:	20000f90 	.word	0x20000f90

080030d4 <_close>:

int _close(int file)
{
	return -1;
}
 80030d4:	f04f 30ff 	mov.w	r0, #4294967295
 80030d8:	4770      	bx	lr

080030da <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80030da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030de:	604b      	str	r3, [r1, #4]
	return 0;
}
 80030e0:	2000      	movs	r0, #0
 80030e2:	4770      	bx	lr

080030e4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80030e4:	2001      	movs	r0, #1
 80030e6:	4770      	bx	lr

080030e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80030e8:	2000      	movs	r0, #0
 80030ea:	4770      	bx	lr

080030ec <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030ec:	4b05      	ldr	r3, [pc, #20]	; (8003104 <SystemInit+0x18>)
 80030ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80030f2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80030f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80030fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80030fe:	609a      	str	r2, [r3, #8]
#endif
}
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	e000ed00 	.word	0xe000ed00

08003108 <HAL_TIM_PWM_MspInit>:
}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM1)
 8003108:	6802      	ldr	r2, [r0, #0]
 800310a:	4b1a      	ldr	r3, [pc, #104]	; (8003174 <HAL_TIM_PWM_MspInit+0x6c>)
 800310c:	429a      	cmp	r2, r3
 800310e:	d000      	beq.n	8003112 <HAL_TIM_PWM_MspInit+0xa>
 8003110:	4770      	bx	lr
{
 8003112:	b510      	push	{r4, lr}
 8003114:	b082      	sub	sp, #8
 8003116:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003118:	2300      	movs	r3, #0
 800311a:	9301      	str	r3, [sp, #4]
 800311c:	4a16      	ldr	r2, [pc, #88]	; (8003178 <HAL_TIM_PWM_MspInit+0x70>)
 800311e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003120:	f041 0101 	orr.w	r1, r1, #1
 8003124:	6451      	str	r1, [r2, #68]	; 0x44
 8003126:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003128:	f002 0201 	and.w	r2, r2, #1
 800312c:	9201      	str	r2, [sp, #4]
 800312e:	9a01      	ldr	r2, [sp, #4]

    /* TIM1 DMA Init */
    /* TIM1_CH1_CH2_CH3 Init */
    hdma_tim1_ch1_ch2_ch3.Instance = DMA2_Stream6;
 8003130:	4812      	ldr	r0, [pc, #72]	; (800317c <HAL_TIM_PWM_MspInit+0x74>)
 8003132:	4a13      	ldr	r2, [pc, #76]	; (8003180 <HAL_TIM_PWM_MspInit+0x78>)
 8003134:	6002      	str	r2, [r0, #0]
    hdma_tim1_ch1_ch2_ch3.Init.Channel = DMA_CHANNEL_0;
 8003136:	6043      	str	r3, [r0, #4]
    hdma_tim1_ch1_ch2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003138:	2240      	movs	r2, #64	; 0x40
 800313a:	6082      	str	r2, [r0, #8]
    hdma_tim1_ch1_ch2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800313c:	60c3      	str	r3, [r0, #12]
    hdma_tim1_ch1_ch2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800313e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003142:	6102      	str	r2, [r0, #16]
    hdma_tim1_ch1_ch2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003144:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003148:	6142      	str	r2, [r0, #20]
    hdma_tim1_ch1_ch2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800314a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800314e:	6182      	str	r2, [r0, #24]
    hdma_tim1_ch1_ch2_ch3.Init.Mode = DMA_NORMAL;
 8003150:	61c3      	str	r3, [r0, #28]
    hdma_tim1_ch1_ch2_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 8003152:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003156:	6202      	str	r2, [r0, #32]
    hdma_tim1_ch1_ch2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003158:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1_ch2_ch3) != HAL_OK)
 800315a:	f7fe fa9f 	bl	800169c <HAL_DMA_Init>
 800315e:	b930      	cbnz	r0, 800316e <HAL_TIM_PWM_MspInit+0x66>
      Error_Handler();
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1_ch2_ch3);
 8003160:	4b06      	ldr	r3, [pc, #24]	; (800317c <HAL_TIM_PWM_MspInit+0x74>)
 8003162:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch1_ch2_ch3);
 8003164:	62a3      	str	r3, [r4, #40]	; 0x28
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch1_ch2_ch3);
 8003166:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003168:	639c      	str	r4, [r3, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800316a:	b002      	add	sp, #8
 800316c:	bd10      	pop	{r4, pc}
      Error_Handler();
 800316e:	f7ff ff4f 	bl	8003010 <Error_Handler>
 8003172:	e7f5      	b.n	8003160 <HAL_TIM_PWM_MspInit+0x58>
 8003174:	40010000 	.word	0x40010000
 8003178:	40023800 	.word	0x40023800
 800317c:	20000ea0 	.word	0x20000ea0
 8003180:	400264a0 	.word	0x400264a0

08003184 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003184:	b500      	push	{lr}
 8003186:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003188:	2300      	movs	r3, #0
 800318a:	9301      	str	r3, [sp, #4]
 800318c:	9302      	str	r3, [sp, #8]
 800318e:	9303      	str	r3, [sp, #12]
 8003190:	9304      	str	r3, [sp, #16]
 8003192:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM1)
 8003194:	6802      	ldr	r2, [r0, #0]
 8003196:	4b0f      	ldr	r3, [pc, #60]	; (80031d4 <HAL_TIM_MspPostInit+0x50>)
 8003198:	429a      	cmp	r2, r3
 800319a:	d002      	beq.n	80031a2 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800319c:	b007      	add	sp, #28
 800319e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031a2:	2300      	movs	r3, #0
 80031a4:	9300      	str	r3, [sp, #0]
 80031a6:	4b0c      	ldr	r3, [pc, #48]	; (80031d8 <HAL_TIM_MspPostInit+0x54>)
 80031a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031aa:	f042 0201 	orr.w	r2, r2, #1
 80031ae:	631a      	str	r2, [r3, #48]	; 0x30
 80031b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	9300      	str	r3, [sp, #0]
 80031b8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = Sinus_Positiv_Pin|Sinus_Negativ_Pin;
 80031ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80031be:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c0:	2302      	movs	r3, #2
 80031c2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80031c4:	2301      	movs	r3, #1
 80031c6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031c8:	a901      	add	r1, sp, #4
 80031ca:	4804      	ldr	r0, [pc, #16]	; (80031dc <HAL_TIM_MspPostInit+0x58>)
 80031cc:	f7fe fbf0 	bl	80019b0 <HAL_GPIO_Init>
}
 80031d0:	e7e4      	b.n	800319c <HAL_TIM_MspPostInit+0x18>
 80031d2:	bf00      	nop
 80031d4:	40010000 	.word	0x40010000
 80031d8:	40023800 	.word	0x40023800
 80031dc:	40020000 	.word	0x40020000

080031e0 <MX_TIM1_Init>:
{
 80031e0:	b510      	push	{r4, lr}
 80031e2:	b092      	sub	sp, #72	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031e4:	2400      	movs	r4, #0
 80031e6:	9410      	str	r4, [sp, #64]	; 0x40
 80031e8:	9411      	str	r4, [sp, #68]	; 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 80031ea:	9409      	str	r4, [sp, #36]	; 0x24
 80031ec:	940a      	str	r4, [sp, #40]	; 0x28
 80031ee:	940b      	str	r4, [sp, #44]	; 0x2c
 80031f0:	940c      	str	r4, [sp, #48]	; 0x30
 80031f2:	940d      	str	r4, [sp, #52]	; 0x34
 80031f4:	940e      	str	r4, [sp, #56]	; 0x38
 80031f6:	940f      	str	r4, [sp, #60]	; 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80031f8:	2220      	movs	r2, #32
 80031fa:	4621      	mov	r1, r4
 80031fc:	a801      	add	r0, sp, #4
 80031fe:	f000 f8fb 	bl	80033f8 <memset>
  htim1.Instance = TIM1;
 8003202:	4828      	ldr	r0, [pc, #160]	; (80032a4 <MX_TIM1_Init+0xc4>)
 8003204:	4b28      	ldr	r3, [pc, #160]	; (80032a8 <MX_TIM1_Init+0xc8>)
 8003206:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 55;
 8003208:	2337      	movs	r3, #55	; 0x37
 800320a:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800320c:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 255;
 800320e:	23ff      	movs	r3, #255	; 0xff
 8003210:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003212:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8003214:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003216:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003218:	f7ff f9b0 	bl	800257c <HAL_TIM_PWM_Init>
 800321c:	2800      	cmp	r0, #0
 800321e:	d131      	bne.n	8003284 <MX_TIM1_Init+0xa4>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003220:	2300      	movs	r3, #0
 8003222:	9310      	str	r3, [sp, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003224:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003226:	a910      	add	r1, sp, #64	; 0x40
 8003228:	481e      	ldr	r0, [pc, #120]	; (80032a4 <MX_TIM1_Init+0xc4>)
 800322a:	f7ff faff 	bl	800282c <HAL_TIMEx_MasterConfigSynchronization>
 800322e:	2800      	cmp	r0, #0
 8003230:	d12b      	bne.n	800328a <MX_TIM1_Init+0xaa>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003232:	2360      	movs	r3, #96	; 0x60
 8003234:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003236:	2200      	movs	r2, #0
 8003238:	920a      	str	r2, [sp, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800323a:	920b      	str	r2, [sp, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800323c:	920c      	str	r2, [sp, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800323e:	2304      	movs	r3, #4
 8003240:	930d      	str	r3, [sp, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003242:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003244:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003246:	a909      	add	r1, sp, #36	; 0x24
 8003248:	4816      	ldr	r0, [pc, #88]	; (80032a4 <MX_TIM1_Init+0xc4>)
 800324a:	f7ff f9e9 	bl	8002620 <HAL_TIM_PWM_ConfigChannel>
 800324e:	b9f8      	cbnz	r0, 8003290 <MX_TIM1_Init+0xb0>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003250:	2204      	movs	r2, #4
 8003252:	a909      	add	r1, sp, #36	; 0x24
 8003254:	4813      	ldr	r0, [pc, #76]	; (80032a4 <MX_TIM1_Init+0xc4>)
 8003256:	f7ff f9e3 	bl	8002620 <HAL_TIM_PWM_ConfigChannel>
 800325a:	b9e0      	cbnz	r0, 8003296 <MX_TIM1_Init+0xb6>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800325c:	2300      	movs	r3, #0
 800325e:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003260:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003262:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003264:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003266:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003268:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800326c:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800326e:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003270:	a901      	add	r1, sp, #4
 8003272:	480c      	ldr	r0, [pc, #48]	; (80032a4 <MX_TIM1_Init+0xc4>)
 8003274:	f7ff fb1e 	bl	80028b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8003278:	b980      	cbnz	r0, 800329c <MX_TIM1_Init+0xbc>
  HAL_TIM_MspPostInit(&htim1);
 800327a:	480a      	ldr	r0, [pc, #40]	; (80032a4 <MX_TIM1_Init+0xc4>)
 800327c:	f7ff ff82 	bl	8003184 <HAL_TIM_MspPostInit>
}
 8003280:	b012      	add	sp, #72	; 0x48
 8003282:	bd10      	pop	{r4, pc}
    Error_Handler();
 8003284:	f7ff fec4 	bl	8003010 <Error_Handler>
 8003288:	e7ca      	b.n	8003220 <MX_TIM1_Init+0x40>
    Error_Handler();
 800328a:	f7ff fec1 	bl	8003010 <Error_Handler>
 800328e:	e7d0      	b.n	8003232 <MX_TIM1_Init+0x52>
    Error_Handler();
 8003290:	f7ff febe 	bl	8003010 <Error_Handler>
 8003294:	e7dc      	b.n	8003250 <MX_TIM1_Init+0x70>
    Error_Handler();
 8003296:	f7ff febb 	bl	8003010 <Error_Handler>
 800329a:	e7df      	b.n	800325c <MX_TIM1_Init+0x7c>
    Error_Handler();
 800329c:	f7ff feb8 	bl	8003010 <Error_Handler>
 80032a0:	e7eb      	b.n	800327a <MX_TIM1_Init+0x9a>
 80032a2:	bf00      	nop
 80032a4:	20000f00 	.word	0x20000f00
 80032a8:	40010000 	.word	0x40010000

080032ac <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80032ac:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 80032ae:	480a      	ldr	r0, [pc, #40]	; (80032d8 <MX_USART2_UART_Init+0x2c>)
 80032b0:	4b0a      	ldr	r3, [pc, #40]	; (80032dc <MX_USART2_UART_Init+0x30>)
 80032b2:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80032b4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80032b8:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80032ba:	2300      	movs	r3, #0
 80032bc:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80032be:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80032c0:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80032c2:	220c      	movs	r2, #12
 80032c4:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032c6:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80032c8:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80032ca:	f7ff fc29 	bl	8002b20 <HAL_UART_Init>
 80032ce:	b900      	cbnz	r0, 80032d2 <MX_USART2_UART_Init+0x26>
  {
    Error_Handler();
  }

}
 80032d0:	bd08      	pop	{r3, pc}
    Error_Handler();
 80032d2:	f7ff fe9d 	bl	8003010 <Error_Handler>
}
 80032d6:	e7fb      	b.n	80032d0 <MX_USART2_UART_Init+0x24>
 80032d8:	20000f40 	.word	0x20000f40
 80032dc:	40004400 	.word	0x40004400

080032e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80032e0:	b500      	push	{lr}
 80032e2:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032e4:	2300      	movs	r3, #0
 80032e6:	9303      	str	r3, [sp, #12]
 80032e8:	9304      	str	r3, [sp, #16]
 80032ea:	9305      	str	r3, [sp, #20]
 80032ec:	9306      	str	r3, [sp, #24]
 80032ee:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART2)
 80032f0:	6802      	ldr	r2, [r0, #0]
 80032f2:	4b15      	ldr	r3, [pc, #84]	; (8003348 <HAL_UART_MspInit+0x68>)
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d002      	beq.n	80032fe <HAL_UART_MspInit+0x1e>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80032f8:	b009      	add	sp, #36	; 0x24
 80032fa:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART2_CLK_ENABLE();
 80032fe:	2100      	movs	r1, #0
 8003300:	9101      	str	r1, [sp, #4]
 8003302:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8003306:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003308:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800330c:	641a      	str	r2, [r3, #64]	; 0x40
 800330e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003310:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003314:	9201      	str	r2, [sp, #4]
 8003316:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003318:	9102      	str	r1, [sp, #8]
 800331a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800331c:	f042 0201 	orr.w	r2, r2, #1
 8003320:	631a      	str	r2, [r3, #48]	; 0x30
 8003322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	9302      	str	r3, [sp, #8]
 800332a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800332c:	230c      	movs	r3, #12
 800332e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003330:	2302      	movs	r3, #2
 8003332:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003334:	2303      	movs	r3, #3
 8003336:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003338:	2307      	movs	r3, #7
 800333a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800333c:	a903      	add	r1, sp, #12
 800333e:	4803      	ldr	r0, [pc, #12]	; (800334c <HAL_UART_MspInit+0x6c>)
 8003340:	f7fe fb36 	bl	80019b0 <HAL_GPIO_Init>
}
 8003344:	e7d8      	b.n	80032f8 <HAL_UART_MspInit+0x18>
 8003346:	bf00      	nop
 8003348:	40004400 	.word	0x40004400
 800334c:	40020000 	.word	0x40020000

08003350 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003350:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003388 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003354:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003356:	e003      	b.n	8003360 <LoopCopyDataInit>

08003358 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003358:	4b0c      	ldr	r3, [pc, #48]	; (800338c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800335a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800335c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800335e:	3104      	adds	r1, #4

08003360 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003360:	480b      	ldr	r0, [pc, #44]	; (8003390 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003362:	4b0c      	ldr	r3, [pc, #48]	; (8003394 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003364:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003366:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003368:	d3f6      	bcc.n	8003358 <CopyDataInit>
  ldr  r2, =_sbss
 800336a:	4a0b      	ldr	r2, [pc, #44]	; (8003398 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800336c:	e002      	b.n	8003374 <LoopFillZerobss>

0800336e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800336e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003370:	f842 3b04 	str.w	r3, [r2], #4

08003374 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003374:	4b09      	ldr	r3, [pc, #36]	; (800339c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003376:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003378:	d3f9      	bcc.n	800336e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800337a:	f7ff feb7 	bl	80030ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800337e:	f000 f817 	bl	80033b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003382:	f7ff fd6d 	bl	8002e60 <main>
  bx  lr    
 8003386:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003388:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800338c:	08008844 	.word	0x08008844
  ldr  r0, =_sdata
 8003390:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003394:	200009b8 	.word	0x200009b8
  ldr  r2, =_sbss
 8003398:	200009b8 	.word	0x200009b8
  ldr  r3, = _ebss
 800339c:	20000f90 	.word	0x20000f90

080033a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033a0:	e7fe      	b.n	80033a0 <ADC_IRQHandler>
	...

080033a4 <__errno>:
 80033a4:	4b01      	ldr	r3, [pc, #4]	; (80033ac <__errno+0x8>)
 80033a6:	6818      	ldr	r0, [r3, #0]
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	2000000c 	.word	0x2000000c

080033b0 <__libc_init_array>:
 80033b0:	b570      	push	{r4, r5, r6, lr}
 80033b2:	4e0d      	ldr	r6, [pc, #52]	; (80033e8 <__libc_init_array+0x38>)
 80033b4:	4c0d      	ldr	r4, [pc, #52]	; (80033ec <__libc_init_array+0x3c>)
 80033b6:	1ba4      	subs	r4, r4, r6
 80033b8:	10a4      	asrs	r4, r4, #2
 80033ba:	2500      	movs	r5, #0
 80033bc:	42a5      	cmp	r5, r4
 80033be:	d109      	bne.n	80033d4 <__libc_init_array+0x24>
 80033c0:	4e0b      	ldr	r6, [pc, #44]	; (80033f0 <__libc_init_array+0x40>)
 80033c2:	4c0c      	ldr	r4, [pc, #48]	; (80033f4 <__libc_init_array+0x44>)
 80033c4:	f004 ffae 	bl	8008324 <_init>
 80033c8:	1ba4      	subs	r4, r4, r6
 80033ca:	10a4      	asrs	r4, r4, #2
 80033cc:	2500      	movs	r5, #0
 80033ce:	42a5      	cmp	r5, r4
 80033d0:	d105      	bne.n	80033de <__libc_init_array+0x2e>
 80033d2:	bd70      	pop	{r4, r5, r6, pc}
 80033d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80033d8:	4798      	blx	r3
 80033da:	3501      	adds	r5, #1
 80033dc:	e7ee      	b.n	80033bc <__libc_init_array+0xc>
 80033de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80033e2:	4798      	blx	r3
 80033e4:	3501      	adds	r5, #1
 80033e6:	e7f2      	b.n	80033ce <__libc_init_array+0x1e>
 80033e8:	08008838 	.word	0x08008838
 80033ec:	08008838 	.word	0x08008838
 80033f0:	08008838 	.word	0x08008838
 80033f4:	08008840 	.word	0x08008840

080033f8 <memset>:
 80033f8:	4402      	add	r2, r0
 80033fa:	4603      	mov	r3, r0
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d100      	bne.n	8003402 <memset+0xa>
 8003400:	4770      	bx	lr
 8003402:	f803 1b01 	strb.w	r1, [r3], #1
 8003406:	e7f9      	b.n	80033fc <memset+0x4>

08003408 <printf>:
 8003408:	b40f      	push	{r0, r1, r2, r3}
 800340a:	b507      	push	{r0, r1, r2, lr}
 800340c:	4906      	ldr	r1, [pc, #24]	; (8003428 <printf+0x20>)
 800340e:	ab04      	add	r3, sp, #16
 8003410:	6808      	ldr	r0, [r1, #0]
 8003412:	f853 2b04 	ldr.w	r2, [r3], #4
 8003416:	6881      	ldr	r1, [r0, #8]
 8003418:	9301      	str	r3, [sp, #4]
 800341a:	f000 f809 	bl	8003430 <_vfprintf_r>
 800341e:	b003      	add	sp, #12
 8003420:	f85d eb04 	ldr.w	lr, [sp], #4
 8003424:	b004      	add	sp, #16
 8003426:	4770      	bx	lr
 8003428:	2000000c 	.word	0x2000000c
 800342c:	00000000 	.word	0x00000000

08003430 <_vfprintf_r>:
 8003430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003434:	b0d3      	sub	sp, #332	; 0x14c
 8003436:	4688      	mov	r8, r1
 8003438:	4691      	mov	r9, r2
 800343a:	461c      	mov	r4, r3
 800343c:	461e      	mov	r6, r3
 800343e:	4683      	mov	fp, r0
 8003440:	f002 fbaa 	bl	8005b98 <_localeconv_r>
 8003444:	6803      	ldr	r3, [r0, #0]
 8003446:	9316      	str	r3, [sp, #88]	; 0x58
 8003448:	4618      	mov	r0, r3
 800344a:	f7fc ff31 	bl	80002b0 <strlen>
 800344e:	900d      	str	r0, [sp, #52]	; 0x34
 8003450:	f1bb 0f00 	cmp.w	fp, #0
 8003454:	d005      	beq.n	8003462 <_vfprintf_r+0x32>
 8003456:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
 800345a:	b913      	cbnz	r3, 8003462 <_vfprintf_r+0x32>
 800345c:	4658      	mov	r0, fp
 800345e:	f002 fa31 	bl	80058c4 <__sinit>
 8003462:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 8003466:	07d8      	lsls	r0, r3, #31
 8003468:	d407      	bmi.n	800347a <_vfprintf_r+0x4a>
 800346a:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800346e:	0599      	lsls	r1, r3, #22
 8003470:	d403      	bmi.n	800347a <_vfprintf_r+0x4a>
 8003472:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 8003476:	f002 fb9f 	bl	8005bb8 <__retarget_lock_acquire_recursive>
 800347a:	f9b8 300c 	ldrsh.w	r3, [r8, #12]
 800347e:	049a      	lsls	r2, r3, #18
 8003480:	d409      	bmi.n	8003496 <_vfprintf_r+0x66>
 8003482:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003486:	f8a8 300c 	strh.w	r3, [r8, #12]
 800348a:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 800348e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003492:	f8c8 3064 	str.w	r3, [r8, #100]	; 0x64
 8003496:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800349a:	071f      	lsls	r7, r3, #28
 800349c:	d502      	bpl.n	80034a4 <_vfprintf_r+0x74>
 800349e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80034a2:	b9a3      	cbnz	r3, 80034ce <_vfprintf_r+0x9e>
 80034a4:	4641      	mov	r1, r8
 80034a6:	4658      	mov	r0, fp
 80034a8:	f001 fa74 	bl	8004994 <__swsetup_r>
 80034ac:	b178      	cbz	r0, 80034ce <_vfprintf_r+0x9e>
 80034ae:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 80034b2:	07dd      	lsls	r5, r3, #31
 80034b4:	d407      	bmi.n	80034c6 <_vfprintf_r+0x96>
 80034b6:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80034ba:	059c      	lsls	r4, r3, #22
 80034bc:	d403      	bmi.n	80034c6 <_vfprintf_r+0x96>
 80034be:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 80034c2:	f002 fb7a 	bl	8005bba <__retarget_lock_release_recursive>
 80034c6:	f04f 33ff 	mov.w	r3, #4294967295
 80034ca:	930e      	str	r3, [sp, #56]	; 0x38
 80034cc:	e01a      	b.n	8003504 <_vfprintf_r+0xd4>
 80034ce:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80034d2:	f003 021a 	and.w	r2, r3, #26
 80034d6:	2a0a      	cmp	r2, #10
 80034d8:	d118      	bne.n	800350c <_vfprintf_r+0xdc>
 80034da:	f9b8 200e 	ldrsh.w	r2, [r8, #14]
 80034de:	2a00      	cmp	r2, #0
 80034e0:	db14      	blt.n	800350c <_vfprintf_r+0xdc>
 80034e2:	f8d8 2064 	ldr.w	r2, [r8, #100]	; 0x64
 80034e6:	07d0      	lsls	r0, r2, #31
 80034e8:	d405      	bmi.n	80034f6 <_vfprintf_r+0xc6>
 80034ea:	0599      	lsls	r1, r3, #22
 80034ec:	d403      	bmi.n	80034f6 <_vfprintf_r+0xc6>
 80034ee:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 80034f2:	f002 fb62 	bl	8005bba <__retarget_lock_release_recursive>
 80034f6:	4623      	mov	r3, r4
 80034f8:	464a      	mov	r2, r9
 80034fa:	4641      	mov	r1, r8
 80034fc:	4658      	mov	r0, fp
 80034fe:	f001 fa09 	bl	8004914 <__sbprintf>
 8003502:	900e      	str	r0, [sp, #56]	; 0x38
 8003504:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003506:	b053      	add	sp, #332	; 0x14c
 8003508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800350c:	ed9f 7bc8 	vldr	d7, [pc, #800]	; 8003830 <_vfprintf_r+0x400>
 8003510:	2300      	movs	r3, #0
 8003512:	e9cd 3327 	strd	r3, r3, [sp, #156]	; 0x9c
 8003516:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800351a:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
 800351e:	ac29      	add	r4, sp, #164	; 0xa4
 8003520:	9426      	str	r4, [sp, #152]	; 0x98
 8003522:	9304      	str	r3, [sp, #16]
 8003524:	9308      	str	r3, [sp, #32]
 8003526:	9312      	str	r3, [sp, #72]	; 0x48
 8003528:	9319      	str	r3, [sp, #100]	; 0x64
 800352a:	930e      	str	r3, [sp, #56]	; 0x38
 800352c:	464d      	mov	r5, r9
 800352e:	462b      	mov	r3, r5
 8003530:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003534:	b112      	cbz	r2, 800353c <_vfprintf_r+0x10c>
 8003536:	2a25      	cmp	r2, #37	; 0x25
 8003538:	f040 80e4 	bne.w	8003704 <_vfprintf_r+0x2d4>
 800353c:	ebb5 0709 	subs.w	r7, r5, r9
 8003540:	d00e      	beq.n	8003560 <_vfprintf_r+0x130>
 8003542:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003544:	443b      	add	r3, r7
 8003546:	9328      	str	r3, [sp, #160]	; 0xa0
 8003548:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800354a:	3301      	adds	r3, #1
 800354c:	2b07      	cmp	r3, #7
 800354e:	e9c4 9700 	strd	r9, r7, [r4]
 8003552:	9327      	str	r3, [sp, #156]	; 0x9c
 8003554:	f300 80d8 	bgt.w	8003708 <_vfprintf_r+0x2d8>
 8003558:	3408      	adds	r4, #8
 800355a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800355c:	443b      	add	r3, r7
 800355e:	930e      	str	r3, [sp, #56]	; 0x38
 8003560:	782b      	ldrb	r3, [r5, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	f001 81c2 	beq.w	80048ec <_vfprintf_r+0x14bc>
 8003568:	1c6b      	adds	r3, r5, #1
 800356a:	930c      	str	r3, [sp, #48]	; 0x30
 800356c:	2300      	movs	r3, #0
 800356e:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8003572:	f04f 35ff 	mov.w	r5, #4294967295
 8003576:	930f      	str	r3, [sp, #60]	; 0x3c
 8003578:	469a      	mov	sl, r3
 800357a:	270a      	movs	r7, #10
 800357c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	9306      	str	r3, [sp, #24]
 8003582:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003584:	3301      	adds	r3, #1
 8003586:	930c      	str	r3, [sp, #48]	; 0x30
 8003588:	9b06      	ldr	r3, [sp, #24]
 800358a:	3b20      	subs	r3, #32
 800358c:	2b5a      	cmp	r3, #90	; 0x5a
 800358e:	f200 862f 	bhi.w	80041f0 <_vfprintf_r+0xdc0>
 8003592:	a201      	add	r2, pc, #4	; (adr r2, 8003598 <_vfprintf_r+0x168>)
 8003594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003598:	0800379b 	.word	0x0800379b
 800359c:	080041f1 	.word	0x080041f1
 80035a0:	080041f1 	.word	0x080041f1
 80035a4:	080037ad 	.word	0x080037ad
 80035a8:	080041f1 	.word	0x080041f1
 80035ac:	080041f1 	.word	0x080041f1
 80035b0:	080041f1 	.word	0x080041f1
 80035b4:	08003761 	.word	0x08003761
 80035b8:	080041f1 	.word	0x080041f1
 80035bc:	080041f1 	.word	0x080041f1
 80035c0:	080037b3 	.word	0x080037b3
 80035c4:	080037cb 	.word	0x080037cb
 80035c8:	080041f1 	.word	0x080041f1
 80035cc:	080037c5 	.word	0x080037c5
 80035d0:	080037cf 	.word	0x080037cf
 80035d4:	080041f1 	.word	0x080041f1
 80035d8:	08003803 	.word	0x08003803
 80035dc:	08003809 	.word	0x08003809
 80035e0:	08003809 	.word	0x08003809
 80035e4:	08003809 	.word	0x08003809
 80035e8:	08003809 	.word	0x08003809
 80035ec:	08003809 	.word	0x08003809
 80035f0:	08003809 	.word	0x08003809
 80035f4:	08003809 	.word	0x08003809
 80035f8:	08003809 	.word	0x08003809
 80035fc:	08003809 	.word	0x08003809
 8003600:	080041f1 	.word	0x080041f1
 8003604:	080041f1 	.word	0x080041f1
 8003608:	080041f1 	.word	0x080041f1
 800360c:	080041f1 	.word	0x080041f1
 8003610:	080041f1 	.word	0x080041f1
 8003614:	080041f1 	.word	0x080041f1
 8003618:	080041f1 	.word	0x080041f1
 800361c:	08003907 	.word	0x08003907
 8003620:	080041f1 	.word	0x080041f1
 8003624:	08003871 	.word	0x08003871
 8003628:	08003893 	.word	0x08003893
 800362c:	08003907 	.word	0x08003907
 8003630:	08003907 	.word	0x08003907
 8003634:	08003907 	.word	0x08003907
 8003638:	080041f1 	.word	0x080041f1
 800363c:	080041f1 	.word	0x080041f1
 8003640:	080041f1 	.word	0x080041f1
 8003644:	080041f1 	.word	0x080041f1
 8003648:	08003829 	.word	0x08003829
 800364c:	080041f1 	.word	0x080041f1
 8003650:	080041f1 	.word	0x080041f1
 8003654:	08003ded 	.word	0x08003ded
 8003658:	080041f1 	.word	0x080041f1
 800365c:	080041f1 	.word	0x080041f1
 8003660:	080041f1 	.word	0x080041f1
 8003664:	08003e79 	.word	0x08003e79
 8003668:	080041f1 	.word	0x080041f1
 800366c:	0800405d 	.word	0x0800405d
 8003670:	080041f1 	.word	0x080041f1
 8003674:	080041f1 	.word	0x080041f1
 8003678:	08003721 	.word	0x08003721
 800367c:	080041f1 	.word	0x080041f1
 8003680:	080041f1 	.word	0x080041f1
 8003684:	080041f1 	.word	0x080041f1
 8003688:	080041f1 	.word	0x080041f1
 800368c:	080041f1 	.word	0x080041f1
 8003690:	080041f1 	.word	0x080041f1
 8003694:	080041f1 	.word	0x080041f1
 8003698:	080041f1 	.word	0x080041f1
 800369c:	08003907 	.word	0x08003907
 80036a0:	080041f1 	.word	0x080041f1
 80036a4:	08003871 	.word	0x08003871
 80036a8:	08003897 	.word	0x08003897
 80036ac:	08003907 	.word	0x08003907
 80036b0:	08003907 	.word	0x08003907
 80036b4:	08003907 	.word	0x08003907
 80036b8:	0800383d 	.word	0x0800383d
 80036bc:	08003897 	.word	0x08003897
 80036c0:	08003865 	.word	0x08003865
 80036c4:	080041f1 	.word	0x080041f1
 80036c8:	08003857 	.word	0x08003857
 80036cc:	080041f1 	.word	0x080041f1
 80036d0:	08003da7 	.word	0x08003da7
 80036d4:	08003df1 	.word	0x08003df1
 80036d8:	08003e59 	.word	0x08003e59
 80036dc:	08003865 	.word	0x08003865
 80036e0:	080041f1 	.word	0x080041f1
 80036e4:	08003e79 	.word	0x08003e79
 80036e8:	0800357d 	.word	0x0800357d
 80036ec:	08004061 	.word	0x08004061
 80036f0:	080041f1 	.word	0x080041f1
 80036f4:	080041f1 	.word	0x080041f1
 80036f8:	0800409f 	.word	0x0800409f
 80036fc:	080041f1 	.word	0x080041f1
 8003700:	0800357d 	.word	0x0800357d
 8003704:	461d      	mov	r5, r3
 8003706:	e712      	b.n	800352e <_vfprintf_r+0xfe>
 8003708:	aa26      	add	r2, sp, #152	; 0x98
 800370a:	4641      	mov	r1, r8
 800370c:	4658      	mov	r0, fp
 800370e:	f003 f86a 	bl	80067e6 <__sprint_r>
 8003712:	2800      	cmp	r0, #0
 8003714:	f040 8161 	bne.w	80039da <_vfprintf_r+0x5aa>
 8003718:	ac29      	add	r4, sp, #164	; 0xa4
 800371a:	e71e      	b.n	800355a <_vfprintf_r+0x12a>
 800371c:	461e      	mov	r6, r3
 800371e:	e72d      	b.n	800357c <_vfprintf_r+0x14c>
 8003720:	4b45      	ldr	r3, [pc, #276]	; (8003838 <_vfprintf_r+0x408>)
 8003722:	9318      	str	r3, [sp, #96]	; 0x60
 8003724:	f01a 0f20 	tst.w	sl, #32
 8003728:	f000 84bc 	beq.w	80040a4 <_vfprintf_r+0xc74>
 800372c:	3607      	adds	r6, #7
 800372e:	f026 0607 	bic.w	r6, r6, #7
 8003732:	f106 0308 	add.w	r3, r6, #8
 8003736:	e9d6 6700 	ldrd	r6, r7, [r6]
 800373a:	9309      	str	r3, [sp, #36]	; 0x24
 800373c:	f01a 0f01 	tst.w	sl, #1
 8003740:	d00a      	beq.n	8003758 <_vfprintf_r+0x328>
 8003742:	ea56 0307 	orrs.w	r3, r6, r7
 8003746:	d007      	beq.n	8003758 <_vfprintf_r+0x328>
 8003748:	2330      	movs	r3, #48	; 0x30
 800374a:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800374e:	9b06      	ldr	r3, [sp, #24]
 8003750:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 8003754:	f04a 0a02 	orr.w	sl, sl, #2
 8003758:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800375c:	2302      	movs	r3, #2
 800375e:	e355      	b.n	8003e0c <_vfprintf_r+0x9dc>
 8003760:	4658      	mov	r0, fp
 8003762:	f002 fa19 	bl	8005b98 <_localeconv_r>
 8003766:	6843      	ldr	r3, [r0, #4]
 8003768:	9319      	str	r3, [sp, #100]	; 0x64
 800376a:	4618      	mov	r0, r3
 800376c:	f7fc fda0 	bl	80002b0 <strlen>
 8003770:	9012      	str	r0, [sp, #72]	; 0x48
 8003772:	4658      	mov	r0, fp
 8003774:	f002 fa10 	bl	8005b98 <_localeconv_r>
 8003778:	6883      	ldr	r3, [r0, #8]
 800377a:	9308      	str	r3, [sp, #32]
 800377c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800377e:	2b00      	cmp	r3, #0
 8003780:	f43f aefc 	beq.w	800357c <_vfprintf_r+0x14c>
 8003784:	9b08      	ldr	r3, [sp, #32]
 8003786:	2b00      	cmp	r3, #0
 8003788:	f43f aef8 	beq.w	800357c <_vfprintf_r+0x14c>
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	f43f aef4 	beq.w	800357c <_vfprintf_r+0x14c>
 8003794:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 8003798:	e6f0      	b.n	800357c <_vfprintf_r+0x14c>
 800379a:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f47f aeec 	bne.w	800357c <_vfprintf_r+0x14c>
 80037a4:	2320      	movs	r3, #32
 80037a6:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 80037aa:	e6e7      	b.n	800357c <_vfprintf_r+0x14c>
 80037ac:	f04a 0a01 	orr.w	sl, sl, #1
 80037b0:	e6e4      	b.n	800357c <_vfprintf_r+0x14c>
 80037b2:	6832      	ldr	r2, [r6, #0]
 80037b4:	920f      	str	r2, [sp, #60]	; 0x3c
 80037b6:	2a00      	cmp	r2, #0
 80037b8:	f106 0304 	add.w	r3, r6, #4
 80037bc:	daae      	bge.n	800371c <_vfprintf_r+0x2ec>
 80037be:	4252      	negs	r2, r2
 80037c0:	920f      	str	r2, [sp, #60]	; 0x3c
 80037c2:	461e      	mov	r6, r3
 80037c4:	f04a 0a04 	orr.w	sl, sl, #4
 80037c8:	e6d8      	b.n	800357c <_vfprintf_r+0x14c>
 80037ca:	232b      	movs	r3, #43	; 0x2b
 80037cc:	e7eb      	b.n	80037a6 <_vfprintf_r+0x376>
 80037ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80037d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80037d2:	7812      	ldrb	r2, [r2, #0]
 80037d4:	9206      	str	r2, [sp, #24]
 80037d6:	2a2a      	cmp	r2, #42	; 0x2a
 80037d8:	f103 0301 	add.w	r3, r3, #1
 80037dc:	d10f      	bne.n	80037fe <_vfprintf_r+0x3ce>
 80037de:	6835      	ldr	r5, [r6, #0]
 80037e0:	930c      	str	r3, [sp, #48]	; 0x30
 80037e2:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 80037e6:	3604      	adds	r6, #4
 80037e8:	e6c8      	b.n	800357c <_vfprintf_r+0x14c>
 80037ea:	fb07 2505 	mla	r5, r7, r5, r2
 80037ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80037f2:	9206      	str	r2, [sp, #24]
 80037f4:	9a06      	ldr	r2, [sp, #24]
 80037f6:	3a30      	subs	r2, #48	; 0x30
 80037f8:	2a09      	cmp	r2, #9
 80037fa:	d9f6      	bls.n	80037ea <_vfprintf_r+0x3ba>
 80037fc:	e6c3      	b.n	8003586 <_vfprintf_r+0x156>
 80037fe:	2500      	movs	r5, #0
 8003800:	e7f8      	b.n	80037f4 <_vfprintf_r+0x3c4>
 8003802:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8003806:	e6b9      	b.n	800357c <_vfprintf_r+0x14c>
 8003808:	2200      	movs	r2, #0
 800380a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800380c:	920f      	str	r2, [sp, #60]	; 0x3c
 800380e:	9a06      	ldr	r2, [sp, #24]
 8003810:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003812:	3a30      	subs	r2, #48	; 0x30
 8003814:	fb07 2201 	mla	r2, r7, r1, r2
 8003818:	920f      	str	r2, [sp, #60]	; 0x3c
 800381a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800381e:	9206      	str	r2, [sp, #24]
 8003820:	3a30      	subs	r2, #48	; 0x30
 8003822:	2a09      	cmp	r2, #9
 8003824:	d9f3      	bls.n	800380e <_vfprintf_r+0x3de>
 8003826:	e6ae      	b.n	8003586 <_vfprintf_r+0x156>
 8003828:	f04a 0a08 	orr.w	sl, sl, #8
 800382c:	e6a6      	b.n	800357c <_vfprintf_r+0x14c>
 800382e:	bf00      	nop
	...
 8003838:	0800840d 	.word	0x0800840d
 800383c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	2b68      	cmp	r3, #104	; 0x68
 8003842:	bf01      	itttt	eq
 8003844:	9b0c      	ldreq	r3, [sp, #48]	; 0x30
 8003846:	3301      	addeq	r3, #1
 8003848:	930c      	streq	r3, [sp, #48]	; 0x30
 800384a:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 800384e:	bf18      	it	ne
 8003850:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 8003854:	e692      	b.n	800357c <_vfprintf_r+0x14c>
 8003856:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	2b6c      	cmp	r3, #108	; 0x6c
 800385c:	d105      	bne.n	800386a <_vfprintf_r+0x43a>
 800385e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003860:	3301      	adds	r3, #1
 8003862:	930c      	str	r3, [sp, #48]	; 0x30
 8003864:	f04a 0a20 	orr.w	sl, sl, #32
 8003868:	e688      	b.n	800357c <_vfprintf_r+0x14c>
 800386a:	f04a 0a10 	orr.w	sl, sl, #16
 800386e:	e685      	b.n	800357c <_vfprintf_r+0x14c>
 8003870:	1d33      	adds	r3, r6, #4
 8003872:	9309      	str	r3, [sp, #36]	; 0x24
 8003874:	2000      	movs	r0, #0
 8003876:	6833      	ldr	r3, [r6, #0]
 8003878:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 800387c:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 8003880:	9003      	str	r0, [sp, #12]
 8003882:	2501      	movs	r5, #1
 8003884:	9010      	str	r0, [sp, #64]	; 0x40
 8003886:	4607      	mov	r7, r0
 8003888:	9007      	str	r0, [sp, #28]
 800388a:	4606      	mov	r6, r0
 800388c:	f10d 09e4 	add.w	r9, sp, #228	; 0xe4
 8003890:	e30b      	b.n	8003eaa <_vfprintf_r+0xa7a>
 8003892:	f04a 0a10 	orr.w	sl, sl, #16
 8003896:	f01a 0f20 	tst.w	sl, #32
 800389a:	d021      	beq.n	80038e0 <_vfprintf_r+0x4b0>
 800389c:	3607      	adds	r6, #7
 800389e:	f026 0607 	bic.w	r6, r6, #7
 80038a2:	f106 0308 	add.w	r3, r6, #8
 80038a6:	e9d6 6700 	ldrd	r6, r7, [r6]
 80038aa:	9309      	str	r3, [sp, #36]	; 0x24
 80038ac:	2e00      	cmp	r6, #0
 80038ae:	f177 0300 	sbcs.w	r3, r7, #0
 80038b2:	da06      	bge.n	80038c2 <_vfprintf_r+0x492>
 80038b4:	4276      	negs	r6, r6
 80038b6:	f04f 032d 	mov.w	r3, #45	; 0x2d
 80038ba:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 80038be:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 80038c2:	1c6b      	adds	r3, r5, #1
 80038c4:	f040 8401 	bne.w	80040ca <_vfprintf_r+0xc9a>
 80038c8:	2f00      	cmp	r7, #0
 80038ca:	bf08      	it	eq
 80038cc:	2e0a      	cmpeq	r6, #10
 80038ce:	f080 8431 	bcs.w	8004134 <_vfprintf_r+0xd04>
 80038d2:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
 80038d6:	3630      	adds	r6, #48	; 0x30
 80038d8:	f809 6d01 	strb.w	r6, [r9, #-1]!
 80038dc:	f000 bc18 	b.w	8004110 <_vfprintf_r+0xce0>
 80038e0:	1d33      	adds	r3, r6, #4
 80038e2:	f01a 0f10 	tst.w	sl, #16
 80038e6:	9309      	str	r3, [sp, #36]	; 0x24
 80038e8:	d002      	beq.n	80038f0 <_vfprintf_r+0x4c0>
 80038ea:	6836      	ldr	r6, [r6, #0]
 80038ec:	17f7      	asrs	r7, r6, #31
 80038ee:	e7dd      	b.n	80038ac <_vfprintf_r+0x47c>
 80038f0:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80038f4:	6836      	ldr	r6, [r6, #0]
 80038f6:	d001      	beq.n	80038fc <_vfprintf_r+0x4cc>
 80038f8:	b236      	sxth	r6, r6
 80038fa:	e7f7      	b.n	80038ec <_vfprintf_r+0x4bc>
 80038fc:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8003900:	bf18      	it	ne
 8003902:	b276      	sxtbne	r6, r6
 8003904:	e7f2      	b.n	80038ec <_vfprintf_r+0x4bc>
 8003906:	3607      	adds	r6, #7
 8003908:	f026 0607 	bic.w	r6, r6, #7
 800390c:	ed96 7b00 	vldr	d7, [r6]
 8003910:	f106 0308 	add.w	r3, r6, #8
 8003914:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8003918:	9309      	str	r3, [sp, #36]	; 0x24
 800391a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800391c:	931a      	str	r3, [sp, #104]	; 0x68
 800391e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003920:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003924:	931b      	str	r3, [sp, #108]	; 0x6c
 8003926:	f04f 32ff 	mov.w	r2, #4294967295
 800392a:	4bb0      	ldr	r3, [pc, #704]	; (8003bec <_vfprintf_r+0x7bc>)
 800392c:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8003930:	f7fd f91c 	bl	8000b6c <__aeabi_dcmpun>
 8003934:	b9f8      	cbnz	r0, 8003976 <_vfprintf_r+0x546>
 8003936:	f04f 32ff 	mov.w	r2, #4294967295
 800393a:	4bac      	ldr	r3, [pc, #688]	; (8003bec <_vfprintf_r+0x7bc>)
 800393c:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8003940:	f7fd f8f6 	bl	8000b30 <__aeabi_dcmple>
 8003944:	b9b8      	cbnz	r0, 8003976 <_vfprintf_r+0x546>
 8003946:	2200      	movs	r2, #0
 8003948:	2300      	movs	r3, #0
 800394a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800394e:	f7fd f8e5 	bl	8000b1c <__aeabi_dcmplt>
 8003952:	b110      	cbz	r0, 800395a <_vfprintf_r+0x52a>
 8003954:	232d      	movs	r3, #45	; 0x2d
 8003956:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800395a:	4aa5      	ldr	r2, [pc, #660]	; (8003bf0 <_vfprintf_r+0x7c0>)
 800395c:	4ba5      	ldr	r3, [pc, #660]	; (8003bf4 <_vfprintf_r+0x7c4>)
 800395e:	9906      	ldr	r1, [sp, #24]
 8003960:	2947      	cmp	r1, #71	; 0x47
 8003962:	bfcc      	ite	gt
 8003964:	4691      	movgt	r9, r2
 8003966:	4699      	movle	r9, r3
 8003968:	2300      	movs	r3, #0
 800396a:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 800396e:	9303      	str	r3, [sp, #12]
 8003970:	2503      	movs	r5, #3
 8003972:	9310      	str	r3, [sp, #64]	; 0x40
 8003974:	e3d2      	b.n	800411c <_vfprintf_r+0xcec>
 8003976:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800397a:	4610      	mov	r0, r2
 800397c:	4619      	mov	r1, r3
 800397e:	f7fd f8f5 	bl	8000b6c <__aeabi_dcmpun>
 8003982:	b140      	cbz	r0, 8003996 <_vfprintf_r+0x566>
 8003984:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003986:	4a9c      	ldr	r2, [pc, #624]	; (8003bf8 <_vfprintf_r+0x7c8>)
 8003988:	2b00      	cmp	r3, #0
 800398a:	bfbc      	itt	lt
 800398c:	232d      	movlt	r3, #45	; 0x2d
 800398e:	f88d 307b 	strblt.w	r3, [sp, #123]	; 0x7b
 8003992:	4b9a      	ldr	r3, [pc, #616]	; (8003bfc <_vfprintf_r+0x7cc>)
 8003994:	e7e3      	b.n	800395e <_vfprintf_r+0x52e>
 8003996:	9b06      	ldr	r3, [sp, #24]
 8003998:	f023 0320 	bic.w	r3, r3, #32
 800399c:	2b41      	cmp	r3, #65	; 0x41
 800399e:	9307      	str	r3, [sp, #28]
 80039a0:	d12d      	bne.n	80039fe <_vfprintf_r+0x5ce>
 80039a2:	2330      	movs	r3, #48	; 0x30
 80039a4:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 80039a8:	9b06      	ldr	r3, [sp, #24]
 80039aa:	2b61      	cmp	r3, #97	; 0x61
 80039ac:	bf14      	ite	ne
 80039ae:	2358      	movne	r3, #88	; 0x58
 80039b0:	2378      	moveq	r3, #120	; 0x78
 80039b2:	2d63      	cmp	r5, #99	; 0x63
 80039b4:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 80039b8:	f04a 0a02 	orr.w	sl, sl, #2
 80039bc:	dd2a      	ble.n	8003a14 <_vfprintf_r+0x5e4>
 80039be:	1c69      	adds	r1, r5, #1
 80039c0:	4658      	mov	r0, fp
 80039c2:	f002 f967 	bl	8005c94 <_malloc_r>
 80039c6:	4681      	mov	r9, r0
 80039c8:	2800      	cmp	r0, #0
 80039ca:	f040 8121 	bne.w	8003c10 <_vfprintf_r+0x7e0>
 80039ce:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80039d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039d6:	f8a8 300c 	strh.w	r3, [r8, #12]
 80039da:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 80039de:	07d8      	lsls	r0, r3, #31
 80039e0:	d407      	bmi.n	80039f2 <_vfprintf_r+0x5c2>
 80039e2:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80039e6:	0599      	lsls	r1, r3, #22
 80039e8:	d403      	bmi.n	80039f2 <_vfprintf_r+0x5c2>
 80039ea:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 80039ee:	f002 f8e4 	bl	8005bba <__retarget_lock_release_recursive>
 80039f2:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80039f6:	065a      	lsls	r2, r3, #25
 80039f8:	f57f ad84 	bpl.w	8003504 <_vfprintf_r+0xd4>
 80039fc:	e563      	b.n	80034c6 <_vfprintf_r+0x96>
 80039fe:	1c6a      	adds	r2, r5, #1
 8003a00:	f000 8108 	beq.w	8003c14 <_vfprintf_r+0x7e4>
 8003a04:	9b07      	ldr	r3, [sp, #28]
 8003a06:	2b47      	cmp	r3, #71	; 0x47
 8003a08:	d102      	bne.n	8003a10 <_vfprintf_r+0x5e0>
 8003a0a:	2d00      	cmp	r5, #0
 8003a0c:	f000 8105 	beq.w	8003c1a <_vfprintf_r+0x7ea>
 8003a10:	9003      	str	r0, [sp, #12]
 8003a12:	e002      	b.n	8003a1a <_vfprintf_r+0x5ea>
 8003a14:	9003      	str	r0, [sp, #12]
 8003a16:	f10d 09e4 	add.w	r9, sp, #228	; 0xe4
 8003a1a:	f44a 7380 	orr.w	r3, sl, #256	; 0x100
 8003a1e:	9310      	str	r3, [sp, #64]	; 0x40
 8003a20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f280 80fc 	bge.w	8003c20 <_vfprintf_r+0x7f0>
 8003a28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a2a:	9314      	str	r3, [sp, #80]	; 0x50
 8003a2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003a2e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003a32:	9315      	str	r3, [sp, #84]	; 0x54
 8003a34:	232d      	movs	r3, #45	; 0x2d
 8003a36:	9313      	str	r3, [sp, #76]	; 0x4c
 8003a38:	9b07      	ldr	r3, [sp, #28]
 8003a3a:	2b41      	cmp	r3, #65	; 0x41
 8003a3c:	f040 8104 	bne.w	8003c48 <_vfprintf_r+0x818>
 8003a40:	a820      	add	r0, sp, #128	; 0x80
 8003a42:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8003a46:	f002 fe23 	bl	8006690 <frexp>
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003a50:	ec51 0b10 	vmov	r0, r1, d0
 8003a54:	f7fc fdf0 	bl	8000638 <__aeabi_dmul>
 8003a58:	2200      	movs	r2, #0
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003a60:	f7fd f852 	bl	8000b08 <__aeabi_dcmpeq>
 8003a64:	b108      	cbz	r0, 8003a6a <_vfprintf_r+0x63a>
 8003a66:	2301      	movs	r3, #1
 8003a68:	9320      	str	r3, [sp, #128]	; 0x80
 8003a6a:	4f65      	ldr	r7, [pc, #404]	; (8003c00 <_vfprintf_r+0x7d0>)
 8003a6c:	4b65      	ldr	r3, [pc, #404]	; (8003c04 <_vfprintf_r+0x7d4>)
 8003a6e:	9a06      	ldr	r2, [sp, #24]
 8003a70:	2a61      	cmp	r2, #97	; 0x61
 8003a72:	bf08      	it	eq
 8003a74:	461f      	moveq	r7, r3
 8003a76:	9711      	str	r7, [sp, #68]	; 0x44
 8003a78:	464e      	mov	r6, r9
 8003a7a:	1e6f      	subs	r7, r5, #1
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	4b62      	ldr	r3, [pc, #392]	; (8003c08 <_vfprintf_r+0x7d8>)
 8003a80:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003a84:	f7fc fdd8 	bl	8000638 <__aeabi_dmul>
 8003a88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003a8c:	f7fd f884 	bl	8000b98 <__aeabi_d2iz>
 8003a90:	901c      	str	r0, [sp, #112]	; 0x70
 8003a92:	f7fc fd67 	bl	8000564 <__aeabi_i2d>
 8003a96:	4602      	mov	r2, r0
 8003a98:	460b      	mov	r3, r1
 8003a9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003a9e:	f7fc fc13 	bl	80002c8 <__aeabi_dsub>
 8003aa2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003aa4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8003aa6:	971d      	str	r7, [sp, #116]	; 0x74
 8003aa8:	5c9b      	ldrb	r3, [r3, r2]
 8003aaa:	f806 3b01 	strb.w	r3, [r6], #1
 8003aae:	1c7b      	adds	r3, r7, #1
 8003ab0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003ab4:	d006      	beq.n	8003ac4 <_vfprintf_r+0x694>
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	2300      	movs	r3, #0
 8003aba:	3f01      	subs	r7, #1
 8003abc:	f7fd f824 	bl	8000b08 <__aeabi_dcmpeq>
 8003ac0:	2800      	cmp	r0, #0
 8003ac2:	d0db      	beq.n	8003a7c <_vfprintf_r+0x64c>
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	4b51      	ldr	r3, [pc, #324]	; (8003c0c <_vfprintf_r+0x7dc>)
 8003ac8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003acc:	f7fd f844 	bl	8000b58 <__aeabi_dcmpgt>
 8003ad0:	b960      	cbnz	r0, 8003aec <_vfprintf_r+0x6bc>
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	4b4d      	ldr	r3, [pc, #308]	; (8003c0c <_vfprintf_r+0x7dc>)
 8003ad6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003ada:	f7fd f815 	bl	8000b08 <__aeabi_dcmpeq>
 8003ade:	2800      	cmp	r0, #0
 8003ae0:	f000 80ad 	beq.w	8003c3e <_vfprintf_r+0x80e>
 8003ae4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8003ae6:	07df      	lsls	r7, r3, #31
 8003ae8:	f140 80a9 	bpl.w	8003c3e <_vfprintf_r+0x80e>
 8003aec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003aee:	9624      	str	r6, [sp, #144]	; 0x90
 8003af0:	7bd9      	ldrb	r1, [r3, #15]
 8003af2:	2030      	movs	r0, #48	; 0x30
 8003af4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003af6:	1e53      	subs	r3, r2, #1
 8003af8:	9324      	str	r3, [sp, #144]	; 0x90
 8003afa:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8003afe:	428b      	cmp	r3, r1
 8003b00:	f000 8094 	beq.w	8003c2c <_vfprintf_r+0x7fc>
 8003b04:	2b39      	cmp	r3, #57	; 0x39
 8003b06:	bf0b      	itete	eq
 8003b08:	9b11      	ldreq	r3, [sp, #68]	; 0x44
 8003b0a:	3301      	addne	r3, #1
 8003b0c:	7a9b      	ldrbeq	r3, [r3, #10]
 8003b0e:	b2db      	uxtbne	r3, r3
 8003b10:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003b14:	4633      	mov	r3, r6
 8003b16:	eba3 0309 	sub.w	r3, r3, r9
 8003b1a:	9304      	str	r3, [sp, #16]
 8003b1c:	9b07      	ldr	r3, [sp, #28]
 8003b1e:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8003b20:	2b47      	cmp	r3, #71	; 0x47
 8003b22:	f040 80d6 	bne.w	8003cd2 <_vfprintf_r+0x8a2>
 8003b26:	1cf0      	adds	r0, r6, #3
 8003b28:	db02      	blt.n	8003b30 <_vfprintf_r+0x700>
 8003b2a:	42b5      	cmp	r5, r6
 8003b2c:	f280 80fc 	bge.w	8003d28 <_vfprintf_r+0x8f8>
 8003b30:	9b06      	ldr	r3, [sp, #24]
 8003b32:	3b02      	subs	r3, #2
 8003b34:	9306      	str	r3, [sp, #24]
 8003b36:	9906      	ldr	r1, [sp, #24]
 8003b38:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8003b3c:	f021 0120 	bic.w	r1, r1, #32
 8003b40:	2941      	cmp	r1, #65	; 0x41
 8003b42:	bf08      	it	eq
 8003b44:	320f      	addeq	r2, #15
 8003b46:	f106 33ff 	add.w	r3, r6, #4294967295
 8003b4a:	bf06      	itte	eq
 8003b4c:	b2d2      	uxtbeq	r2, r2
 8003b4e:	2101      	moveq	r1, #1
 8003b50:	2100      	movne	r1, #0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	9320      	str	r3, [sp, #128]	; 0x80
 8003b56:	bfb8      	it	lt
 8003b58:	f1c6 0301 	rsblt	r3, r6, #1
 8003b5c:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 8003b60:	bfb4      	ite	lt
 8003b62:	222d      	movlt	r2, #45	; 0x2d
 8003b64:	222b      	movge	r2, #43	; 0x2b
 8003b66:	2b09      	cmp	r3, #9
 8003b68:	f88d 2089 	strb.w	r2, [sp, #137]	; 0x89
 8003b6c:	f340 80c8 	ble.w	8003d00 <_vfprintf_r+0x8d0>
 8003b70:	f10d 0297 	add.w	r2, sp, #151	; 0x97
 8003b74:	250a      	movs	r5, #10
 8003b76:	fb93 f0f5 	sdiv	r0, r3, r5
 8003b7a:	fb05 3310 	mls	r3, r5, r0, r3
 8003b7e:	3330      	adds	r3, #48	; 0x30
 8003b80:	2809      	cmp	r0, #9
 8003b82:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003b86:	f102 31ff 	add.w	r1, r2, #4294967295
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	f300 80b1 	bgt.w	8003cf2 <_vfprintf_r+0x8c2>
 8003b90:	3330      	adds	r3, #48	; 0x30
 8003b92:	f801 3c01 	strb.w	r3, [r1, #-1]
 8003b96:	3a02      	subs	r2, #2
 8003b98:	f10d 038a 	add.w	r3, sp, #138	; 0x8a
 8003b9c:	f10d 0097 	add.w	r0, sp, #151	; 0x97
 8003ba0:	4282      	cmp	r2, r0
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	f0c0 80a7 	bcc.w	8003cf6 <_vfprintf_r+0x8c6>
 8003ba8:	9a04      	ldr	r2, [sp, #16]
 8003baa:	ab22      	add	r3, sp, #136	; 0x88
 8003bac:	1acb      	subs	r3, r1, r3
 8003bae:	2a01      	cmp	r2, #1
 8003bb0:	9317      	str	r3, [sp, #92]	; 0x5c
 8003bb2:	eb03 0502 	add.w	r5, r3, r2
 8003bb6:	dc02      	bgt.n	8003bbe <_vfprintf_r+0x78e>
 8003bb8:	f01a 0f01 	tst.w	sl, #1
 8003bbc:	d001      	beq.n	8003bc2 <_vfprintf_r+0x792>
 8003bbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003bc0:	441d      	add	r5, r3
 8003bc2:	f42a 6380 	bic.w	r3, sl, #1024	; 0x400
 8003bc6:	2700      	movs	r7, #0
 8003bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bcc:	9310      	str	r3, [sp, #64]	; 0x40
 8003bce:	9707      	str	r7, [sp, #28]
 8003bd0:	463e      	mov	r6, r7
 8003bd2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 8317 	beq.w	8004208 <_vfprintf_r+0xdd8>
 8003bda:	232d      	movs	r3, #45	; 0x2d
 8003bdc:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 8003be0:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8003be4:	2300      	movs	r3, #0
 8003be6:	9310      	str	r3, [sp, #64]	; 0x40
 8003be8:	e15f      	b.n	8003eaa <_vfprintf_r+0xa7a>
 8003bea:	bf00      	nop
 8003bec:	7fefffff 	.word	0x7fefffff
 8003bf0:	080083f0 	.word	0x080083f0
 8003bf4:	080083ec 	.word	0x080083ec
 8003bf8:	080083f8 	.word	0x080083f8
 8003bfc:	080083f4 	.word	0x080083f4
 8003c00:	0800840d 	.word	0x0800840d
 8003c04:	080083fc 	.word	0x080083fc
 8003c08:	40300000 	.word	0x40300000
 8003c0c:	3fe00000 	.word	0x3fe00000
 8003c10:	9003      	str	r0, [sp, #12]
 8003c12:	e702      	b.n	8003a1a <_vfprintf_r+0x5ea>
 8003c14:	9003      	str	r0, [sp, #12]
 8003c16:	2506      	movs	r5, #6
 8003c18:	e6ff      	b.n	8003a1a <_vfprintf_r+0x5ea>
 8003c1a:	9503      	str	r5, [sp, #12]
 8003c1c:	2501      	movs	r5, #1
 8003c1e:	e6fc      	b.n	8003a1a <_vfprintf_r+0x5ea>
 8003c20:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8003c24:	2300      	movs	r3, #0
 8003c26:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8003c2a:	e704      	b.n	8003a36 <_vfprintf_r+0x606>
 8003c2c:	f802 0c01 	strb.w	r0, [r2, #-1]
 8003c30:	e760      	b.n	8003af4 <_vfprintf_r+0x6c4>
 8003c32:	f803 1b01 	strb.w	r1, [r3], #1
 8003c36:	1af2      	subs	r2, r6, r3
 8003c38:	2a00      	cmp	r2, #0
 8003c3a:	dafa      	bge.n	8003c32 <_vfprintf_r+0x802>
 8003c3c:	e76b      	b.n	8003b16 <_vfprintf_r+0x6e6>
 8003c3e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8003c40:	4633      	mov	r3, r6
 8003c42:	2130      	movs	r1, #48	; 0x30
 8003c44:	4416      	add	r6, r2
 8003c46:	e7f6      	b.n	8003c36 <_vfprintf_r+0x806>
 8003c48:	9b07      	ldr	r3, [sp, #28]
 8003c4a:	2b46      	cmp	r3, #70	; 0x46
 8003c4c:	d004      	beq.n	8003c58 <_vfprintf_r+0x828>
 8003c4e:	2b45      	cmp	r3, #69	; 0x45
 8003c50:	d13a      	bne.n	8003cc8 <_vfprintf_r+0x898>
 8003c52:	1c6e      	adds	r6, r5, #1
 8003c54:	2102      	movs	r1, #2
 8003c56:	e001      	b.n	8003c5c <_vfprintf_r+0x82c>
 8003c58:	462e      	mov	r6, r5
 8003c5a:	2103      	movs	r1, #3
 8003c5c:	ab24      	add	r3, sp, #144	; 0x90
 8003c5e:	9301      	str	r3, [sp, #4]
 8003c60:	ab21      	add	r3, sp, #132	; 0x84
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	4632      	mov	r2, r6
 8003c66:	ab20      	add	r3, sp, #128	; 0x80
 8003c68:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8003c6c:	4658      	mov	r0, fp
 8003c6e:	f000 ff87 	bl	8004b80 <_dtoa_r>
 8003c72:	9b07      	ldr	r3, [sp, #28]
 8003c74:	2b47      	cmp	r3, #71	; 0x47
 8003c76:	4681      	mov	r9, r0
 8003c78:	d102      	bne.n	8003c80 <_vfprintf_r+0x850>
 8003c7a:	f01a 0f01 	tst.w	sl, #1
 8003c7e:	d026      	beq.n	8003cce <_vfprintf_r+0x89e>
 8003c80:	9b07      	ldr	r3, [sp, #28]
 8003c82:	2b46      	cmp	r3, #70	; 0x46
 8003c84:	eb09 0706 	add.w	r7, r9, r6
 8003c88:	d10f      	bne.n	8003caa <_vfprintf_r+0x87a>
 8003c8a:	f899 3000 	ldrb.w	r3, [r9]
 8003c8e:	2b30      	cmp	r3, #48	; 0x30
 8003c90:	d109      	bne.n	8003ca6 <_vfprintf_r+0x876>
 8003c92:	2200      	movs	r2, #0
 8003c94:	2300      	movs	r3, #0
 8003c96:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8003c9a:	f7fc ff35 	bl	8000b08 <__aeabi_dcmpeq>
 8003c9e:	b910      	cbnz	r0, 8003ca6 <_vfprintf_r+0x876>
 8003ca0:	f1c6 0601 	rsb	r6, r6, #1
 8003ca4:	9620      	str	r6, [sp, #128]	; 0x80
 8003ca6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003ca8:	441f      	add	r7, r3
 8003caa:	2200      	movs	r2, #0
 8003cac:	2300      	movs	r3, #0
 8003cae:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8003cb2:	f7fc ff29 	bl	8000b08 <__aeabi_dcmpeq>
 8003cb6:	b948      	cbnz	r0, 8003ccc <_vfprintf_r+0x89c>
 8003cb8:	2230      	movs	r2, #48	; 0x30
 8003cba:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8003cbc:	429f      	cmp	r7, r3
 8003cbe:	d906      	bls.n	8003cce <_vfprintf_r+0x89e>
 8003cc0:	1c59      	adds	r1, r3, #1
 8003cc2:	9124      	str	r1, [sp, #144]	; 0x90
 8003cc4:	701a      	strb	r2, [r3, #0]
 8003cc6:	e7f8      	b.n	8003cba <_vfprintf_r+0x88a>
 8003cc8:	462e      	mov	r6, r5
 8003cca:	e7c3      	b.n	8003c54 <_vfprintf_r+0x824>
 8003ccc:	9724      	str	r7, [sp, #144]	; 0x90
 8003cce:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8003cd0:	e721      	b.n	8003b16 <_vfprintf_r+0x6e6>
 8003cd2:	9b07      	ldr	r3, [sp, #28]
 8003cd4:	2b46      	cmp	r3, #70	; 0x46
 8003cd6:	f47f af2e 	bne.w	8003b36 <_vfprintf_r+0x706>
 8003cda:	2e00      	cmp	r6, #0
 8003cdc:	dd1d      	ble.n	8003d1a <_vfprintf_r+0x8ea>
 8003cde:	b915      	cbnz	r5, 8003ce6 <_vfprintf_r+0x8b6>
 8003ce0:	f01a 0f01 	tst.w	sl, #1
 8003ce4:	d034      	beq.n	8003d50 <_vfprintf_r+0x920>
 8003ce6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003ce8:	18f3      	adds	r3, r6, r3
 8003cea:	441d      	add	r5, r3
 8003cec:	2366      	movs	r3, #102	; 0x66
 8003cee:	9306      	str	r3, [sp, #24]
 8003cf0:	e033      	b.n	8003d5a <_vfprintf_r+0x92a>
 8003cf2:	460a      	mov	r2, r1
 8003cf4:	e73f      	b.n	8003b76 <_vfprintf_r+0x746>
 8003cf6:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003cfa:	f803 1b01 	strb.w	r1, [r3], #1
 8003cfe:	e74f      	b.n	8003ba0 <_vfprintf_r+0x770>
 8003d00:	b941      	cbnz	r1, 8003d14 <_vfprintf_r+0x8e4>
 8003d02:	2230      	movs	r2, #48	; 0x30
 8003d04:	f88d 208a 	strb.w	r2, [sp, #138]	; 0x8a
 8003d08:	f10d 028b 	add.w	r2, sp, #139	; 0x8b
 8003d0c:	3330      	adds	r3, #48	; 0x30
 8003d0e:	1c51      	adds	r1, r2, #1
 8003d10:	7013      	strb	r3, [r2, #0]
 8003d12:	e749      	b.n	8003ba8 <_vfprintf_r+0x778>
 8003d14:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 8003d18:	e7f8      	b.n	8003d0c <_vfprintf_r+0x8dc>
 8003d1a:	b915      	cbnz	r5, 8003d22 <_vfprintf_r+0x8f2>
 8003d1c:	f01a 0f01 	tst.w	sl, #1
 8003d20:	d018      	beq.n	8003d54 <_vfprintf_r+0x924>
 8003d22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003d24:	3301      	adds	r3, #1
 8003d26:	e7e0      	b.n	8003cea <_vfprintf_r+0x8ba>
 8003d28:	9b04      	ldr	r3, [sp, #16]
 8003d2a:	42b3      	cmp	r3, r6
 8003d2c:	dc06      	bgt.n	8003d3c <_vfprintf_r+0x90c>
 8003d2e:	f01a 0f01 	tst.w	sl, #1
 8003d32:	d025      	beq.n	8003d80 <_vfprintf_r+0x950>
 8003d34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003d36:	18f5      	adds	r5, r6, r3
 8003d38:	2367      	movs	r3, #103	; 0x67
 8003d3a:	e7d8      	b.n	8003cee <_vfprintf_r+0x8be>
 8003d3c:	9b04      	ldr	r3, [sp, #16]
 8003d3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003d40:	2e00      	cmp	r6, #0
 8003d42:	eb03 0502 	add.w	r5, r3, r2
 8003d46:	dcf7      	bgt.n	8003d38 <_vfprintf_r+0x908>
 8003d48:	f1c6 0301 	rsb	r3, r6, #1
 8003d4c:	441d      	add	r5, r3
 8003d4e:	e7f3      	b.n	8003d38 <_vfprintf_r+0x908>
 8003d50:	4635      	mov	r5, r6
 8003d52:	e7cb      	b.n	8003cec <_vfprintf_r+0x8bc>
 8003d54:	2366      	movs	r3, #102	; 0x66
 8003d56:	9306      	str	r3, [sp, #24]
 8003d58:	2501      	movs	r5, #1
 8003d5a:	f41a 6380 	ands.w	r3, sl, #1024	; 0x400
 8003d5e:	9307      	str	r3, [sp, #28]
 8003d60:	d01f      	beq.n	8003da2 <_vfprintf_r+0x972>
 8003d62:	2700      	movs	r7, #0
 8003d64:	2e00      	cmp	r6, #0
 8003d66:	9707      	str	r7, [sp, #28]
 8003d68:	f77f af33 	ble.w	8003bd2 <_vfprintf_r+0x7a2>
 8003d6c:	9b08      	ldr	r3, [sp, #32]
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	2bff      	cmp	r3, #255	; 0xff
 8003d72:	d107      	bne.n	8003d84 <_vfprintf_r+0x954>
 8003d74:	9b07      	ldr	r3, [sp, #28]
 8003d76:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003d78:	443b      	add	r3, r7
 8003d7a:	fb02 5503 	mla	r5, r2, r3, r5
 8003d7e:	e728      	b.n	8003bd2 <_vfprintf_r+0x7a2>
 8003d80:	4635      	mov	r5, r6
 8003d82:	e7d9      	b.n	8003d38 <_vfprintf_r+0x908>
 8003d84:	42b3      	cmp	r3, r6
 8003d86:	daf5      	bge.n	8003d74 <_vfprintf_r+0x944>
 8003d88:	1af6      	subs	r6, r6, r3
 8003d8a:	9b08      	ldr	r3, [sp, #32]
 8003d8c:	785b      	ldrb	r3, [r3, #1]
 8003d8e:	b133      	cbz	r3, 8003d9e <_vfprintf_r+0x96e>
 8003d90:	9b07      	ldr	r3, [sp, #28]
 8003d92:	3301      	adds	r3, #1
 8003d94:	9307      	str	r3, [sp, #28]
 8003d96:	9b08      	ldr	r3, [sp, #32]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	9308      	str	r3, [sp, #32]
 8003d9c:	e7e6      	b.n	8003d6c <_vfprintf_r+0x93c>
 8003d9e:	3701      	adds	r7, #1
 8003da0:	e7e4      	b.n	8003d6c <_vfprintf_r+0x93c>
 8003da2:	9f07      	ldr	r7, [sp, #28]
 8003da4:	e715      	b.n	8003bd2 <_vfprintf_r+0x7a2>
 8003da6:	4632      	mov	r2, r6
 8003da8:	f01a 0f20 	tst.w	sl, #32
 8003dac:	f852 3b04 	ldr.w	r3, [r2], #4
 8003db0:	9209      	str	r2, [sp, #36]	; 0x24
 8003db2:	d009      	beq.n	8003dc8 <_vfprintf_r+0x998>
 8003db4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003db6:	4610      	mov	r0, r2
 8003db8:	17d1      	asrs	r1, r2, #31
 8003dba:	e9c3 0100 	strd	r0, r1, [r3]
 8003dbe:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8003dc0:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8003dc4:	f7ff bbb2 	b.w	800352c <_vfprintf_r+0xfc>
 8003dc8:	f01a 0f10 	tst.w	sl, #16
 8003dcc:	d002      	beq.n	8003dd4 <_vfprintf_r+0x9a4>
 8003dce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003dd0:	601a      	str	r2, [r3, #0]
 8003dd2:	e7f4      	b.n	8003dbe <_vfprintf_r+0x98e>
 8003dd4:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8003dd8:	d002      	beq.n	8003de0 <_vfprintf_r+0x9b0>
 8003dda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003ddc:	801a      	strh	r2, [r3, #0]
 8003dde:	e7ee      	b.n	8003dbe <_vfprintf_r+0x98e>
 8003de0:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8003de4:	d0f3      	beq.n	8003dce <_vfprintf_r+0x99e>
 8003de6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003de8:	701a      	strb	r2, [r3, #0]
 8003dea:	e7e8      	b.n	8003dbe <_vfprintf_r+0x98e>
 8003dec:	f04a 0a10 	orr.w	sl, sl, #16
 8003df0:	f01a 0f20 	tst.w	sl, #32
 8003df4:	d01e      	beq.n	8003e34 <_vfprintf_r+0xa04>
 8003df6:	3607      	adds	r6, #7
 8003df8:	f026 0607 	bic.w	r6, r6, #7
 8003dfc:	f106 0308 	add.w	r3, r6, #8
 8003e00:	e9d6 6700 	ldrd	r6, r7, [r6]
 8003e04:	9309      	str	r3, [sp, #36]	; 0x24
 8003e06:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 8003e12:	1c6a      	adds	r2, r5, #1
 8003e14:	f000 815c 	beq.w	80040d0 <_vfprintf_r+0xca0>
 8003e18:	4652      	mov	r2, sl
 8003e1a:	ea56 0107 	orrs.w	r1, r6, r7
 8003e1e:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 8003e22:	f040 8155 	bne.w	80040d0 <_vfprintf_r+0xca0>
 8003e26:	2d00      	cmp	r5, #0
 8003e28:	f000 81d8 	beq.w	80041dc <_vfprintf_r+0xdac>
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	f040 8152 	bne.w	80040d6 <_vfprintf_r+0xca6>
 8003e32:	e54e      	b.n	80038d2 <_vfprintf_r+0x4a2>
 8003e34:	1d33      	adds	r3, r6, #4
 8003e36:	f01a 0f10 	tst.w	sl, #16
 8003e3a:	9309      	str	r3, [sp, #36]	; 0x24
 8003e3c:	d001      	beq.n	8003e42 <_vfprintf_r+0xa12>
 8003e3e:	6836      	ldr	r6, [r6, #0]
 8003e40:	e003      	b.n	8003e4a <_vfprintf_r+0xa1a>
 8003e42:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8003e46:	d002      	beq.n	8003e4e <_vfprintf_r+0xa1e>
 8003e48:	8836      	ldrh	r6, [r6, #0]
 8003e4a:	2700      	movs	r7, #0
 8003e4c:	e7db      	b.n	8003e06 <_vfprintf_r+0x9d6>
 8003e4e:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8003e52:	d0f4      	beq.n	8003e3e <_vfprintf_r+0xa0e>
 8003e54:	7836      	ldrb	r6, [r6, #0]
 8003e56:	e7f8      	b.n	8003e4a <_vfprintf_r+0xa1a>
 8003e58:	1d33      	adds	r3, r6, #4
 8003e5a:	9309      	str	r3, [sp, #36]	; 0x24
 8003e5c:	f647 0330 	movw	r3, #30768	; 0x7830
 8003e60:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
 8003e64:	2278      	movs	r2, #120	; 0x78
 8003e66:	4bb0      	ldr	r3, [pc, #704]	; (8004128 <_vfprintf_r+0xcf8>)
 8003e68:	9318      	str	r3, [sp, #96]	; 0x60
 8003e6a:	6836      	ldr	r6, [r6, #0]
 8003e6c:	9206      	str	r2, [sp, #24]
 8003e6e:	2700      	movs	r7, #0
 8003e70:	f04a 0a02 	orr.w	sl, sl, #2
 8003e74:	2302      	movs	r3, #2
 8003e76:	e7c9      	b.n	8003e0c <_vfprintf_r+0x9dc>
 8003e78:	1d33      	adds	r3, r6, #4
 8003e7a:	f8d6 9000 	ldr.w	r9, [r6]
 8003e7e:	9309      	str	r3, [sp, #36]	; 0x24
 8003e80:	2600      	movs	r6, #0
 8003e82:	1c69      	adds	r1, r5, #1
 8003e84:	f88d 607b 	strb.w	r6, [sp, #123]	; 0x7b
 8003e88:	f000 80e1 	beq.w	800404e <_vfprintf_r+0xc1e>
 8003e8c:	462a      	mov	r2, r5
 8003e8e:	4631      	mov	r1, r6
 8003e90:	4648      	mov	r0, r9
 8003e92:	f7fc f9bd 	bl	8000210 <memchr>
 8003e96:	9003      	str	r0, [sp, #12]
 8003e98:	2800      	cmp	r0, #0
 8003e9a:	f000 81b9 	beq.w	8004210 <_vfprintf_r+0xde0>
 8003e9e:	eba0 0509 	sub.w	r5, r0, r9
 8003ea2:	9603      	str	r6, [sp, #12]
 8003ea4:	9610      	str	r6, [sp, #64]	; 0x40
 8003ea6:	4637      	mov	r7, r6
 8003ea8:	9607      	str	r6, [sp, #28]
 8003eaa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003eac:	42ab      	cmp	r3, r5
 8003eae:	bfb8      	it	lt
 8003eb0:	462b      	movlt	r3, r5
 8003eb2:	9311      	str	r3, [sp, #68]	; 0x44
 8003eb4:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8003eb8:	b113      	cbz	r3, 8003ec0 <_vfprintf_r+0xa90>
 8003eba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	9311      	str	r3, [sp, #68]	; 0x44
 8003ec0:	f01a 0302 	ands.w	r3, sl, #2
 8003ec4:	931c      	str	r3, [sp, #112]	; 0x70
 8003ec6:	bf1e      	ittt	ne
 8003ec8:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 8003eca:	3302      	addne	r3, #2
 8003ecc:	9311      	strne	r3, [sp, #68]	; 0x44
 8003ece:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 8003ed2:	931d      	str	r3, [sp, #116]	; 0x74
 8003ed4:	d122      	bne.n	8003f1c <_vfprintf_r+0xaec>
 8003ed6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003ed8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8003eda:	1a9b      	subs	r3, r3, r2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	9313      	str	r3, [sp, #76]	; 0x4c
 8003ee0:	dd1c      	ble.n	8003f1c <_vfprintf_r+0xaec>
 8003ee2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8003ee4:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8003ee8:	2810      	cmp	r0, #16
 8003eea:	4890      	ldr	r0, [pc, #576]	; (800412c <_vfprintf_r+0xcfc>)
 8003eec:	6020      	str	r0, [r4, #0]
 8003eee:	f102 0201 	add.w	r2, r2, #1
 8003ef2:	f104 0108 	add.w	r1, r4, #8
 8003ef6:	f300 818e 	bgt.w	8004216 <_vfprintf_r+0xde6>
 8003efa:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8003efc:	6060      	str	r0, [r4, #4]
 8003efe:	4403      	add	r3, r0
 8003f00:	2a07      	cmp	r2, #7
 8003f02:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8003f06:	f340 819b 	ble.w	8004240 <_vfprintf_r+0xe10>
 8003f0a:	aa26      	add	r2, sp, #152	; 0x98
 8003f0c:	4641      	mov	r1, r8
 8003f0e:	4658      	mov	r0, fp
 8003f10:	f002 fc69 	bl	80067e6 <__sprint_r>
 8003f14:	2800      	cmp	r0, #0
 8003f16:	f040 84c7 	bne.w	80048a8 <_vfprintf_r+0x1478>
 8003f1a:	ac29      	add	r4, sp, #164	; 0xa4
 8003f1c:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8003f20:	b173      	cbz	r3, 8003f40 <_vfprintf_r+0xb10>
 8003f22:	f10d 037b 	add.w	r3, sp, #123	; 0x7b
 8003f26:	6023      	str	r3, [r4, #0]
 8003f28:	2301      	movs	r3, #1
 8003f2a:	6063      	str	r3, [r4, #4]
 8003f2c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003f2e:	3301      	adds	r3, #1
 8003f30:	9328      	str	r3, [sp, #160]	; 0xa0
 8003f32:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8003f34:	3301      	adds	r3, #1
 8003f36:	2b07      	cmp	r3, #7
 8003f38:	9327      	str	r3, [sp, #156]	; 0x9c
 8003f3a:	f300 8183 	bgt.w	8004244 <_vfprintf_r+0xe14>
 8003f3e:	3408      	adds	r4, #8
 8003f40:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8003f42:	b16b      	cbz	r3, 8003f60 <_vfprintf_r+0xb30>
 8003f44:	ab1f      	add	r3, sp, #124	; 0x7c
 8003f46:	6023      	str	r3, [r4, #0]
 8003f48:	2302      	movs	r3, #2
 8003f4a:	6063      	str	r3, [r4, #4]
 8003f4c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003f4e:	3302      	adds	r3, #2
 8003f50:	9328      	str	r3, [sp, #160]	; 0xa0
 8003f52:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8003f54:	3301      	adds	r3, #1
 8003f56:	2b07      	cmp	r3, #7
 8003f58:	9327      	str	r3, [sp, #156]	; 0x9c
 8003f5a:	f300 817d 	bgt.w	8004258 <_vfprintf_r+0xe28>
 8003f5e:	3408      	adds	r4, #8
 8003f60:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003f62:	2b80      	cmp	r3, #128	; 0x80
 8003f64:	d122      	bne.n	8003fac <_vfprintf_r+0xb7c>
 8003f66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003f68:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8003f6a:	1a9b      	subs	r3, r3, r2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	9313      	str	r3, [sp, #76]	; 0x4c
 8003f70:	dd1c      	ble.n	8003fac <_vfprintf_r+0xb7c>
 8003f72:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8003f74:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8003f78:	2810      	cmp	r0, #16
 8003f7a:	486d      	ldr	r0, [pc, #436]	; (8004130 <_vfprintf_r+0xd00>)
 8003f7c:	6020      	str	r0, [r4, #0]
 8003f7e:	f102 0201 	add.w	r2, r2, #1
 8003f82:	f104 0108 	add.w	r1, r4, #8
 8003f86:	f300 8171 	bgt.w	800426c <_vfprintf_r+0xe3c>
 8003f8a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8003f8c:	6060      	str	r0, [r4, #4]
 8003f8e:	4403      	add	r3, r0
 8003f90:	2a07      	cmp	r2, #7
 8003f92:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8003f96:	f340 817e 	ble.w	8004296 <_vfprintf_r+0xe66>
 8003f9a:	aa26      	add	r2, sp, #152	; 0x98
 8003f9c:	4641      	mov	r1, r8
 8003f9e:	4658      	mov	r0, fp
 8003fa0:	f002 fc21 	bl	80067e6 <__sprint_r>
 8003fa4:	2800      	cmp	r0, #0
 8003fa6:	f040 847f 	bne.w	80048a8 <_vfprintf_r+0x1478>
 8003faa:	ac29      	add	r4, sp, #164	; 0xa4
 8003fac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003fae:	1b5b      	subs	r3, r3, r5
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	9310      	str	r3, [sp, #64]	; 0x40
 8003fb4:	dd1c      	ble.n	8003ff0 <_vfprintf_r+0xbc0>
 8003fb6:	9810      	ldr	r0, [sp, #64]	; 0x40
 8003fb8:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8003fbc:	2810      	cmp	r0, #16
 8003fbe:	485c      	ldr	r0, [pc, #368]	; (8004130 <_vfprintf_r+0xd00>)
 8003fc0:	6020      	str	r0, [r4, #0]
 8003fc2:	f102 0201 	add.w	r2, r2, #1
 8003fc6:	f104 0108 	add.w	r1, r4, #8
 8003fca:	f300 8166 	bgt.w	800429a <_vfprintf_r+0xe6a>
 8003fce:	9810      	ldr	r0, [sp, #64]	; 0x40
 8003fd0:	6060      	str	r0, [r4, #4]
 8003fd2:	4403      	add	r3, r0
 8003fd4:	2a07      	cmp	r2, #7
 8003fd6:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8003fda:	f340 8173 	ble.w	80042c4 <_vfprintf_r+0xe94>
 8003fde:	aa26      	add	r2, sp, #152	; 0x98
 8003fe0:	4641      	mov	r1, r8
 8003fe2:	4658      	mov	r0, fp
 8003fe4:	f002 fbff 	bl	80067e6 <__sprint_r>
 8003fe8:	2800      	cmp	r0, #0
 8003fea:	f040 845d 	bne.w	80048a8 <_vfprintf_r+0x1478>
 8003fee:	ac29      	add	r4, sp, #164	; 0xa4
 8003ff0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003ff2:	9310      	str	r3, [sp, #64]	; 0x40
 8003ff4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8003ff8:	f040 8166 	bne.w	80042c8 <_vfprintf_r+0xe98>
 8003ffc:	e9c4 9500 	strd	r9, r5, [r4]
 8004000:	441d      	add	r5, r3
 8004002:	9528      	str	r5, [sp, #160]	; 0xa0
 8004004:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8004006:	3301      	adds	r3, #1
 8004008:	2b07      	cmp	r3, #7
 800400a:	9327      	str	r3, [sp, #156]	; 0x9c
 800400c:	f300 81a2 	bgt.w	8004354 <_vfprintf_r+0xf24>
 8004010:	3408      	adds	r4, #8
 8004012:	f01a 0f04 	tst.w	sl, #4
 8004016:	f040 8429 	bne.w	800486c <_vfprintf_r+0x143c>
 800401a:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 800401e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004020:	428a      	cmp	r2, r1
 8004022:	bfac      	ite	ge
 8004024:	189b      	addge	r3, r3, r2
 8004026:	185b      	addlt	r3, r3, r1
 8004028:	930e      	str	r3, [sp, #56]	; 0x38
 800402a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800402c:	b13b      	cbz	r3, 800403e <_vfprintf_r+0xc0e>
 800402e:	aa26      	add	r2, sp, #152	; 0x98
 8004030:	4641      	mov	r1, r8
 8004032:	4658      	mov	r0, fp
 8004034:	f002 fbd7 	bl	80067e6 <__sprint_r>
 8004038:	2800      	cmp	r0, #0
 800403a:	f040 8435 	bne.w	80048a8 <_vfprintf_r+0x1478>
 800403e:	2300      	movs	r3, #0
 8004040:	9327      	str	r3, [sp, #156]	; 0x9c
 8004042:	9b03      	ldr	r3, [sp, #12]
 8004044:	2b00      	cmp	r3, #0
 8004046:	f040 844b 	bne.w	80048e0 <_vfprintf_r+0x14b0>
 800404a:	ac29      	add	r4, sp, #164	; 0xa4
 800404c:	e6b7      	b.n	8003dbe <_vfprintf_r+0x98e>
 800404e:	4648      	mov	r0, r9
 8004050:	f7fc f92e 	bl	80002b0 <strlen>
 8004054:	9603      	str	r6, [sp, #12]
 8004056:	4605      	mov	r5, r0
 8004058:	4633      	mov	r3, r6
 800405a:	e48a      	b.n	8003972 <_vfprintf_r+0x542>
 800405c:	f04a 0a10 	orr.w	sl, sl, #16
 8004060:	f01a 0f20 	tst.w	sl, #32
 8004064:	d009      	beq.n	800407a <_vfprintf_r+0xc4a>
 8004066:	3607      	adds	r6, #7
 8004068:	f026 0607 	bic.w	r6, r6, #7
 800406c:	f106 0308 	add.w	r3, r6, #8
 8004070:	e9d6 6700 	ldrd	r6, r7, [r6]
 8004074:	9309      	str	r3, [sp, #36]	; 0x24
 8004076:	2301      	movs	r3, #1
 8004078:	e6c8      	b.n	8003e0c <_vfprintf_r+0x9dc>
 800407a:	1d33      	adds	r3, r6, #4
 800407c:	f01a 0f10 	tst.w	sl, #16
 8004080:	9309      	str	r3, [sp, #36]	; 0x24
 8004082:	d001      	beq.n	8004088 <_vfprintf_r+0xc58>
 8004084:	6836      	ldr	r6, [r6, #0]
 8004086:	e003      	b.n	8004090 <_vfprintf_r+0xc60>
 8004088:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800408c:	d002      	beq.n	8004094 <_vfprintf_r+0xc64>
 800408e:	8836      	ldrh	r6, [r6, #0]
 8004090:	2700      	movs	r7, #0
 8004092:	e7f0      	b.n	8004076 <_vfprintf_r+0xc46>
 8004094:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8004098:	d0f4      	beq.n	8004084 <_vfprintf_r+0xc54>
 800409a:	7836      	ldrb	r6, [r6, #0]
 800409c:	e7f8      	b.n	8004090 <_vfprintf_r+0xc60>
 800409e:	4b22      	ldr	r3, [pc, #136]	; (8004128 <_vfprintf_r+0xcf8>)
 80040a0:	f7ff bb3f 	b.w	8003722 <_vfprintf_r+0x2f2>
 80040a4:	1d33      	adds	r3, r6, #4
 80040a6:	f01a 0f10 	tst.w	sl, #16
 80040aa:	9309      	str	r3, [sp, #36]	; 0x24
 80040ac:	d001      	beq.n	80040b2 <_vfprintf_r+0xc82>
 80040ae:	6836      	ldr	r6, [r6, #0]
 80040b0:	e003      	b.n	80040ba <_vfprintf_r+0xc8a>
 80040b2:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80040b6:	d003      	beq.n	80040c0 <_vfprintf_r+0xc90>
 80040b8:	8836      	ldrh	r6, [r6, #0]
 80040ba:	2700      	movs	r7, #0
 80040bc:	f7ff bb3e 	b.w	800373c <_vfprintf_r+0x30c>
 80040c0:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80040c4:	d0f3      	beq.n	80040ae <_vfprintf_r+0xc7e>
 80040c6:	7836      	ldrb	r6, [r6, #0]
 80040c8:	e7f7      	b.n	80040ba <_vfprintf_r+0xc8a>
 80040ca:	4652      	mov	r2, sl
 80040cc:	2301      	movs	r3, #1
 80040ce:	e6a4      	b.n	8003e1a <_vfprintf_r+0x9ea>
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	f43f abf9 	beq.w	80038c8 <_vfprintf_r+0x498>
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d06e      	beq.n	80041b8 <_vfprintf_r+0xd88>
 80040da:	ab52      	add	r3, sp, #328	; 0x148
 80040dc:	08f1      	lsrs	r1, r6, #3
 80040de:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 80040e2:	08f8      	lsrs	r0, r7, #3
 80040e4:	f006 0207 	and.w	r2, r6, #7
 80040e8:	4607      	mov	r7, r0
 80040ea:	460e      	mov	r6, r1
 80040ec:	3230      	adds	r2, #48	; 0x30
 80040ee:	ea56 0107 	orrs.w	r1, r6, r7
 80040f2:	f103 39ff 	add.w	r9, r3, #4294967295
 80040f6:	f803 2c01 	strb.w	r2, [r3, #-1]
 80040fa:	d113      	bne.n	8004124 <_vfprintf_r+0xcf4>
 80040fc:	f01a 0f01 	tst.w	sl, #1
 8004100:	d006      	beq.n	8004110 <_vfprintf_r+0xce0>
 8004102:	2a30      	cmp	r2, #48	; 0x30
 8004104:	d004      	beq.n	8004110 <_vfprintf_r+0xce0>
 8004106:	2230      	movs	r2, #48	; 0x30
 8004108:	f809 2c01 	strb.w	r2, [r9, #-1]
 800410c:	f1a3 0902 	sub.w	r9, r3, #2
 8004110:	ab52      	add	r3, sp, #328	; 0x148
 8004112:	9510      	str	r5, [sp, #64]	; 0x40
 8004114:	eba3 0509 	sub.w	r5, r3, r9
 8004118:	2300      	movs	r3, #0
 800411a:	9303      	str	r3, [sp, #12]
 800411c:	461f      	mov	r7, r3
 800411e:	9307      	str	r3, [sp, #28]
 8004120:	461e      	mov	r6, r3
 8004122:	e6c2      	b.n	8003eaa <_vfprintf_r+0xa7a>
 8004124:	464b      	mov	r3, r9
 8004126:	e7d9      	b.n	80040dc <_vfprintf_r+0xcac>
 8004128:	080083fc 	.word	0x080083fc
 800412c:	08008420 	.word	0x08008420
 8004130:	08008430 	.word	0x08008430
 8004134:	2300      	movs	r3, #0
 8004136:	9304      	str	r3, [sp, #16]
 8004138:	ab52      	add	r3, sp, #328	; 0x148
 800413a:	9303      	str	r3, [sp, #12]
 800413c:	f40a 6380 	and.w	r3, sl, #1024	; 0x400
 8004140:	9307      	str	r3, [sp, #28]
 8004142:	9b03      	ldr	r3, [sp, #12]
 8004144:	220a      	movs	r2, #10
 8004146:	f103 39ff 	add.w	r9, r3, #4294967295
 800414a:	4630      	mov	r0, r6
 800414c:	2300      	movs	r3, #0
 800414e:	4639      	mov	r1, r7
 8004150:	f7fc fd4a 	bl	8000be8 <__aeabi_uldivmod>
 8004154:	9b03      	ldr	r3, [sp, #12]
 8004156:	3230      	adds	r2, #48	; 0x30
 8004158:	f803 2c01 	strb.w	r2, [r3, #-1]
 800415c:	9b04      	ldr	r3, [sp, #16]
 800415e:	3301      	adds	r3, #1
 8004160:	9304      	str	r3, [sp, #16]
 8004162:	9b07      	ldr	r3, [sp, #28]
 8004164:	b1d3      	cbz	r3, 800419c <_vfprintf_r+0xd6c>
 8004166:	9b08      	ldr	r3, [sp, #32]
 8004168:	9a04      	ldr	r2, [sp, #16]
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	429a      	cmp	r2, r3
 800416e:	d115      	bne.n	800419c <_vfprintf_r+0xd6c>
 8004170:	2aff      	cmp	r2, #255	; 0xff
 8004172:	d013      	beq.n	800419c <_vfprintf_r+0xd6c>
 8004174:	2f00      	cmp	r7, #0
 8004176:	bf08      	it	eq
 8004178:	2e0a      	cmpeq	r6, #10
 800417a:	d30f      	bcc.n	800419c <_vfprintf_r+0xd6c>
 800417c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800417e:	9919      	ldr	r1, [sp, #100]	; 0x64
 8004180:	eba9 0903 	sub.w	r9, r9, r3
 8004184:	461a      	mov	r2, r3
 8004186:	4648      	mov	r0, r9
 8004188:	f002 fb0b 	bl	80067a2 <strncpy>
 800418c:	9b08      	ldr	r3, [sp, #32]
 800418e:	785b      	ldrb	r3, [r3, #1]
 8004190:	b11b      	cbz	r3, 800419a <_vfprintf_r+0xd6a>
 8004192:	9b08      	ldr	r3, [sp, #32]
 8004194:	3301      	adds	r3, #1
 8004196:	9308      	str	r3, [sp, #32]
 8004198:	2300      	movs	r3, #0
 800419a:	9304      	str	r3, [sp, #16]
 800419c:	2300      	movs	r3, #0
 800419e:	4630      	mov	r0, r6
 80041a0:	4639      	mov	r1, r7
 80041a2:	220a      	movs	r2, #10
 80041a4:	f7fc fd20 	bl	8000be8 <__aeabi_uldivmod>
 80041a8:	4606      	mov	r6, r0
 80041aa:	460f      	mov	r7, r1
 80041ac:	ea56 0307 	orrs.w	r3, r6, r7
 80041b0:	d0ae      	beq.n	8004110 <_vfprintf_r+0xce0>
 80041b2:	f8cd 900c 	str.w	r9, [sp, #12]
 80041b6:	e7c4      	b.n	8004142 <_vfprintf_r+0xd12>
 80041b8:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
 80041bc:	f006 030f 	and.w	r3, r6, #15
 80041c0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80041c2:	5cd3      	ldrb	r3, [r2, r3]
 80041c4:	f809 3d01 	strb.w	r3, [r9, #-1]!
 80041c8:	0933      	lsrs	r3, r6, #4
 80041ca:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 80041ce:	093a      	lsrs	r2, r7, #4
 80041d0:	461e      	mov	r6, r3
 80041d2:	4617      	mov	r7, r2
 80041d4:	ea56 0307 	orrs.w	r3, r6, r7
 80041d8:	d1f0      	bne.n	80041bc <_vfprintf_r+0xd8c>
 80041da:	e799      	b.n	8004110 <_vfprintf_r+0xce0>
 80041dc:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d195      	bne.n	8004110 <_vfprintf_r+0xce0>
 80041e4:	07d6      	lsls	r6, r2, #31
 80041e6:	bf44      	itt	mi
 80041e8:	2330      	movmi	r3, #48	; 0x30
 80041ea:	f809 3d01 	strbmi.w	r3, [r9, #-1]!
 80041ee:	e78f      	b.n	8004110 <_vfprintf_r+0xce0>
 80041f0:	9b06      	ldr	r3, [sp, #24]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	f000 837a 	beq.w	80048ec <_vfprintf_r+0x14bc>
 80041f8:	2000      	movs	r0, #0
 80041fa:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 80041fe:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 8004202:	9609      	str	r6, [sp, #36]	; 0x24
 8004204:	f7ff bb3c 	b.w	8003880 <_vfprintf_r+0x450>
 8004208:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 800420c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800420e:	e4ea      	b.n	8003be6 <_vfprintf_r+0x7b6>
 8004210:	9b03      	ldr	r3, [sp, #12]
 8004212:	f7ff bbae 	b.w	8003972 <_vfprintf_r+0x542>
 8004216:	2010      	movs	r0, #16
 8004218:	4403      	add	r3, r0
 800421a:	2a07      	cmp	r2, #7
 800421c:	6060      	str	r0, [r4, #4]
 800421e:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8004222:	dd08      	ble.n	8004236 <_vfprintf_r+0xe06>
 8004224:	aa26      	add	r2, sp, #152	; 0x98
 8004226:	4641      	mov	r1, r8
 8004228:	4658      	mov	r0, fp
 800422a:	f002 fadc 	bl	80067e6 <__sprint_r>
 800422e:	2800      	cmp	r0, #0
 8004230:	f040 833a 	bne.w	80048a8 <_vfprintf_r+0x1478>
 8004234:	a929      	add	r1, sp, #164	; 0xa4
 8004236:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004238:	3b10      	subs	r3, #16
 800423a:	9313      	str	r3, [sp, #76]	; 0x4c
 800423c:	460c      	mov	r4, r1
 800423e:	e650      	b.n	8003ee2 <_vfprintf_r+0xab2>
 8004240:	460c      	mov	r4, r1
 8004242:	e66b      	b.n	8003f1c <_vfprintf_r+0xaec>
 8004244:	aa26      	add	r2, sp, #152	; 0x98
 8004246:	4641      	mov	r1, r8
 8004248:	4658      	mov	r0, fp
 800424a:	f002 facc 	bl	80067e6 <__sprint_r>
 800424e:	2800      	cmp	r0, #0
 8004250:	f040 832a 	bne.w	80048a8 <_vfprintf_r+0x1478>
 8004254:	ac29      	add	r4, sp, #164	; 0xa4
 8004256:	e673      	b.n	8003f40 <_vfprintf_r+0xb10>
 8004258:	aa26      	add	r2, sp, #152	; 0x98
 800425a:	4641      	mov	r1, r8
 800425c:	4658      	mov	r0, fp
 800425e:	f002 fac2 	bl	80067e6 <__sprint_r>
 8004262:	2800      	cmp	r0, #0
 8004264:	f040 8320 	bne.w	80048a8 <_vfprintf_r+0x1478>
 8004268:	ac29      	add	r4, sp, #164	; 0xa4
 800426a:	e679      	b.n	8003f60 <_vfprintf_r+0xb30>
 800426c:	2010      	movs	r0, #16
 800426e:	4403      	add	r3, r0
 8004270:	2a07      	cmp	r2, #7
 8004272:	6060      	str	r0, [r4, #4]
 8004274:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8004278:	dd08      	ble.n	800428c <_vfprintf_r+0xe5c>
 800427a:	aa26      	add	r2, sp, #152	; 0x98
 800427c:	4641      	mov	r1, r8
 800427e:	4658      	mov	r0, fp
 8004280:	f002 fab1 	bl	80067e6 <__sprint_r>
 8004284:	2800      	cmp	r0, #0
 8004286:	f040 830f 	bne.w	80048a8 <_vfprintf_r+0x1478>
 800428a:	a929      	add	r1, sp, #164	; 0xa4
 800428c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800428e:	3b10      	subs	r3, #16
 8004290:	9313      	str	r3, [sp, #76]	; 0x4c
 8004292:	460c      	mov	r4, r1
 8004294:	e66d      	b.n	8003f72 <_vfprintf_r+0xb42>
 8004296:	460c      	mov	r4, r1
 8004298:	e688      	b.n	8003fac <_vfprintf_r+0xb7c>
 800429a:	2010      	movs	r0, #16
 800429c:	4403      	add	r3, r0
 800429e:	2a07      	cmp	r2, #7
 80042a0:	6060      	str	r0, [r4, #4]
 80042a2:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 80042a6:	dd08      	ble.n	80042ba <_vfprintf_r+0xe8a>
 80042a8:	aa26      	add	r2, sp, #152	; 0x98
 80042aa:	4641      	mov	r1, r8
 80042ac:	4658      	mov	r0, fp
 80042ae:	f002 fa9a 	bl	80067e6 <__sprint_r>
 80042b2:	2800      	cmp	r0, #0
 80042b4:	f040 82f8 	bne.w	80048a8 <_vfprintf_r+0x1478>
 80042b8:	a929      	add	r1, sp, #164	; 0xa4
 80042ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80042bc:	3b10      	subs	r3, #16
 80042be:	9310      	str	r3, [sp, #64]	; 0x40
 80042c0:	460c      	mov	r4, r1
 80042c2:	e678      	b.n	8003fb6 <_vfprintf_r+0xb86>
 80042c4:	460c      	mov	r4, r1
 80042c6:	e693      	b.n	8003ff0 <_vfprintf_r+0xbc0>
 80042c8:	9b06      	ldr	r3, [sp, #24]
 80042ca:	2b65      	cmp	r3, #101	; 0x65
 80042cc:	f340 8234 	ble.w	8004738 <_vfprintf_r+0x1308>
 80042d0:	2200      	movs	r2, #0
 80042d2:	2300      	movs	r3, #0
 80042d4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80042d8:	f7fc fc16 	bl	8000b08 <__aeabi_dcmpeq>
 80042dc:	2800      	cmp	r0, #0
 80042de:	d069      	beq.n	80043b4 <_vfprintf_r+0xf84>
 80042e0:	4b6e      	ldr	r3, [pc, #440]	; (800449c <_vfprintf_r+0x106c>)
 80042e2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80042e4:	6023      	str	r3, [r4, #0]
 80042e6:	2301      	movs	r3, #1
 80042e8:	441d      	add	r5, r3
 80042ea:	6063      	str	r3, [r4, #4]
 80042ec:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80042ee:	9528      	str	r5, [sp, #160]	; 0xa0
 80042f0:	3301      	adds	r3, #1
 80042f2:	2b07      	cmp	r3, #7
 80042f4:	9327      	str	r3, [sp, #156]	; 0x9c
 80042f6:	dc37      	bgt.n	8004368 <_vfprintf_r+0xf38>
 80042f8:	3408      	adds	r4, #8
 80042fa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80042fc:	9a04      	ldr	r2, [sp, #16]
 80042fe:	4293      	cmp	r3, r2
 8004300:	db03      	blt.n	800430a <_vfprintf_r+0xeda>
 8004302:	f01a 0f01 	tst.w	sl, #1
 8004306:	f43f ae84 	beq.w	8004012 <_vfprintf_r+0xbe2>
 800430a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800430c:	6023      	str	r3, [r4, #0]
 800430e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004310:	6063      	str	r3, [r4, #4]
 8004312:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004314:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004316:	4413      	add	r3, r2
 8004318:	9328      	str	r3, [sp, #160]	; 0xa0
 800431a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800431c:	3301      	adds	r3, #1
 800431e:	2b07      	cmp	r3, #7
 8004320:	9327      	str	r3, [sp, #156]	; 0x9c
 8004322:	dc2b      	bgt.n	800437c <_vfprintf_r+0xf4c>
 8004324:	3408      	adds	r4, #8
 8004326:	9b04      	ldr	r3, [sp, #16]
 8004328:	1e5d      	subs	r5, r3, #1
 800432a:	2d00      	cmp	r5, #0
 800432c:	f77f ae71 	ble.w	8004012 <_vfprintf_r+0xbe2>
 8004330:	4e5b      	ldr	r6, [pc, #364]	; (80044a0 <_vfprintf_r+0x1070>)
 8004332:	2710      	movs	r7, #16
 8004334:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8004338:	2d10      	cmp	r5, #16
 800433a:	f103 0301 	add.w	r3, r3, #1
 800433e:	f104 0108 	add.w	r1, r4, #8
 8004342:	6026      	str	r6, [r4, #0]
 8004344:	dc24      	bgt.n	8004390 <_vfprintf_r+0xf60>
 8004346:	6065      	str	r5, [r4, #4]
 8004348:	2b07      	cmp	r3, #7
 800434a:	4415      	add	r5, r2
 800434c:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8004350:	f340 8289 	ble.w	8004866 <_vfprintf_r+0x1436>
 8004354:	aa26      	add	r2, sp, #152	; 0x98
 8004356:	4641      	mov	r1, r8
 8004358:	4658      	mov	r0, fp
 800435a:	f002 fa44 	bl	80067e6 <__sprint_r>
 800435e:	2800      	cmp	r0, #0
 8004360:	f040 82a2 	bne.w	80048a8 <_vfprintf_r+0x1478>
 8004364:	ac29      	add	r4, sp, #164	; 0xa4
 8004366:	e654      	b.n	8004012 <_vfprintf_r+0xbe2>
 8004368:	aa26      	add	r2, sp, #152	; 0x98
 800436a:	4641      	mov	r1, r8
 800436c:	4658      	mov	r0, fp
 800436e:	f002 fa3a 	bl	80067e6 <__sprint_r>
 8004372:	2800      	cmp	r0, #0
 8004374:	f040 8298 	bne.w	80048a8 <_vfprintf_r+0x1478>
 8004378:	ac29      	add	r4, sp, #164	; 0xa4
 800437a:	e7be      	b.n	80042fa <_vfprintf_r+0xeca>
 800437c:	aa26      	add	r2, sp, #152	; 0x98
 800437e:	4641      	mov	r1, r8
 8004380:	4658      	mov	r0, fp
 8004382:	f002 fa30 	bl	80067e6 <__sprint_r>
 8004386:	2800      	cmp	r0, #0
 8004388:	f040 828e 	bne.w	80048a8 <_vfprintf_r+0x1478>
 800438c:	ac29      	add	r4, sp, #164	; 0xa4
 800438e:	e7ca      	b.n	8004326 <_vfprintf_r+0xef6>
 8004390:	3210      	adds	r2, #16
 8004392:	2b07      	cmp	r3, #7
 8004394:	6067      	str	r7, [r4, #4]
 8004396:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800439a:	dd08      	ble.n	80043ae <_vfprintf_r+0xf7e>
 800439c:	aa26      	add	r2, sp, #152	; 0x98
 800439e:	4641      	mov	r1, r8
 80043a0:	4658      	mov	r0, fp
 80043a2:	f002 fa20 	bl	80067e6 <__sprint_r>
 80043a6:	2800      	cmp	r0, #0
 80043a8:	f040 827e 	bne.w	80048a8 <_vfprintf_r+0x1478>
 80043ac:	a929      	add	r1, sp, #164	; 0xa4
 80043ae:	3d10      	subs	r5, #16
 80043b0:	460c      	mov	r4, r1
 80043b2:	e7bf      	b.n	8004334 <_vfprintf_r+0xf04>
 80043b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	dc74      	bgt.n	80044a4 <_vfprintf_r+0x1074>
 80043ba:	4b38      	ldr	r3, [pc, #224]	; (800449c <_vfprintf_r+0x106c>)
 80043bc:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80043be:	6023      	str	r3, [r4, #0]
 80043c0:	2301      	movs	r3, #1
 80043c2:	441d      	add	r5, r3
 80043c4:	6063      	str	r3, [r4, #4]
 80043c6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80043c8:	9528      	str	r5, [sp, #160]	; 0xa0
 80043ca:	3301      	adds	r3, #1
 80043cc:	2b07      	cmp	r3, #7
 80043ce:	9327      	str	r3, [sp, #156]	; 0x9c
 80043d0:	dc3e      	bgt.n	8004450 <_vfprintf_r+0x1020>
 80043d2:	3408      	adds	r4, #8
 80043d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80043d6:	b92b      	cbnz	r3, 80043e4 <_vfprintf_r+0xfb4>
 80043d8:	9b04      	ldr	r3, [sp, #16]
 80043da:	b91b      	cbnz	r3, 80043e4 <_vfprintf_r+0xfb4>
 80043dc:	f01a 0f01 	tst.w	sl, #1
 80043e0:	f43f ae17 	beq.w	8004012 <_vfprintf_r+0xbe2>
 80043e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80043e6:	6023      	str	r3, [r4, #0]
 80043e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80043ea:	6063      	str	r3, [r4, #4]
 80043ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80043ee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80043f0:	4413      	add	r3, r2
 80043f2:	9328      	str	r3, [sp, #160]	; 0xa0
 80043f4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80043f6:	3301      	adds	r3, #1
 80043f8:	2b07      	cmp	r3, #7
 80043fa:	9327      	str	r3, [sp, #156]	; 0x9c
 80043fc:	dc32      	bgt.n	8004464 <_vfprintf_r+0x1034>
 80043fe:	3408      	adds	r4, #8
 8004400:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8004402:	2d00      	cmp	r5, #0
 8004404:	da1b      	bge.n	800443e <_vfprintf_r+0x100e>
 8004406:	4e26      	ldr	r6, [pc, #152]	; (80044a0 <_vfprintf_r+0x1070>)
 8004408:	426d      	negs	r5, r5
 800440a:	4623      	mov	r3, r4
 800440c:	2710      	movs	r7, #16
 800440e:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 8004412:	2d10      	cmp	r5, #16
 8004414:	f102 0201 	add.w	r2, r2, #1
 8004418:	f104 0408 	add.w	r4, r4, #8
 800441c:	601e      	str	r6, [r3, #0]
 800441e:	dc2b      	bgt.n	8004478 <_vfprintf_r+0x1048>
 8004420:	605d      	str	r5, [r3, #4]
 8004422:	2a07      	cmp	r2, #7
 8004424:	440d      	add	r5, r1
 8004426:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
 800442a:	dd08      	ble.n	800443e <_vfprintf_r+0x100e>
 800442c:	aa26      	add	r2, sp, #152	; 0x98
 800442e:	4641      	mov	r1, r8
 8004430:	4658      	mov	r0, fp
 8004432:	f002 f9d8 	bl	80067e6 <__sprint_r>
 8004436:	2800      	cmp	r0, #0
 8004438:	f040 8236 	bne.w	80048a8 <_vfprintf_r+0x1478>
 800443c:	ac29      	add	r4, sp, #164	; 0xa4
 800443e:	9b04      	ldr	r3, [sp, #16]
 8004440:	6063      	str	r3, [r4, #4]
 8004442:	9a04      	ldr	r2, [sp, #16]
 8004444:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004446:	f8c4 9000 	str.w	r9, [r4]
 800444a:	4413      	add	r3, r2
 800444c:	9328      	str	r3, [sp, #160]	; 0xa0
 800444e:	e5d9      	b.n	8004004 <_vfprintf_r+0xbd4>
 8004450:	aa26      	add	r2, sp, #152	; 0x98
 8004452:	4641      	mov	r1, r8
 8004454:	4658      	mov	r0, fp
 8004456:	f002 f9c6 	bl	80067e6 <__sprint_r>
 800445a:	2800      	cmp	r0, #0
 800445c:	f040 8224 	bne.w	80048a8 <_vfprintf_r+0x1478>
 8004460:	ac29      	add	r4, sp, #164	; 0xa4
 8004462:	e7b7      	b.n	80043d4 <_vfprintf_r+0xfa4>
 8004464:	aa26      	add	r2, sp, #152	; 0x98
 8004466:	4641      	mov	r1, r8
 8004468:	4658      	mov	r0, fp
 800446a:	f002 f9bc 	bl	80067e6 <__sprint_r>
 800446e:	2800      	cmp	r0, #0
 8004470:	f040 821a 	bne.w	80048a8 <_vfprintf_r+0x1478>
 8004474:	ac29      	add	r4, sp, #164	; 0xa4
 8004476:	e7c3      	b.n	8004400 <_vfprintf_r+0xfd0>
 8004478:	3110      	adds	r1, #16
 800447a:	2a07      	cmp	r2, #7
 800447c:	605f      	str	r7, [r3, #4]
 800447e:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
 8004482:	dd08      	ble.n	8004496 <_vfprintf_r+0x1066>
 8004484:	aa26      	add	r2, sp, #152	; 0x98
 8004486:	4641      	mov	r1, r8
 8004488:	4658      	mov	r0, fp
 800448a:	f002 f9ac 	bl	80067e6 <__sprint_r>
 800448e:	2800      	cmp	r0, #0
 8004490:	f040 820a 	bne.w	80048a8 <_vfprintf_r+0x1478>
 8004494:	ac29      	add	r4, sp, #164	; 0xa4
 8004496:	3d10      	subs	r5, #16
 8004498:	4623      	mov	r3, r4
 800449a:	e7b8      	b.n	800440e <_vfprintf_r+0xfde>
 800449c:	0800841e 	.word	0x0800841e
 80044a0:	08008430 	.word	0x08008430
 80044a4:	9b04      	ldr	r3, [sp, #16]
 80044a6:	42b3      	cmp	r3, r6
 80044a8:	bfa8      	it	ge
 80044aa:	4633      	movge	r3, r6
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	461d      	mov	r5, r3
 80044b0:	dd0b      	ble.n	80044ca <_vfprintf_r+0x109a>
 80044b2:	e9c4 9300 	strd	r9, r3, [r4]
 80044b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80044b8:	442b      	add	r3, r5
 80044ba:	9328      	str	r3, [sp, #160]	; 0xa0
 80044bc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80044be:	3301      	adds	r3, #1
 80044c0:	2b07      	cmp	r3, #7
 80044c2:	9327      	str	r3, [sp, #156]	; 0x9c
 80044c4:	f300 8086 	bgt.w	80045d4 <_vfprintf_r+0x11a4>
 80044c8:	3408      	adds	r4, #8
 80044ca:	2d00      	cmp	r5, #0
 80044cc:	bfac      	ite	ge
 80044ce:	1b75      	subge	r5, r6, r5
 80044d0:	4635      	movlt	r5, r6
 80044d2:	2d00      	cmp	r5, #0
 80044d4:	dd19      	ble.n	800450a <_vfprintf_r+0x10da>
 80044d6:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 80044da:	4896      	ldr	r0, [pc, #600]	; (8004734 <_vfprintf_r+0x1304>)
 80044dc:	6020      	str	r0, [r4, #0]
 80044de:	2d10      	cmp	r5, #16
 80044e0:	f103 0301 	add.w	r3, r3, #1
 80044e4:	f104 0108 	add.w	r1, r4, #8
 80044e8:	dc7e      	bgt.n	80045e8 <_vfprintf_r+0x11b8>
 80044ea:	6065      	str	r5, [r4, #4]
 80044ec:	2b07      	cmp	r3, #7
 80044ee:	4415      	add	r5, r2
 80044f0:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 80044f4:	f340 808b 	ble.w	800460e <_vfprintf_r+0x11de>
 80044f8:	aa26      	add	r2, sp, #152	; 0x98
 80044fa:	4641      	mov	r1, r8
 80044fc:	4658      	mov	r0, fp
 80044fe:	f002 f972 	bl	80067e6 <__sprint_r>
 8004502:	2800      	cmp	r0, #0
 8004504:	f040 81d0 	bne.w	80048a8 <_vfprintf_r+0x1478>
 8004508:	ac29      	add	r4, sp, #164	; 0xa4
 800450a:	f41a 6f80 	tst.w	sl, #1024	; 0x400
 800450e:	444e      	add	r6, r9
 8004510:	d009      	beq.n	8004526 <_vfprintf_r+0x10f6>
 8004512:	9b07      	ldr	r3, [sp, #28]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d17c      	bne.n	8004612 <_vfprintf_r+0x11e2>
 8004518:	2f00      	cmp	r7, #0
 800451a:	d17c      	bne.n	8004616 <_vfprintf_r+0x11e6>
 800451c:	9b04      	ldr	r3, [sp, #16]
 800451e:	444b      	add	r3, r9
 8004520:	429e      	cmp	r6, r3
 8004522:	bf28      	it	cs
 8004524:	461e      	movcs	r6, r3
 8004526:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004528:	9a04      	ldr	r2, [sp, #16]
 800452a:	4293      	cmp	r3, r2
 800452c:	db02      	blt.n	8004534 <_vfprintf_r+0x1104>
 800452e:	f01a 0f01 	tst.w	sl, #1
 8004532:	d00e      	beq.n	8004552 <_vfprintf_r+0x1122>
 8004534:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004536:	6023      	str	r3, [r4, #0]
 8004538:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800453a:	6063      	str	r3, [r4, #4]
 800453c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800453e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004540:	4413      	add	r3, r2
 8004542:	9328      	str	r3, [sp, #160]	; 0xa0
 8004544:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8004546:	3301      	adds	r3, #1
 8004548:	2b07      	cmp	r3, #7
 800454a:	9327      	str	r3, [sp, #156]	; 0x9c
 800454c:	f300 80dd 	bgt.w	800470a <_vfprintf_r+0x12da>
 8004550:	3408      	adds	r4, #8
 8004552:	9b04      	ldr	r3, [sp, #16]
 8004554:	9a04      	ldr	r2, [sp, #16]
 8004556:	eb09 0503 	add.w	r5, r9, r3
 800455a:	1bab      	subs	r3, r5, r6
 800455c:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800455e:	1b55      	subs	r5, r2, r5
 8004560:	429d      	cmp	r5, r3
 8004562:	bfa8      	it	ge
 8004564:	461d      	movge	r5, r3
 8004566:	2d00      	cmp	r5, #0
 8004568:	dd0b      	ble.n	8004582 <_vfprintf_r+0x1152>
 800456a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800456c:	442b      	add	r3, r5
 800456e:	9328      	str	r3, [sp, #160]	; 0xa0
 8004570:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8004572:	3301      	adds	r3, #1
 8004574:	2b07      	cmp	r3, #7
 8004576:	e9c4 6500 	strd	r6, r5, [r4]
 800457a:	9327      	str	r3, [sp, #156]	; 0x9c
 800457c:	f300 80cf 	bgt.w	800471e <_vfprintf_r+0x12ee>
 8004580:	3408      	adds	r4, #8
 8004582:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004584:	9a04      	ldr	r2, [sp, #16]
 8004586:	2d00      	cmp	r5, #0
 8004588:	eba2 0303 	sub.w	r3, r2, r3
 800458c:	bfac      	ite	ge
 800458e:	1b5d      	subge	r5, r3, r5
 8004590:	461d      	movlt	r5, r3
 8004592:	2d00      	cmp	r5, #0
 8004594:	f77f ad3d 	ble.w	8004012 <_vfprintf_r+0xbe2>
 8004598:	4e66      	ldr	r6, [pc, #408]	; (8004734 <_vfprintf_r+0x1304>)
 800459a:	2710      	movs	r7, #16
 800459c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 80045a0:	2d10      	cmp	r5, #16
 80045a2:	f103 0301 	add.w	r3, r3, #1
 80045a6:	f104 0108 	add.w	r1, r4, #8
 80045aa:	6026      	str	r6, [r4, #0]
 80045ac:	f77f aecb 	ble.w	8004346 <_vfprintf_r+0xf16>
 80045b0:	3210      	adds	r2, #16
 80045b2:	2b07      	cmp	r3, #7
 80045b4:	6067      	str	r7, [r4, #4]
 80045b6:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 80045ba:	dd08      	ble.n	80045ce <_vfprintf_r+0x119e>
 80045bc:	aa26      	add	r2, sp, #152	; 0x98
 80045be:	4641      	mov	r1, r8
 80045c0:	4658      	mov	r0, fp
 80045c2:	f002 f910 	bl	80067e6 <__sprint_r>
 80045c6:	2800      	cmp	r0, #0
 80045c8:	f040 816e 	bne.w	80048a8 <_vfprintf_r+0x1478>
 80045cc:	a929      	add	r1, sp, #164	; 0xa4
 80045ce:	3d10      	subs	r5, #16
 80045d0:	460c      	mov	r4, r1
 80045d2:	e7e3      	b.n	800459c <_vfprintf_r+0x116c>
 80045d4:	aa26      	add	r2, sp, #152	; 0x98
 80045d6:	4641      	mov	r1, r8
 80045d8:	4658      	mov	r0, fp
 80045da:	f002 f904 	bl	80067e6 <__sprint_r>
 80045de:	2800      	cmp	r0, #0
 80045e0:	f040 8162 	bne.w	80048a8 <_vfprintf_r+0x1478>
 80045e4:	ac29      	add	r4, sp, #164	; 0xa4
 80045e6:	e770      	b.n	80044ca <_vfprintf_r+0x109a>
 80045e8:	2010      	movs	r0, #16
 80045ea:	4402      	add	r2, r0
 80045ec:	2b07      	cmp	r3, #7
 80045ee:	6060      	str	r0, [r4, #4]
 80045f0:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 80045f4:	dd08      	ble.n	8004608 <_vfprintf_r+0x11d8>
 80045f6:	aa26      	add	r2, sp, #152	; 0x98
 80045f8:	4641      	mov	r1, r8
 80045fa:	4658      	mov	r0, fp
 80045fc:	f002 f8f3 	bl	80067e6 <__sprint_r>
 8004600:	2800      	cmp	r0, #0
 8004602:	f040 8151 	bne.w	80048a8 <_vfprintf_r+0x1478>
 8004606:	a929      	add	r1, sp, #164	; 0xa4
 8004608:	3d10      	subs	r5, #16
 800460a:	460c      	mov	r4, r1
 800460c:	e763      	b.n	80044d6 <_vfprintf_r+0x10a6>
 800460e:	460c      	mov	r4, r1
 8004610:	e77b      	b.n	800450a <_vfprintf_r+0x10da>
 8004612:	2f00      	cmp	r7, #0
 8004614:	d049      	beq.n	80046aa <_vfprintf_r+0x127a>
 8004616:	3f01      	subs	r7, #1
 8004618:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800461a:	6023      	str	r3, [r4, #0]
 800461c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800461e:	6063      	str	r3, [r4, #4]
 8004620:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004622:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004624:	4413      	add	r3, r2
 8004626:	9328      	str	r3, [sp, #160]	; 0xa0
 8004628:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800462a:	3301      	adds	r3, #1
 800462c:	2b07      	cmp	r3, #7
 800462e:	9327      	str	r3, [sp, #156]	; 0x9c
 8004630:	dc42      	bgt.n	80046b8 <_vfprintf_r+0x1288>
 8004632:	3408      	adds	r4, #8
 8004634:	9b04      	ldr	r3, [sp, #16]
 8004636:	444b      	add	r3, r9
 8004638:	1b9a      	subs	r2, r3, r6
 800463a:	9b08      	ldr	r3, [sp, #32]
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	4293      	cmp	r3, r2
 8004640:	bfa8      	it	ge
 8004642:	4613      	movge	r3, r2
 8004644:	2b00      	cmp	r3, #0
 8004646:	461d      	mov	r5, r3
 8004648:	dd0a      	ble.n	8004660 <_vfprintf_r+0x1230>
 800464a:	e9c4 6300 	strd	r6, r3, [r4]
 800464e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004650:	442b      	add	r3, r5
 8004652:	9328      	str	r3, [sp, #160]	; 0xa0
 8004654:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8004656:	3301      	adds	r3, #1
 8004658:	2b07      	cmp	r3, #7
 800465a:	9327      	str	r3, [sp, #156]	; 0x9c
 800465c:	dc36      	bgt.n	80046cc <_vfprintf_r+0x129c>
 800465e:	3408      	adds	r4, #8
 8004660:	9b08      	ldr	r3, [sp, #32]
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	2d00      	cmp	r5, #0
 8004666:	bfac      	ite	ge
 8004668:	1b5d      	subge	r5, r3, r5
 800466a:	461d      	movlt	r5, r3
 800466c:	2d00      	cmp	r5, #0
 800466e:	dd18      	ble.n	80046a2 <_vfprintf_r+0x1272>
 8004670:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8004674:	482f      	ldr	r0, [pc, #188]	; (8004734 <_vfprintf_r+0x1304>)
 8004676:	6020      	str	r0, [r4, #0]
 8004678:	2d10      	cmp	r5, #16
 800467a:	f102 0201 	add.w	r2, r2, #1
 800467e:	f104 0108 	add.w	r1, r4, #8
 8004682:	dc2d      	bgt.n	80046e0 <_vfprintf_r+0x12b0>
 8004684:	442b      	add	r3, r5
 8004686:	2a07      	cmp	r2, #7
 8004688:	6065      	str	r5, [r4, #4]
 800468a:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800468e:	dd3a      	ble.n	8004706 <_vfprintf_r+0x12d6>
 8004690:	aa26      	add	r2, sp, #152	; 0x98
 8004692:	4641      	mov	r1, r8
 8004694:	4658      	mov	r0, fp
 8004696:	f002 f8a6 	bl	80067e6 <__sprint_r>
 800469a:	2800      	cmp	r0, #0
 800469c:	f040 8104 	bne.w	80048a8 <_vfprintf_r+0x1478>
 80046a0:	ac29      	add	r4, sp, #164	; 0xa4
 80046a2:	9b08      	ldr	r3, [sp, #32]
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	441e      	add	r6, r3
 80046a8:	e733      	b.n	8004512 <_vfprintf_r+0x10e2>
 80046aa:	9b08      	ldr	r3, [sp, #32]
 80046ac:	3b01      	subs	r3, #1
 80046ae:	9308      	str	r3, [sp, #32]
 80046b0:	9b07      	ldr	r3, [sp, #28]
 80046b2:	3b01      	subs	r3, #1
 80046b4:	9307      	str	r3, [sp, #28]
 80046b6:	e7af      	b.n	8004618 <_vfprintf_r+0x11e8>
 80046b8:	aa26      	add	r2, sp, #152	; 0x98
 80046ba:	4641      	mov	r1, r8
 80046bc:	4658      	mov	r0, fp
 80046be:	f002 f892 	bl	80067e6 <__sprint_r>
 80046c2:	2800      	cmp	r0, #0
 80046c4:	f040 80f0 	bne.w	80048a8 <_vfprintf_r+0x1478>
 80046c8:	ac29      	add	r4, sp, #164	; 0xa4
 80046ca:	e7b3      	b.n	8004634 <_vfprintf_r+0x1204>
 80046cc:	aa26      	add	r2, sp, #152	; 0x98
 80046ce:	4641      	mov	r1, r8
 80046d0:	4658      	mov	r0, fp
 80046d2:	f002 f888 	bl	80067e6 <__sprint_r>
 80046d6:	2800      	cmp	r0, #0
 80046d8:	f040 80e6 	bne.w	80048a8 <_vfprintf_r+0x1478>
 80046dc:	ac29      	add	r4, sp, #164	; 0xa4
 80046de:	e7bf      	b.n	8004660 <_vfprintf_r+0x1230>
 80046e0:	2010      	movs	r0, #16
 80046e2:	4403      	add	r3, r0
 80046e4:	2a07      	cmp	r2, #7
 80046e6:	6060      	str	r0, [r4, #4]
 80046e8:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 80046ec:	dd08      	ble.n	8004700 <_vfprintf_r+0x12d0>
 80046ee:	aa26      	add	r2, sp, #152	; 0x98
 80046f0:	4641      	mov	r1, r8
 80046f2:	4658      	mov	r0, fp
 80046f4:	f002 f877 	bl	80067e6 <__sprint_r>
 80046f8:	2800      	cmp	r0, #0
 80046fa:	f040 80d5 	bne.w	80048a8 <_vfprintf_r+0x1478>
 80046fe:	a929      	add	r1, sp, #164	; 0xa4
 8004700:	3d10      	subs	r5, #16
 8004702:	460c      	mov	r4, r1
 8004704:	e7b4      	b.n	8004670 <_vfprintf_r+0x1240>
 8004706:	460c      	mov	r4, r1
 8004708:	e7cb      	b.n	80046a2 <_vfprintf_r+0x1272>
 800470a:	aa26      	add	r2, sp, #152	; 0x98
 800470c:	4641      	mov	r1, r8
 800470e:	4658      	mov	r0, fp
 8004710:	f002 f869 	bl	80067e6 <__sprint_r>
 8004714:	2800      	cmp	r0, #0
 8004716:	f040 80c7 	bne.w	80048a8 <_vfprintf_r+0x1478>
 800471a:	ac29      	add	r4, sp, #164	; 0xa4
 800471c:	e719      	b.n	8004552 <_vfprintf_r+0x1122>
 800471e:	aa26      	add	r2, sp, #152	; 0x98
 8004720:	4641      	mov	r1, r8
 8004722:	4658      	mov	r0, fp
 8004724:	f002 f85f 	bl	80067e6 <__sprint_r>
 8004728:	2800      	cmp	r0, #0
 800472a:	f040 80bd 	bne.w	80048a8 <_vfprintf_r+0x1478>
 800472e:	ac29      	add	r4, sp, #164	; 0xa4
 8004730:	e727      	b.n	8004582 <_vfprintf_r+0x1152>
 8004732:	bf00      	nop
 8004734:	08008430 	.word	0x08008430
 8004738:	9a04      	ldr	r2, [sp, #16]
 800473a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800473c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800473e:	2a01      	cmp	r2, #1
 8004740:	f105 0501 	add.w	r5, r5, #1
 8004744:	f103 0301 	add.w	r3, r3, #1
 8004748:	f104 0608 	add.w	r6, r4, #8
 800474c:	dc02      	bgt.n	8004754 <_vfprintf_r+0x1324>
 800474e:	f01a 0f01 	tst.w	sl, #1
 8004752:	d07d      	beq.n	8004850 <_vfprintf_r+0x1420>
 8004754:	2201      	movs	r2, #1
 8004756:	2b07      	cmp	r3, #7
 8004758:	f8c4 9000 	str.w	r9, [r4]
 800475c:	6062      	str	r2, [r4, #4]
 800475e:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8004762:	dd08      	ble.n	8004776 <_vfprintf_r+0x1346>
 8004764:	aa26      	add	r2, sp, #152	; 0x98
 8004766:	4641      	mov	r1, r8
 8004768:	4658      	mov	r0, fp
 800476a:	f002 f83c 	bl	80067e6 <__sprint_r>
 800476e:	2800      	cmp	r0, #0
 8004770:	f040 809a 	bne.w	80048a8 <_vfprintf_r+0x1478>
 8004774:	ae29      	add	r6, sp, #164	; 0xa4
 8004776:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004778:	6033      	str	r3, [r6, #0]
 800477a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800477c:	6073      	str	r3, [r6, #4]
 800477e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004780:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004782:	4413      	add	r3, r2
 8004784:	9328      	str	r3, [sp, #160]	; 0xa0
 8004786:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8004788:	3301      	adds	r3, #1
 800478a:	2b07      	cmp	r3, #7
 800478c:	9327      	str	r3, [sp, #156]	; 0x9c
 800478e:	dc31      	bgt.n	80047f4 <_vfprintf_r+0x13c4>
 8004790:	3608      	adds	r6, #8
 8004792:	9b04      	ldr	r3, [sp, #16]
 8004794:	2200      	movs	r2, #0
 8004796:	1e5c      	subs	r4, r3, #1
 8004798:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800479c:	2300      	movs	r3, #0
 800479e:	f7fc f9b3 	bl	8000b08 <__aeabi_dcmpeq>
 80047a2:	2800      	cmp	r0, #0
 80047a4:	d12f      	bne.n	8004806 <_vfprintf_r+0x13d6>
 80047a6:	f109 0301 	add.w	r3, r9, #1
 80047aa:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80047ac:	9904      	ldr	r1, [sp, #16]
 80047ae:	e9c6 3400 	strd	r3, r4, [r6]
 80047b2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80047b4:	3201      	adds	r2, #1
 80047b6:	3b01      	subs	r3, #1
 80047b8:	440b      	add	r3, r1
 80047ba:	2a07      	cmp	r2, #7
 80047bc:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 80047c0:	dd4f      	ble.n	8004862 <_vfprintf_r+0x1432>
 80047c2:	aa26      	add	r2, sp, #152	; 0x98
 80047c4:	4641      	mov	r1, r8
 80047c6:	4658      	mov	r0, fp
 80047c8:	f002 f80d 	bl	80067e6 <__sprint_r>
 80047cc:	2800      	cmp	r0, #0
 80047ce:	d16b      	bne.n	80048a8 <_vfprintf_r+0x1478>
 80047d0:	ae29      	add	r6, sp, #164	; 0xa4
 80047d2:	ab22      	add	r3, sp, #136	; 0x88
 80047d4:	6033      	str	r3, [r6, #0]
 80047d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80047d8:	6073      	str	r3, [r6, #4]
 80047da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80047dc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80047de:	4413      	add	r3, r2
 80047e0:	9328      	str	r3, [sp, #160]	; 0xa0
 80047e2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80047e4:	3301      	adds	r3, #1
 80047e6:	2b07      	cmp	r3, #7
 80047e8:	9327      	str	r3, [sp, #156]	; 0x9c
 80047ea:	f73f adb3 	bgt.w	8004354 <_vfprintf_r+0xf24>
 80047ee:	f106 0408 	add.w	r4, r6, #8
 80047f2:	e40e      	b.n	8004012 <_vfprintf_r+0xbe2>
 80047f4:	aa26      	add	r2, sp, #152	; 0x98
 80047f6:	4641      	mov	r1, r8
 80047f8:	4658      	mov	r0, fp
 80047fa:	f001 fff4 	bl	80067e6 <__sprint_r>
 80047fe:	2800      	cmp	r0, #0
 8004800:	d152      	bne.n	80048a8 <_vfprintf_r+0x1478>
 8004802:	ae29      	add	r6, sp, #164	; 0xa4
 8004804:	e7c5      	b.n	8004792 <_vfprintf_r+0x1362>
 8004806:	2c00      	cmp	r4, #0
 8004808:	dde3      	ble.n	80047d2 <_vfprintf_r+0x13a2>
 800480a:	4d40      	ldr	r5, [pc, #256]	; (800490c <_vfprintf_r+0x14dc>)
 800480c:	2710      	movs	r7, #16
 800480e:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8004812:	2c10      	cmp	r4, #16
 8004814:	f103 0301 	add.w	r3, r3, #1
 8004818:	f106 0108 	add.w	r1, r6, #8
 800481c:	6035      	str	r5, [r6, #0]
 800481e:	dc07      	bgt.n	8004830 <_vfprintf_r+0x1400>
 8004820:	6074      	str	r4, [r6, #4]
 8004822:	2b07      	cmp	r3, #7
 8004824:	4414      	add	r4, r2
 8004826:	e9cd 3427 	strd	r3, r4, [sp, #156]	; 0x9c
 800482a:	dcca      	bgt.n	80047c2 <_vfprintf_r+0x1392>
 800482c:	460e      	mov	r6, r1
 800482e:	e7d0      	b.n	80047d2 <_vfprintf_r+0x13a2>
 8004830:	3210      	adds	r2, #16
 8004832:	2b07      	cmp	r3, #7
 8004834:	6077      	str	r7, [r6, #4]
 8004836:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800483a:	dd06      	ble.n	800484a <_vfprintf_r+0x141a>
 800483c:	aa26      	add	r2, sp, #152	; 0x98
 800483e:	4641      	mov	r1, r8
 8004840:	4658      	mov	r0, fp
 8004842:	f001 ffd0 	bl	80067e6 <__sprint_r>
 8004846:	bb78      	cbnz	r0, 80048a8 <_vfprintf_r+0x1478>
 8004848:	a929      	add	r1, sp, #164	; 0xa4
 800484a:	3c10      	subs	r4, #16
 800484c:	460e      	mov	r6, r1
 800484e:	e7de      	b.n	800480e <_vfprintf_r+0x13de>
 8004850:	2201      	movs	r2, #1
 8004852:	2b07      	cmp	r3, #7
 8004854:	f8c4 9000 	str.w	r9, [r4]
 8004858:	6062      	str	r2, [r4, #4]
 800485a:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 800485e:	ddb8      	ble.n	80047d2 <_vfprintf_r+0x13a2>
 8004860:	e7af      	b.n	80047c2 <_vfprintf_r+0x1392>
 8004862:	3608      	adds	r6, #8
 8004864:	e7b5      	b.n	80047d2 <_vfprintf_r+0x13a2>
 8004866:	460c      	mov	r4, r1
 8004868:	f7ff bbd3 	b.w	8004012 <_vfprintf_r+0xbe2>
 800486c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800486e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004870:	1a9d      	subs	r5, r3, r2
 8004872:	2d00      	cmp	r5, #0
 8004874:	f77f abd1 	ble.w	800401a <_vfprintf_r+0xbea>
 8004878:	4e25      	ldr	r6, [pc, #148]	; (8004910 <_vfprintf_r+0x14e0>)
 800487a:	2710      	movs	r7, #16
 800487c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8004880:	2d10      	cmp	r5, #16
 8004882:	f103 0301 	add.w	r3, r3, #1
 8004886:	6026      	str	r6, [r4, #0]
 8004888:	dc18      	bgt.n	80048bc <_vfprintf_r+0x148c>
 800488a:	6065      	str	r5, [r4, #4]
 800488c:	2b07      	cmp	r3, #7
 800488e:	4415      	add	r5, r2
 8004890:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8004894:	f77f abc1 	ble.w	800401a <_vfprintf_r+0xbea>
 8004898:	aa26      	add	r2, sp, #152	; 0x98
 800489a:	4641      	mov	r1, r8
 800489c:	4658      	mov	r0, fp
 800489e:	f001 ffa2 	bl	80067e6 <__sprint_r>
 80048a2:	2800      	cmp	r0, #0
 80048a4:	f43f abb9 	beq.w	800401a <_vfprintf_r+0xbea>
 80048a8:	9b03      	ldr	r3, [sp, #12]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	f43f a895 	beq.w	80039da <_vfprintf_r+0x5aa>
 80048b0:	4619      	mov	r1, r3
 80048b2:	4658      	mov	r0, fp
 80048b4:	f001 f896 	bl	80059e4 <_free_r>
 80048b8:	f7ff b88f 	b.w	80039da <_vfprintf_r+0x5aa>
 80048bc:	3210      	adds	r2, #16
 80048be:	2b07      	cmp	r3, #7
 80048c0:	6067      	str	r7, [r4, #4]
 80048c2:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 80048c6:	dc02      	bgt.n	80048ce <_vfprintf_r+0x149e>
 80048c8:	3408      	adds	r4, #8
 80048ca:	3d10      	subs	r5, #16
 80048cc:	e7d6      	b.n	800487c <_vfprintf_r+0x144c>
 80048ce:	aa26      	add	r2, sp, #152	; 0x98
 80048d0:	4641      	mov	r1, r8
 80048d2:	4658      	mov	r0, fp
 80048d4:	f001 ff87 	bl	80067e6 <__sprint_r>
 80048d8:	2800      	cmp	r0, #0
 80048da:	d1e5      	bne.n	80048a8 <_vfprintf_r+0x1478>
 80048dc:	ac29      	add	r4, sp, #164	; 0xa4
 80048de:	e7f4      	b.n	80048ca <_vfprintf_r+0x149a>
 80048e0:	9903      	ldr	r1, [sp, #12]
 80048e2:	4658      	mov	r0, fp
 80048e4:	f001 f87e 	bl	80059e4 <_free_r>
 80048e8:	f7ff bbaf 	b.w	800404a <_vfprintf_r+0xc1a>
 80048ec:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80048ee:	b91b      	cbnz	r3, 80048f8 <_vfprintf_r+0x14c8>
 80048f0:	2300      	movs	r3, #0
 80048f2:	9327      	str	r3, [sp, #156]	; 0x9c
 80048f4:	f7ff b871 	b.w	80039da <_vfprintf_r+0x5aa>
 80048f8:	aa26      	add	r2, sp, #152	; 0x98
 80048fa:	4641      	mov	r1, r8
 80048fc:	4658      	mov	r0, fp
 80048fe:	f001 ff72 	bl	80067e6 <__sprint_r>
 8004902:	2800      	cmp	r0, #0
 8004904:	f47f a869 	bne.w	80039da <_vfprintf_r+0x5aa>
 8004908:	e7f2      	b.n	80048f0 <_vfprintf_r+0x14c0>
 800490a:	bf00      	nop
 800490c:	08008430 	.word	0x08008430
 8004910:	08008420 	.word	0x08008420

08004914 <__sbprintf>:
 8004914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004916:	460c      	mov	r4, r1
 8004918:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 800491c:	461f      	mov	r7, r3
 800491e:	8989      	ldrh	r1, [r1, #12]
 8004920:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004922:	9319      	str	r3, [sp, #100]	; 0x64
 8004924:	89e3      	ldrh	r3, [r4, #14]
 8004926:	f8ad 300e 	strh.w	r3, [sp, #14]
 800492a:	f021 0102 	bic.w	r1, r1, #2
 800492e:	69e3      	ldr	r3, [r4, #28]
 8004930:	f8ad 100c 	strh.w	r1, [sp, #12]
 8004934:	9307      	str	r3, [sp, #28]
 8004936:	a91a      	add	r1, sp, #104	; 0x68
 8004938:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800493a:	9309      	str	r3, [sp, #36]	; 0x24
 800493c:	4615      	mov	r5, r2
 800493e:	2300      	movs	r3, #0
 8004940:	4606      	mov	r6, r0
 8004942:	9100      	str	r1, [sp, #0]
 8004944:	9104      	str	r1, [sp, #16]
 8004946:	a816      	add	r0, sp, #88	; 0x58
 8004948:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800494c:	9102      	str	r1, [sp, #8]
 800494e:	9105      	str	r1, [sp, #20]
 8004950:	9306      	str	r3, [sp, #24]
 8004952:	f001 f92f 	bl	8005bb4 <__retarget_lock_init_recursive>
 8004956:	462a      	mov	r2, r5
 8004958:	463b      	mov	r3, r7
 800495a:	4669      	mov	r1, sp
 800495c:	4630      	mov	r0, r6
 800495e:	f7fe fd67 	bl	8003430 <_vfprintf_r>
 8004962:	1e05      	subs	r5, r0, #0
 8004964:	db07      	blt.n	8004976 <__sbprintf+0x62>
 8004966:	4669      	mov	r1, sp
 8004968:	4630      	mov	r0, r6
 800496a:	f000 ff3f 	bl	80057ec <_fflush_r>
 800496e:	2800      	cmp	r0, #0
 8004970:	bf18      	it	ne
 8004972:	f04f 35ff 	movne.w	r5, #4294967295
 8004976:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800497a:	9816      	ldr	r0, [sp, #88]	; 0x58
 800497c:	065b      	lsls	r3, r3, #25
 800497e:	bf42      	ittt	mi
 8004980:	89a3      	ldrhmi	r3, [r4, #12]
 8004982:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8004986:	81a3      	strhmi	r3, [r4, #12]
 8004988:	f001 f915 	bl	8005bb6 <__retarget_lock_close_recursive>
 800498c:	4628      	mov	r0, r5
 800498e:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 8004992:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004994 <__swsetup_r>:
 8004994:	b538      	push	{r3, r4, r5, lr}
 8004996:	4b2a      	ldr	r3, [pc, #168]	; (8004a40 <__swsetup_r+0xac>)
 8004998:	4605      	mov	r5, r0
 800499a:	6818      	ldr	r0, [r3, #0]
 800499c:	460c      	mov	r4, r1
 800499e:	b118      	cbz	r0, 80049a8 <__swsetup_r+0x14>
 80049a0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80049a2:	b90b      	cbnz	r3, 80049a8 <__swsetup_r+0x14>
 80049a4:	f000 ff8e 	bl	80058c4 <__sinit>
 80049a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	0711      	lsls	r1, r2, #28
 80049b0:	d422      	bmi.n	80049f8 <__swsetup_r+0x64>
 80049b2:	06d0      	lsls	r0, r2, #27
 80049b4:	d407      	bmi.n	80049c6 <__swsetup_r+0x32>
 80049b6:	2209      	movs	r2, #9
 80049b8:	602a      	str	r2, [r5, #0]
 80049ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049be:	81a3      	strh	r3, [r4, #12]
 80049c0:	f04f 30ff 	mov.w	r0, #4294967295
 80049c4:	e034      	b.n	8004a30 <__swsetup_r+0x9c>
 80049c6:	0751      	lsls	r1, r2, #29
 80049c8:	d512      	bpl.n	80049f0 <__swsetup_r+0x5c>
 80049ca:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80049cc:	b141      	cbz	r1, 80049e0 <__swsetup_r+0x4c>
 80049ce:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80049d2:	4299      	cmp	r1, r3
 80049d4:	d002      	beq.n	80049dc <__swsetup_r+0x48>
 80049d6:	4628      	mov	r0, r5
 80049d8:	f001 f804 	bl	80059e4 <_free_r>
 80049dc:	2300      	movs	r3, #0
 80049de:	6323      	str	r3, [r4, #48]	; 0x30
 80049e0:	89a3      	ldrh	r3, [r4, #12]
 80049e2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80049e6:	81a3      	strh	r3, [r4, #12]
 80049e8:	2300      	movs	r3, #0
 80049ea:	6063      	str	r3, [r4, #4]
 80049ec:	6923      	ldr	r3, [r4, #16]
 80049ee:	6023      	str	r3, [r4, #0]
 80049f0:	89a3      	ldrh	r3, [r4, #12]
 80049f2:	f043 0308 	orr.w	r3, r3, #8
 80049f6:	81a3      	strh	r3, [r4, #12]
 80049f8:	6923      	ldr	r3, [r4, #16]
 80049fa:	b94b      	cbnz	r3, 8004a10 <__swsetup_r+0x7c>
 80049fc:	89a3      	ldrh	r3, [r4, #12]
 80049fe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004a02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a06:	d003      	beq.n	8004a10 <__swsetup_r+0x7c>
 8004a08:	4621      	mov	r1, r4
 8004a0a:	4628      	mov	r0, r5
 8004a0c:	f001 f902 	bl	8005c14 <__smakebuf_r>
 8004a10:	89a2      	ldrh	r2, [r4, #12]
 8004a12:	f012 0301 	ands.w	r3, r2, #1
 8004a16:	d00c      	beq.n	8004a32 <__swsetup_r+0x9e>
 8004a18:	2300      	movs	r3, #0
 8004a1a:	60a3      	str	r3, [r4, #8]
 8004a1c:	6963      	ldr	r3, [r4, #20]
 8004a1e:	425b      	negs	r3, r3
 8004a20:	61a3      	str	r3, [r4, #24]
 8004a22:	6923      	ldr	r3, [r4, #16]
 8004a24:	b953      	cbnz	r3, 8004a3c <__swsetup_r+0xa8>
 8004a26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a2a:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004a2e:	d1c4      	bne.n	80049ba <__swsetup_r+0x26>
 8004a30:	bd38      	pop	{r3, r4, r5, pc}
 8004a32:	0792      	lsls	r2, r2, #30
 8004a34:	bf58      	it	pl
 8004a36:	6963      	ldrpl	r3, [r4, #20]
 8004a38:	60a3      	str	r3, [r4, #8]
 8004a3a:	e7f2      	b.n	8004a22 <__swsetup_r+0x8e>
 8004a3c:	2000      	movs	r0, #0
 8004a3e:	e7f7      	b.n	8004a30 <__swsetup_r+0x9c>
 8004a40:	2000000c 	.word	0x2000000c

08004a44 <register_fini>:
 8004a44:	4b02      	ldr	r3, [pc, #8]	; (8004a50 <register_fini+0xc>)
 8004a46:	b113      	cbz	r3, 8004a4e <register_fini+0xa>
 8004a48:	4802      	ldr	r0, [pc, #8]	; (8004a54 <register_fini+0x10>)
 8004a4a:	f000 b805 	b.w	8004a58 <atexit>
 8004a4e:	4770      	bx	lr
 8004a50:	00000000 	.word	0x00000000
 8004a54:	08005915 	.word	0x08005915

08004a58 <atexit>:
 8004a58:	2300      	movs	r3, #0
 8004a5a:	4601      	mov	r1, r0
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f001 bf06 	b.w	8006870 <__register_exitproc>

08004a64 <quorem>:
 8004a64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a68:	6903      	ldr	r3, [r0, #16]
 8004a6a:	690c      	ldr	r4, [r1, #16]
 8004a6c:	42a3      	cmp	r3, r4
 8004a6e:	4680      	mov	r8, r0
 8004a70:	f2c0 8082 	blt.w	8004b78 <quorem+0x114>
 8004a74:	3c01      	subs	r4, #1
 8004a76:	f101 0714 	add.w	r7, r1, #20
 8004a7a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004a7e:	f100 0614 	add.w	r6, r0, #20
 8004a82:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004a86:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004a8a:	eb06 030c 	add.w	r3, r6, ip
 8004a8e:	3501      	adds	r5, #1
 8004a90:	eb07 090c 	add.w	r9, r7, ip
 8004a94:	9301      	str	r3, [sp, #4]
 8004a96:	fbb0 f5f5 	udiv	r5, r0, r5
 8004a9a:	b395      	cbz	r5, 8004b02 <quorem+0x9e>
 8004a9c:	f04f 0a00 	mov.w	sl, #0
 8004aa0:	4638      	mov	r0, r7
 8004aa2:	46b6      	mov	lr, r6
 8004aa4:	46d3      	mov	fp, sl
 8004aa6:	f850 2b04 	ldr.w	r2, [r0], #4
 8004aaa:	b293      	uxth	r3, r2
 8004aac:	fb05 a303 	mla	r3, r5, r3, sl
 8004ab0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	ebab 0303 	sub.w	r3, fp, r3
 8004aba:	0c12      	lsrs	r2, r2, #16
 8004abc:	f8de b000 	ldr.w	fp, [lr]
 8004ac0:	fb05 a202 	mla	r2, r5, r2, sl
 8004ac4:	fa13 f38b 	uxtah	r3, r3, fp
 8004ac8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004acc:	fa1f fb82 	uxth.w	fp, r2
 8004ad0:	f8de 2000 	ldr.w	r2, [lr]
 8004ad4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004ad8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ae2:	4581      	cmp	r9, r0
 8004ae4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004ae8:	f84e 3b04 	str.w	r3, [lr], #4
 8004aec:	d2db      	bcs.n	8004aa6 <quorem+0x42>
 8004aee:	f856 300c 	ldr.w	r3, [r6, ip]
 8004af2:	b933      	cbnz	r3, 8004b02 <quorem+0x9e>
 8004af4:	9b01      	ldr	r3, [sp, #4]
 8004af6:	3b04      	subs	r3, #4
 8004af8:	429e      	cmp	r6, r3
 8004afa:	461a      	mov	r2, r3
 8004afc:	d330      	bcc.n	8004b60 <quorem+0xfc>
 8004afe:	f8c8 4010 	str.w	r4, [r8, #16]
 8004b02:	4640      	mov	r0, r8
 8004b04:	f001 fcfe 	bl	8006504 <__mcmp>
 8004b08:	2800      	cmp	r0, #0
 8004b0a:	db25      	blt.n	8004b58 <quorem+0xf4>
 8004b0c:	3501      	adds	r5, #1
 8004b0e:	4630      	mov	r0, r6
 8004b10:	f04f 0c00 	mov.w	ip, #0
 8004b14:	f857 2b04 	ldr.w	r2, [r7], #4
 8004b18:	f8d0 e000 	ldr.w	lr, [r0]
 8004b1c:	b293      	uxth	r3, r2
 8004b1e:	ebac 0303 	sub.w	r3, ip, r3
 8004b22:	0c12      	lsrs	r2, r2, #16
 8004b24:	fa13 f38e 	uxtah	r3, r3, lr
 8004b28:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004b2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b36:	45b9      	cmp	r9, r7
 8004b38:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004b3c:	f840 3b04 	str.w	r3, [r0], #4
 8004b40:	d2e8      	bcs.n	8004b14 <quorem+0xb0>
 8004b42:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004b46:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004b4a:	b92a      	cbnz	r2, 8004b58 <quorem+0xf4>
 8004b4c:	3b04      	subs	r3, #4
 8004b4e:	429e      	cmp	r6, r3
 8004b50:	461a      	mov	r2, r3
 8004b52:	d30b      	bcc.n	8004b6c <quorem+0x108>
 8004b54:	f8c8 4010 	str.w	r4, [r8, #16]
 8004b58:	4628      	mov	r0, r5
 8004b5a:	b003      	add	sp, #12
 8004b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b60:	6812      	ldr	r2, [r2, #0]
 8004b62:	3b04      	subs	r3, #4
 8004b64:	2a00      	cmp	r2, #0
 8004b66:	d1ca      	bne.n	8004afe <quorem+0x9a>
 8004b68:	3c01      	subs	r4, #1
 8004b6a:	e7c5      	b.n	8004af8 <quorem+0x94>
 8004b6c:	6812      	ldr	r2, [r2, #0]
 8004b6e:	3b04      	subs	r3, #4
 8004b70:	2a00      	cmp	r2, #0
 8004b72:	d1ef      	bne.n	8004b54 <quorem+0xf0>
 8004b74:	3c01      	subs	r4, #1
 8004b76:	e7ea      	b.n	8004b4e <quorem+0xea>
 8004b78:	2000      	movs	r0, #0
 8004b7a:	e7ee      	b.n	8004b5a <quorem+0xf6>
 8004b7c:	0000      	movs	r0, r0
	...

08004b80 <_dtoa_r>:
 8004b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b84:	b097      	sub	sp, #92	; 0x5c
 8004b86:	ec57 6b10 	vmov	r6, r7, d0
 8004b8a:	9106      	str	r1, [sp, #24]
 8004b8c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004b8e:	920b      	str	r2, [sp, #44]	; 0x2c
 8004b90:	4604      	mov	r4, r0
 8004b92:	9312      	str	r3, [sp, #72]	; 0x48
 8004b94:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8004b96:	e9cd 6700 	strd	r6, r7, [sp]
 8004b9a:	b141      	cbz	r1, 8004bae <_dtoa_r+0x2e>
 8004b9c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004b9e:	604a      	str	r2, [r1, #4]
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	4093      	lsls	r3, r2
 8004ba4:	608b      	str	r3, [r1, #8]
 8004ba6:	f001 fae8 	bl	800617a <_Bfree>
 8004baa:	2300      	movs	r3, #0
 8004bac:	6423      	str	r3, [r4, #64]	; 0x40
 8004bae:	1e3b      	subs	r3, r7, #0
 8004bb0:	bfb9      	ittee	lt
 8004bb2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004bb6:	9301      	strlt	r3, [sp, #4]
 8004bb8:	2300      	movge	r3, #0
 8004bba:	602b      	strge	r3, [r5, #0]
 8004bbc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004bc0:	4baf      	ldr	r3, [pc, #700]	; (8004e80 <_dtoa_r+0x300>)
 8004bc2:	bfbc      	itt	lt
 8004bc4:	2201      	movlt	r2, #1
 8004bc6:	602a      	strlt	r2, [r5, #0]
 8004bc8:	ea33 0308 	bics.w	r3, r3, r8
 8004bcc:	d116      	bne.n	8004bfc <_dtoa_r+0x7c>
 8004bce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004bd0:	f242 730f 	movw	r3, #9999	; 0x270f
 8004bd4:	6013      	str	r3, [r2, #0]
 8004bd6:	9b00      	ldr	r3, [sp, #0]
 8004bd8:	b923      	cbnz	r3, 8004be4 <_dtoa_r+0x64>
 8004bda:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004bde:	2800      	cmp	r0, #0
 8004be0:	f000 8543 	beq.w	800566a <_dtoa_r+0xaea>
 8004be4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004be6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8004e94 <_dtoa_r+0x314>
 8004bea:	b11b      	cbz	r3, 8004bf4 <_dtoa_r+0x74>
 8004bec:	f10b 0303 	add.w	r3, fp, #3
 8004bf0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004bf2:	6013      	str	r3, [r2, #0]
 8004bf4:	4658      	mov	r0, fp
 8004bf6:	b017      	add	sp, #92	; 0x5c
 8004bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bfc:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004c00:	2200      	movs	r2, #0
 8004c02:	2300      	movs	r3, #0
 8004c04:	4630      	mov	r0, r6
 8004c06:	4639      	mov	r1, r7
 8004c08:	f7fb ff7e 	bl	8000b08 <__aeabi_dcmpeq>
 8004c0c:	4681      	mov	r9, r0
 8004c0e:	b160      	cbz	r0, 8004c2a <_dtoa_r+0xaa>
 8004c10:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004c12:	2301      	movs	r3, #1
 8004c14:	6013      	str	r3, [r2, #0]
 8004c16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f000 8522 	beq.w	8005662 <_dtoa_r+0xae2>
 8004c1e:	4b99      	ldr	r3, [pc, #612]	; (8004e84 <_dtoa_r+0x304>)
 8004c20:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004c22:	f103 3bff 	add.w	fp, r3, #4294967295
 8004c26:	6013      	str	r3, [r2, #0]
 8004c28:	e7e4      	b.n	8004bf4 <_dtoa_r+0x74>
 8004c2a:	aa14      	add	r2, sp, #80	; 0x50
 8004c2c:	a915      	add	r1, sp, #84	; 0x54
 8004c2e:	ec47 6b10 	vmov	d0, r6, r7
 8004c32:	4620      	mov	r0, r4
 8004c34:	f001 fcdd 	bl	80065f2 <__d2b>
 8004c38:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004c3c:	9004      	str	r0, [sp, #16]
 8004c3e:	2d00      	cmp	r5, #0
 8004c40:	d07c      	beq.n	8004d3c <_dtoa_r+0x1bc>
 8004c42:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004c46:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8004c4a:	46b2      	mov	sl, r6
 8004c4c:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8004c50:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004c54:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8004c58:	2200      	movs	r2, #0
 8004c5a:	4b8b      	ldr	r3, [pc, #556]	; (8004e88 <_dtoa_r+0x308>)
 8004c5c:	4650      	mov	r0, sl
 8004c5e:	4659      	mov	r1, fp
 8004c60:	f7fb fb32 	bl	80002c8 <__aeabi_dsub>
 8004c64:	a380      	add	r3, pc, #512	; (adr r3, 8004e68 <_dtoa_r+0x2e8>)
 8004c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6a:	f7fb fce5 	bl	8000638 <__aeabi_dmul>
 8004c6e:	a380      	add	r3, pc, #512	; (adr r3, 8004e70 <_dtoa_r+0x2f0>)
 8004c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c74:	f7fb fb2a 	bl	80002cc <__adddf3>
 8004c78:	4606      	mov	r6, r0
 8004c7a:	4628      	mov	r0, r5
 8004c7c:	460f      	mov	r7, r1
 8004c7e:	f7fb fc71 	bl	8000564 <__aeabi_i2d>
 8004c82:	a37d      	add	r3, pc, #500	; (adr r3, 8004e78 <_dtoa_r+0x2f8>)
 8004c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c88:	f7fb fcd6 	bl	8000638 <__aeabi_dmul>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	460b      	mov	r3, r1
 8004c90:	4630      	mov	r0, r6
 8004c92:	4639      	mov	r1, r7
 8004c94:	f7fb fb1a 	bl	80002cc <__adddf3>
 8004c98:	4606      	mov	r6, r0
 8004c9a:	460f      	mov	r7, r1
 8004c9c:	f7fb ff7c 	bl	8000b98 <__aeabi_d2iz>
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	4682      	mov	sl, r0
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	4630      	mov	r0, r6
 8004ca8:	4639      	mov	r1, r7
 8004caa:	f7fb ff37 	bl	8000b1c <__aeabi_dcmplt>
 8004cae:	b148      	cbz	r0, 8004cc4 <_dtoa_r+0x144>
 8004cb0:	4650      	mov	r0, sl
 8004cb2:	f7fb fc57 	bl	8000564 <__aeabi_i2d>
 8004cb6:	4632      	mov	r2, r6
 8004cb8:	463b      	mov	r3, r7
 8004cba:	f7fb ff25 	bl	8000b08 <__aeabi_dcmpeq>
 8004cbe:	b908      	cbnz	r0, 8004cc4 <_dtoa_r+0x144>
 8004cc0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004cc4:	f1ba 0f16 	cmp.w	sl, #22
 8004cc8:	d859      	bhi.n	8004d7e <_dtoa_r+0x1fe>
 8004cca:	4970      	ldr	r1, [pc, #448]	; (8004e8c <_dtoa_r+0x30c>)
 8004ccc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004cd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004cd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004cd8:	f7fb ff3e 	bl	8000b58 <__aeabi_dcmpgt>
 8004cdc:	2800      	cmp	r0, #0
 8004cde:	d050      	beq.n	8004d82 <_dtoa_r+0x202>
 8004ce0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	930f      	str	r3, [sp, #60]	; 0x3c
 8004ce8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004cea:	1b5d      	subs	r5, r3, r5
 8004cec:	f1b5 0801 	subs.w	r8, r5, #1
 8004cf0:	bf49      	itett	mi
 8004cf2:	f1c5 0301 	rsbmi	r3, r5, #1
 8004cf6:	2300      	movpl	r3, #0
 8004cf8:	9305      	strmi	r3, [sp, #20]
 8004cfa:	f04f 0800 	movmi.w	r8, #0
 8004cfe:	bf58      	it	pl
 8004d00:	9305      	strpl	r3, [sp, #20]
 8004d02:	f1ba 0f00 	cmp.w	sl, #0
 8004d06:	db3e      	blt.n	8004d86 <_dtoa_r+0x206>
 8004d08:	2300      	movs	r3, #0
 8004d0a:	44d0      	add	r8, sl
 8004d0c:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004d10:	9307      	str	r3, [sp, #28]
 8004d12:	9b06      	ldr	r3, [sp, #24]
 8004d14:	2b09      	cmp	r3, #9
 8004d16:	f200 808d 	bhi.w	8004e34 <_dtoa_r+0x2b4>
 8004d1a:	2b05      	cmp	r3, #5
 8004d1c:	bfc4      	itt	gt
 8004d1e:	3b04      	subgt	r3, #4
 8004d20:	9306      	strgt	r3, [sp, #24]
 8004d22:	9b06      	ldr	r3, [sp, #24]
 8004d24:	f1a3 0302 	sub.w	r3, r3, #2
 8004d28:	bfcc      	ite	gt
 8004d2a:	2500      	movgt	r5, #0
 8004d2c:	2501      	movle	r5, #1
 8004d2e:	2b03      	cmp	r3, #3
 8004d30:	f200 808c 	bhi.w	8004e4c <_dtoa_r+0x2cc>
 8004d34:	e8df f003 	tbb	[pc, r3]
 8004d38:	6e317c7a 	.word	0x6e317c7a
 8004d3c:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8004d40:	441d      	add	r5, r3
 8004d42:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004d46:	2820      	cmp	r0, #32
 8004d48:	dd13      	ble.n	8004d72 <_dtoa_r+0x1f2>
 8004d4a:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004d4e:	9b00      	ldr	r3, [sp, #0]
 8004d50:	fa08 f800 	lsl.w	r8, r8, r0
 8004d54:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004d58:	fa23 f000 	lsr.w	r0, r3, r0
 8004d5c:	ea48 0000 	orr.w	r0, r8, r0
 8004d60:	f7fb fbf0 	bl	8000544 <__aeabi_ui2d>
 8004d64:	2301      	movs	r3, #1
 8004d66:	4682      	mov	sl, r0
 8004d68:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8004d6c:	3d01      	subs	r5, #1
 8004d6e:	9313      	str	r3, [sp, #76]	; 0x4c
 8004d70:	e772      	b.n	8004c58 <_dtoa_r+0xd8>
 8004d72:	9b00      	ldr	r3, [sp, #0]
 8004d74:	f1c0 0020 	rsb	r0, r0, #32
 8004d78:	fa03 f000 	lsl.w	r0, r3, r0
 8004d7c:	e7f0      	b.n	8004d60 <_dtoa_r+0x1e0>
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e7b1      	b.n	8004ce6 <_dtoa_r+0x166>
 8004d82:	900f      	str	r0, [sp, #60]	; 0x3c
 8004d84:	e7b0      	b.n	8004ce8 <_dtoa_r+0x168>
 8004d86:	9b05      	ldr	r3, [sp, #20]
 8004d88:	eba3 030a 	sub.w	r3, r3, sl
 8004d8c:	9305      	str	r3, [sp, #20]
 8004d8e:	f1ca 0300 	rsb	r3, sl, #0
 8004d92:	9307      	str	r3, [sp, #28]
 8004d94:	2300      	movs	r3, #0
 8004d96:	930e      	str	r3, [sp, #56]	; 0x38
 8004d98:	e7bb      	b.n	8004d12 <_dtoa_r+0x192>
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	930a      	str	r3, [sp, #40]	; 0x28
 8004d9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	dd56      	ble.n	8004e52 <_dtoa_r+0x2d2>
 8004da4:	9302      	str	r3, [sp, #8]
 8004da6:	4699      	mov	r9, r3
 8004da8:	2200      	movs	r2, #0
 8004daa:	6462      	str	r2, [r4, #68]	; 0x44
 8004dac:	2204      	movs	r2, #4
 8004dae:	f102 0014 	add.w	r0, r2, #20
 8004db2:	4298      	cmp	r0, r3
 8004db4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004db6:	d951      	bls.n	8004e5c <_dtoa_r+0x2dc>
 8004db8:	4620      	mov	r0, r4
 8004dba:	f001 f9b9 	bl	8006130 <_Balloc>
 8004dbe:	f1b9 0f0e 	cmp.w	r9, #14
 8004dc2:	4683      	mov	fp, r0
 8004dc4:	6420      	str	r0, [r4, #64]	; 0x40
 8004dc6:	f200 80e8 	bhi.w	8004f9a <_dtoa_r+0x41a>
 8004dca:	2d00      	cmp	r5, #0
 8004dcc:	f000 80e5 	beq.w	8004f9a <_dtoa_r+0x41a>
 8004dd0:	ed9d 7b00 	vldr	d7, [sp]
 8004dd4:	f1ba 0f00 	cmp.w	sl, #0
 8004dd8:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8004ddc:	dd76      	ble.n	8004ecc <_dtoa_r+0x34c>
 8004dde:	4a2b      	ldr	r2, [pc, #172]	; (8004e8c <_dtoa_r+0x30c>)
 8004de0:	f00a 030f 	and.w	r3, sl, #15
 8004de4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004de8:	ed93 7b00 	vldr	d7, [r3]
 8004dec:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004df0:	06f0      	lsls	r0, r6, #27
 8004df2:	ed8d 7b08 	vstr	d7, [sp, #32]
 8004df6:	d567      	bpl.n	8004ec8 <_dtoa_r+0x348>
 8004df8:	4b25      	ldr	r3, [pc, #148]	; (8004e90 <_dtoa_r+0x310>)
 8004dfa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004dfe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004e02:	f7fb fd43 	bl	800088c <__aeabi_ddiv>
 8004e06:	e9cd 0100 	strd	r0, r1, [sp]
 8004e0a:	f006 060f 	and.w	r6, r6, #15
 8004e0e:	2503      	movs	r5, #3
 8004e10:	4f1f      	ldr	r7, [pc, #124]	; (8004e90 <_dtoa_r+0x310>)
 8004e12:	e04e      	b.n	8004eb2 <_dtoa_r+0x332>
 8004e14:	2301      	movs	r3, #1
 8004e16:	930a      	str	r3, [sp, #40]	; 0x28
 8004e18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e1a:	4453      	add	r3, sl
 8004e1c:	f103 0901 	add.w	r9, r3, #1
 8004e20:	9302      	str	r3, [sp, #8]
 8004e22:	464b      	mov	r3, r9
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	bfb8      	it	lt
 8004e28:	2301      	movlt	r3, #1
 8004e2a:	e7bd      	b.n	8004da8 <_dtoa_r+0x228>
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	e7b5      	b.n	8004d9c <_dtoa_r+0x21c>
 8004e30:	2300      	movs	r3, #0
 8004e32:	e7f0      	b.n	8004e16 <_dtoa_r+0x296>
 8004e34:	2501      	movs	r5, #1
 8004e36:	2300      	movs	r3, #0
 8004e38:	9306      	str	r3, [sp, #24]
 8004e3a:	950a      	str	r5, [sp, #40]	; 0x28
 8004e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e40:	9302      	str	r3, [sp, #8]
 8004e42:	4699      	mov	r9, r3
 8004e44:	2200      	movs	r2, #0
 8004e46:	2312      	movs	r3, #18
 8004e48:	920b      	str	r2, [sp, #44]	; 0x2c
 8004e4a:	e7ad      	b.n	8004da8 <_dtoa_r+0x228>
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	930a      	str	r3, [sp, #40]	; 0x28
 8004e50:	e7f4      	b.n	8004e3c <_dtoa_r+0x2bc>
 8004e52:	2301      	movs	r3, #1
 8004e54:	9302      	str	r3, [sp, #8]
 8004e56:	4699      	mov	r9, r3
 8004e58:	461a      	mov	r2, r3
 8004e5a:	e7f5      	b.n	8004e48 <_dtoa_r+0x2c8>
 8004e5c:	3101      	adds	r1, #1
 8004e5e:	6461      	str	r1, [r4, #68]	; 0x44
 8004e60:	0052      	lsls	r2, r2, #1
 8004e62:	e7a4      	b.n	8004dae <_dtoa_r+0x22e>
 8004e64:	f3af 8000 	nop.w
 8004e68:	636f4361 	.word	0x636f4361
 8004e6c:	3fd287a7 	.word	0x3fd287a7
 8004e70:	8b60c8b3 	.word	0x8b60c8b3
 8004e74:	3fc68a28 	.word	0x3fc68a28
 8004e78:	509f79fb 	.word	0x509f79fb
 8004e7c:	3fd34413 	.word	0x3fd34413
 8004e80:	7ff00000 	.word	0x7ff00000
 8004e84:	0800841f 	.word	0x0800841f
 8004e88:	3ff80000 	.word	0x3ff80000
 8004e8c:	08008478 	.word	0x08008478
 8004e90:	08008450 	.word	0x08008450
 8004e94:	08008449 	.word	0x08008449
 8004e98:	07f1      	lsls	r1, r6, #31
 8004e9a:	d508      	bpl.n	8004eae <_dtoa_r+0x32e>
 8004e9c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004ea0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ea4:	f7fb fbc8 	bl	8000638 <__aeabi_dmul>
 8004ea8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004eac:	3501      	adds	r5, #1
 8004eae:	1076      	asrs	r6, r6, #1
 8004eb0:	3708      	adds	r7, #8
 8004eb2:	2e00      	cmp	r6, #0
 8004eb4:	d1f0      	bne.n	8004e98 <_dtoa_r+0x318>
 8004eb6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004eba:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ebe:	f7fb fce5 	bl	800088c <__aeabi_ddiv>
 8004ec2:	e9cd 0100 	strd	r0, r1, [sp]
 8004ec6:	e01a      	b.n	8004efe <_dtoa_r+0x37e>
 8004ec8:	2502      	movs	r5, #2
 8004eca:	e7a1      	b.n	8004e10 <_dtoa_r+0x290>
 8004ecc:	f000 80a0 	beq.w	8005010 <_dtoa_r+0x490>
 8004ed0:	f1ca 0600 	rsb	r6, sl, #0
 8004ed4:	4b9f      	ldr	r3, [pc, #636]	; (8005154 <_dtoa_r+0x5d4>)
 8004ed6:	4fa0      	ldr	r7, [pc, #640]	; (8005158 <_dtoa_r+0x5d8>)
 8004ed8:	f006 020f 	and.w	r2, r6, #15
 8004edc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004ee8:	f7fb fba6 	bl	8000638 <__aeabi_dmul>
 8004eec:	e9cd 0100 	strd	r0, r1, [sp]
 8004ef0:	1136      	asrs	r6, r6, #4
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	2502      	movs	r5, #2
 8004ef6:	2e00      	cmp	r6, #0
 8004ef8:	d17f      	bne.n	8004ffa <_dtoa_r+0x47a>
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1e1      	bne.n	8004ec2 <_dtoa_r+0x342>
 8004efe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f000 8087 	beq.w	8005014 <_dtoa_r+0x494>
 8004f06:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	4b93      	ldr	r3, [pc, #588]	; (800515c <_dtoa_r+0x5dc>)
 8004f0e:	4630      	mov	r0, r6
 8004f10:	4639      	mov	r1, r7
 8004f12:	f7fb fe03 	bl	8000b1c <__aeabi_dcmplt>
 8004f16:	2800      	cmp	r0, #0
 8004f18:	d07c      	beq.n	8005014 <_dtoa_r+0x494>
 8004f1a:	f1b9 0f00 	cmp.w	r9, #0
 8004f1e:	d079      	beq.n	8005014 <_dtoa_r+0x494>
 8004f20:	9b02      	ldr	r3, [sp, #8]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	dd35      	ble.n	8004f92 <_dtoa_r+0x412>
 8004f26:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004f2a:	9308      	str	r3, [sp, #32]
 8004f2c:	4639      	mov	r1, r7
 8004f2e:	2200      	movs	r2, #0
 8004f30:	4b8b      	ldr	r3, [pc, #556]	; (8005160 <_dtoa_r+0x5e0>)
 8004f32:	4630      	mov	r0, r6
 8004f34:	f7fb fb80 	bl	8000638 <__aeabi_dmul>
 8004f38:	e9cd 0100 	strd	r0, r1, [sp]
 8004f3c:	9f02      	ldr	r7, [sp, #8]
 8004f3e:	3501      	adds	r5, #1
 8004f40:	4628      	mov	r0, r5
 8004f42:	f7fb fb0f 	bl	8000564 <__aeabi_i2d>
 8004f46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004f4a:	f7fb fb75 	bl	8000638 <__aeabi_dmul>
 8004f4e:	2200      	movs	r2, #0
 8004f50:	4b84      	ldr	r3, [pc, #528]	; (8005164 <_dtoa_r+0x5e4>)
 8004f52:	f7fb f9bb 	bl	80002cc <__adddf3>
 8004f56:	4605      	mov	r5, r0
 8004f58:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004f5c:	2f00      	cmp	r7, #0
 8004f5e:	d15d      	bne.n	800501c <_dtoa_r+0x49c>
 8004f60:	2200      	movs	r2, #0
 8004f62:	4b81      	ldr	r3, [pc, #516]	; (8005168 <_dtoa_r+0x5e8>)
 8004f64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f68:	f7fb f9ae 	bl	80002c8 <__aeabi_dsub>
 8004f6c:	462a      	mov	r2, r5
 8004f6e:	4633      	mov	r3, r6
 8004f70:	e9cd 0100 	strd	r0, r1, [sp]
 8004f74:	f7fb fdf0 	bl	8000b58 <__aeabi_dcmpgt>
 8004f78:	2800      	cmp	r0, #0
 8004f7a:	f040 8288 	bne.w	800548e <_dtoa_r+0x90e>
 8004f7e:	462a      	mov	r2, r5
 8004f80:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004f84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f88:	f7fb fdc8 	bl	8000b1c <__aeabi_dcmplt>
 8004f8c:	2800      	cmp	r0, #0
 8004f8e:	f040 827c 	bne.w	800548a <_dtoa_r+0x90a>
 8004f92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004f96:	e9cd 2300 	strd	r2, r3, [sp]
 8004f9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f2c0 8150 	blt.w	8005242 <_dtoa_r+0x6c2>
 8004fa2:	f1ba 0f0e 	cmp.w	sl, #14
 8004fa6:	f300 814c 	bgt.w	8005242 <_dtoa_r+0x6c2>
 8004faa:	4b6a      	ldr	r3, [pc, #424]	; (8005154 <_dtoa_r+0x5d4>)
 8004fac:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004fb0:	ed93 7b00 	vldr	d7, [r3]
 8004fb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004fbc:	f280 80d8 	bge.w	8005170 <_dtoa_r+0x5f0>
 8004fc0:	f1b9 0f00 	cmp.w	r9, #0
 8004fc4:	f300 80d4 	bgt.w	8005170 <_dtoa_r+0x5f0>
 8004fc8:	f040 825e 	bne.w	8005488 <_dtoa_r+0x908>
 8004fcc:	2200      	movs	r2, #0
 8004fce:	4b66      	ldr	r3, [pc, #408]	; (8005168 <_dtoa_r+0x5e8>)
 8004fd0:	ec51 0b17 	vmov	r0, r1, d7
 8004fd4:	f7fb fb30 	bl	8000638 <__aeabi_dmul>
 8004fd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004fdc:	f7fb fdb2 	bl	8000b44 <__aeabi_dcmpge>
 8004fe0:	464f      	mov	r7, r9
 8004fe2:	464e      	mov	r6, r9
 8004fe4:	2800      	cmp	r0, #0
 8004fe6:	f040 8234 	bne.w	8005452 <_dtoa_r+0x8d2>
 8004fea:	2331      	movs	r3, #49	; 0x31
 8004fec:	f10b 0501 	add.w	r5, fp, #1
 8004ff0:	f88b 3000 	strb.w	r3, [fp]
 8004ff4:	f10a 0a01 	add.w	sl, sl, #1
 8004ff8:	e22f      	b.n	800545a <_dtoa_r+0x8da>
 8004ffa:	07f2      	lsls	r2, r6, #31
 8004ffc:	d505      	bpl.n	800500a <_dtoa_r+0x48a>
 8004ffe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005002:	f7fb fb19 	bl	8000638 <__aeabi_dmul>
 8005006:	3501      	adds	r5, #1
 8005008:	2301      	movs	r3, #1
 800500a:	1076      	asrs	r6, r6, #1
 800500c:	3708      	adds	r7, #8
 800500e:	e772      	b.n	8004ef6 <_dtoa_r+0x376>
 8005010:	2502      	movs	r5, #2
 8005012:	e774      	b.n	8004efe <_dtoa_r+0x37e>
 8005014:	f8cd a020 	str.w	sl, [sp, #32]
 8005018:	464f      	mov	r7, r9
 800501a:	e791      	b.n	8004f40 <_dtoa_r+0x3c0>
 800501c:	4b4d      	ldr	r3, [pc, #308]	; (8005154 <_dtoa_r+0x5d4>)
 800501e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005022:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005028:	2b00      	cmp	r3, #0
 800502a:	d047      	beq.n	80050bc <_dtoa_r+0x53c>
 800502c:	4602      	mov	r2, r0
 800502e:	460b      	mov	r3, r1
 8005030:	2000      	movs	r0, #0
 8005032:	494e      	ldr	r1, [pc, #312]	; (800516c <_dtoa_r+0x5ec>)
 8005034:	f7fb fc2a 	bl	800088c <__aeabi_ddiv>
 8005038:	462a      	mov	r2, r5
 800503a:	4633      	mov	r3, r6
 800503c:	f7fb f944 	bl	80002c8 <__aeabi_dsub>
 8005040:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005044:	465d      	mov	r5, fp
 8005046:	e9dd 0100 	ldrd	r0, r1, [sp]
 800504a:	f7fb fda5 	bl	8000b98 <__aeabi_d2iz>
 800504e:	4606      	mov	r6, r0
 8005050:	f7fb fa88 	bl	8000564 <__aeabi_i2d>
 8005054:	4602      	mov	r2, r0
 8005056:	460b      	mov	r3, r1
 8005058:	e9dd 0100 	ldrd	r0, r1, [sp]
 800505c:	f7fb f934 	bl	80002c8 <__aeabi_dsub>
 8005060:	3630      	adds	r6, #48	; 0x30
 8005062:	f805 6b01 	strb.w	r6, [r5], #1
 8005066:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800506a:	e9cd 0100 	strd	r0, r1, [sp]
 800506e:	f7fb fd55 	bl	8000b1c <__aeabi_dcmplt>
 8005072:	2800      	cmp	r0, #0
 8005074:	d163      	bne.n	800513e <_dtoa_r+0x5be>
 8005076:	e9dd 2300 	ldrd	r2, r3, [sp]
 800507a:	2000      	movs	r0, #0
 800507c:	4937      	ldr	r1, [pc, #220]	; (800515c <_dtoa_r+0x5dc>)
 800507e:	f7fb f923 	bl	80002c8 <__aeabi_dsub>
 8005082:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005086:	f7fb fd49 	bl	8000b1c <__aeabi_dcmplt>
 800508a:	2800      	cmp	r0, #0
 800508c:	f040 80b7 	bne.w	80051fe <_dtoa_r+0x67e>
 8005090:	eba5 030b 	sub.w	r3, r5, fp
 8005094:	429f      	cmp	r7, r3
 8005096:	f77f af7c 	ble.w	8004f92 <_dtoa_r+0x412>
 800509a:	2200      	movs	r2, #0
 800509c:	4b30      	ldr	r3, [pc, #192]	; (8005160 <_dtoa_r+0x5e0>)
 800509e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80050a2:	f7fb fac9 	bl	8000638 <__aeabi_dmul>
 80050a6:	2200      	movs	r2, #0
 80050a8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80050ac:	4b2c      	ldr	r3, [pc, #176]	; (8005160 <_dtoa_r+0x5e0>)
 80050ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80050b2:	f7fb fac1 	bl	8000638 <__aeabi_dmul>
 80050b6:	e9cd 0100 	strd	r0, r1, [sp]
 80050ba:	e7c4      	b.n	8005046 <_dtoa_r+0x4c6>
 80050bc:	462a      	mov	r2, r5
 80050be:	4633      	mov	r3, r6
 80050c0:	f7fb faba 	bl	8000638 <__aeabi_dmul>
 80050c4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80050c8:	eb0b 0507 	add.w	r5, fp, r7
 80050cc:	465e      	mov	r6, fp
 80050ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80050d2:	f7fb fd61 	bl	8000b98 <__aeabi_d2iz>
 80050d6:	4607      	mov	r7, r0
 80050d8:	f7fb fa44 	bl	8000564 <__aeabi_i2d>
 80050dc:	3730      	adds	r7, #48	; 0x30
 80050de:	4602      	mov	r2, r0
 80050e0:	460b      	mov	r3, r1
 80050e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80050e6:	f7fb f8ef 	bl	80002c8 <__aeabi_dsub>
 80050ea:	f806 7b01 	strb.w	r7, [r6], #1
 80050ee:	42ae      	cmp	r6, r5
 80050f0:	e9cd 0100 	strd	r0, r1, [sp]
 80050f4:	f04f 0200 	mov.w	r2, #0
 80050f8:	d126      	bne.n	8005148 <_dtoa_r+0x5c8>
 80050fa:	4b1c      	ldr	r3, [pc, #112]	; (800516c <_dtoa_r+0x5ec>)
 80050fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005100:	f7fb f8e4 	bl	80002cc <__adddf3>
 8005104:	4602      	mov	r2, r0
 8005106:	460b      	mov	r3, r1
 8005108:	e9dd 0100 	ldrd	r0, r1, [sp]
 800510c:	f7fb fd24 	bl	8000b58 <__aeabi_dcmpgt>
 8005110:	2800      	cmp	r0, #0
 8005112:	d174      	bne.n	80051fe <_dtoa_r+0x67e>
 8005114:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005118:	2000      	movs	r0, #0
 800511a:	4914      	ldr	r1, [pc, #80]	; (800516c <_dtoa_r+0x5ec>)
 800511c:	f7fb f8d4 	bl	80002c8 <__aeabi_dsub>
 8005120:	4602      	mov	r2, r0
 8005122:	460b      	mov	r3, r1
 8005124:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005128:	f7fb fcf8 	bl	8000b1c <__aeabi_dcmplt>
 800512c:	2800      	cmp	r0, #0
 800512e:	f43f af30 	beq.w	8004f92 <_dtoa_r+0x412>
 8005132:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005136:	2b30      	cmp	r3, #48	; 0x30
 8005138:	f105 32ff 	add.w	r2, r5, #4294967295
 800513c:	d002      	beq.n	8005144 <_dtoa_r+0x5c4>
 800513e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005142:	e04a      	b.n	80051da <_dtoa_r+0x65a>
 8005144:	4615      	mov	r5, r2
 8005146:	e7f4      	b.n	8005132 <_dtoa_r+0x5b2>
 8005148:	4b05      	ldr	r3, [pc, #20]	; (8005160 <_dtoa_r+0x5e0>)
 800514a:	f7fb fa75 	bl	8000638 <__aeabi_dmul>
 800514e:	e9cd 0100 	strd	r0, r1, [sp]
 8005152:	e7bc      	b.n	80050ce <_dtoa_r+0x54e>
 8005154:	08008478 	.word	0x08008478
 8005158:	08008450 	.word	0x08008450
 800515c:	3ff00000 	.word	0x3ff00000
 8005160:	40240000 	.word	0x40240000
 8005164:	401c0000 	.word	0x401c0000
 8005168:	40140000 	.word	0x40140000
 800516c:	3fe00000 	.word	0x3fe00000
 8005170:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005174:	465d      	mov	r5, fp
 8005176:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800517a:	4630      	mov	r0, r6
 800517c:	4639      	mov	r1, r7
 800517e:	f7fb fb85 	bl	800088c <__aeabi_ddiv>
 8005182:	f7fb fd09 	bl	8000b98 <__aeabi_d2iz>
 8005186:	4680      	mov	r8, r0
 8005188:	f7fb f9ec 	bl	8000564 <__aeabi_i2d>
 800518c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005190:	f7fb fa52 	bl	8000638 <__aeabi_dmul>
 8005194:	4602      	mov	r2, r0
 8005196:	460b      	mov	r3, r1
 8005198:	4630      	mov	r0, r6
 800519a:	4639      	mov	r1, r7
 800519c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80051a0:	f7fb f892 	bl	80002c8 <__aeabi_dsub>
 80051a4:	f805 6b01 	strb.w	r6, [r5], #1
 80051a8:	eba5 060b 	sub.w	r6, r5, fp
 80051ac:	45b1      	cmp	r9, r6
 80051ae:	4602      	mov	r2, r0
 80051b0:	460b      	mov	r3, r1
 80051b2:	d139      	bne.n	8005228 <_dtoa_r+0x6a8>
 80051b4:	f7fb f88a 	bl	80002cc <__adddf3>
 80051b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80051bc:	4606      	mov	r6, r0
 80051be:	460f      	mov	r7, r1
 80051c0:	f7fb fcca 	bl	8000b58 <__aeabi_dcmpgt>
 80051c4:	b9c8      	cbnz	r0, 80051fa <_dtoa_r+0x67a>
 80051c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80051ca:	4630      	mov	r0, r6
 80051cc:	4639      	mov	r1, r7
 80051ce:	f7fb fc9b 	bl	8000b08 <__aeabi_dcmpeq>
 80051d2:	b110      	cbz	r0, 80051da <_dtoa_r+0x65a>
 80051d4:	f018 0f01 	tst.w	r8, #1
 80051d8:	d10f      	bne.n	80051fa <_dtoa_r+0x67a>
 80051da:	9904      	ldr	r1, [sp, #16]
 80051dc:	4620      	mov	r0, r4
 80051de:	f000 ffcc 	bl	800617a <_Bfree>
 80051e2:	2300      	movs	r3, #0
 80051e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80051e6:	702b      	strb	r3, [r5, #0]
 80051e8:	f10a 0301 	add.w	r3, sl, #1
 80051ec:	6013      	str	r3, [r2, #0]
 80051ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f43f acff 	beq.w	8004bf4 <_dtoa_r+0x74>
 80051f6:	601d      	str	r5, [r3, #0]
 80051f8:	e4fc      	b.n	8004bf4 <_dtoa_r+0x74>
 80051fa:	f8cd a020 	str.w	sl, [sp, #32]
 80051fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005202:	2a39      	cmp	r2, #57	; 0x39
 8005204:	f105 33ff 	add.w	r3, r5, #4294967295
 8005208:	d108      	bne.n	800521c <_dtoa_r+0x69c>
 800520a:	459b      	cmp	fp, r3
 800520c:	d10a      	bne.n	8005224 <_dtoa_r+0x6a4>
 800520e:	9b08      	ldr	r3, [sp, #32]
 8005210:	3301      	adds	r3, #1
 8005212:	9308      	str	r3, [sp, #32]
 8005214:	2330      	movs	r3, #48	; 0x30
 8005216:	f88b 3000 	strb.w	r3, [fp]
 800521a:	465b      	mov	r3, fp
 800521c:	781a      	ldrb	r2, [r3, #0]
 800521e:	3201      	adds	r2, #1
 8005220:	701a      	strb	r2, [r3, #0]
 8005222:	e78c      	b.n	800513e <_dtoa_r+0x5be>
 8005224:	461d      	mov	r5, r3
 8005226:	e7ea      	b.n	80051fe <_dtoa_r+0x67e>
 8005228:	2200      	movs	r2, #0
 800522a:	4b9b      	ldr	r3, [pc, #620]	; (8005498 <_dtoa_r+0x918>)
 800522c:	f7fb fa04 	bl	8000638 <__aeabi_dmul>
 8005230:	2200      	movs	r2, #0
 8005232:	2300      	movs	r3, #0
 8005234:	4606      	mov	r6, r0
 8005236:	460f      	mov	r7, r1
 8005238:	f7fb fc66 	bl	8000b08 <__aeabi_dcmpeq>
 800523c:	2800      	cmp	r0, #0
 800523e:	d09a      	beq.n	8005176 <_dtoa_r+0x5f6>
 8005240:	e7cb      	b.n	80051da <_dtoa_r+0x65a>
 8005242:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005244:	2a00      	cmp	r2, #0
 8005246:	f000 808b 	beq.w	8005360 <_dtoa_r+0x7e0>
 800524a:	9a06      	ldr	r2, [sp, #24]
 800524c:	2a01      	cmp	r2, #1
 800524e:	dc6e      	bgt.n	800532e <_dtoa_r+0x7ae>
 8005250:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005252:	2a00      	cmp	r2, #0
 8005254:	d067      	beq.n	8005326 <_dtoa_r+0x7a6>
 8005256:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800525a:	9f07      	ldr	r7, [sp, #28]
 800525c:	9d05      	ldr	r5, [sp, #20]
 800525e:	9a05      	ldr	r2, [sp, #20]
 8005260:	2101      	movs	r1, #1
 8005262:	441a      	add	r2, r3
 8005264:	4620      	mov	r0, r4
 8005266:	9205      	str	r2, [sp, #20]
 8005268:	4498      	add	r8, r3
 800526a:	f001 f818 	bl	800629e <__i2b>
 800526e:	4606      	mov	r6, r0
 8005270:	2d00      	cmp	r5, #0
 8005272:	dd0c      	ble.n	800528e <_dtoa_r+0x70e>
 8005274:	f1b8 0f00 	cmp.w	r8, #0
 8005278:	dd09      	ble.n	800528e <_dtoa_r+0x70e>
 800527a:	4545      	cmp	r5, r8
 800527c:	9a05      	ldr	r2, [sp, #20]
 800527e:	462b      	mov	r3, r5
 8005280:	bfa8      	it	ge
 8005282:	4643      	movge	r3, r8
 8005284:	1ad2      	subs	r2, r2, r3
 8005286:	9205      	str	r2, [sp, #20]
 8005288:	1aed      	subs	r5, r5, r3
 800528a:	eba8 0803 	sub.w	r8, r8, r3
 800528e:	9b07      	ldr	r3, [sp, #28]
 8005290:	b1eb      	cbz	r3, 80052ce <_dtoa_r+0x74e>
 8005292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005294:	2b00      	cmp	r3, #0
 8005296:	d067      	beq.n	8005368 <_dtoa_r+0x7e8>
 8005298:	b18f      	cbz	r7, 80052be <_dtoa_r+0x73e>
 800529a:	4631      	mov	r1, r6
 800529c:	463a      	mov	r2, r7
 800529e:	4620      	mov	r0, r4
 80052a0:	f001 f89c 	bl	80063dc <__pow5mult>
 80052a4:	9a04      	ldr	r2, [sp, #16]
 80052a6:	4601      	mov	r1, r0
 80052a8:	4606      	mov	r6, r0
 80052aa:	4620      	mov	r0, r4
 80052ac:	f001 f800 	bl	80062b0 <__multiply>
 80052b0:	9904      	ldr	r1, [sp, #16]
 80052b2:	9008      	str	r0, [sp, #32]
 80052b4:	4620      	mov	r0, r4
 80052b6:	f000 ff60 	bl	800617a <_Bfree>
 80052ba:	9b08      	ldr	r3, [sp, #32]
 80052bc:	9304      	str	r3, [sp, #16]
 80052be:	9b07      	ldr	r3, [sp, #28]
 80052c0:	1bda      	subs	r2, r3, r7
 80052c2:	d004      	beq.n	80052ce <_dtoa_r+0x74e>
 80052c4:	9904      	ldr	r1, [sp, #16]
 80052c6:	4620      	mov	r0, r4
 80052c8:	f001 f888 	bl	80063dc <__pow5mult>
 80052cc:	9004      	str	r0, [sp, #16]
 80052ce:	2101      	movs	r1, #1
 80052d0:	4620      	mov	r0, r4
 80052d2:	f000 ffe4 	bl	800629e <__i2b>
 80052d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052d8:	4607      	mov	r7, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	f000 81cf 	beq.w	800567e <_dtoa_r+0xafe>
 80052e0:	461a      	mov	r2, r3
 80052e2:	4601      	mov	r1, r0
 80052e4:	4620      	mov	r0, r4
 80052e6:	f001 f879 	bl	80063dc <__pow5mult>
 80052ea:	9b06      	ldr	r3, [sp, #24]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	4607      	mov	r7, r0
 80052f0:	dc40      	bgt.n	8005374 <_dtoa_r+0x7f4>
 80052f2:	9b00      	ldr	r3, [sp, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d139      	bne.n	800536c <_dtoa_r+0x7ec>
 80052f8:	9b01      	ldr	r3, [sp, #4]
 80052fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d136      	bne.n	8005370 <_dtoa_r+0x7f0>
 8005302:	9b01      	ldr	r3, [sp, #4]
 8005304:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005308:	0d1b      	lsrs	r3, r3, #20
 800530a:	051b      	lsls	r3, r3, #20
 800530c:	b12b      	cbz	r3, 800531a <_dtoa_r+0x79a>
 800530e:	9b05      	ldr	r3, [sp, #20]
 8005310:	3301      	adds	r3, #1
 8005312:	9305      	str	r3, [sp, #20]
 8005314:	f108 0801 	add.w	r8, r8, #1
 8005318:	2301      	movs	r3, #1
 800531a:	9307      	str	r3, [sp, #28]
 800531c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800531e:	2b00      	cmp	r3, #0
 8005320:	d12a      	bne.n	8005378 <_dtoa_r+0x7f8>
 8005322:	2001      	movs	r0, #1
 8005324:	e030      	b.n	8005388 <_dtoa_r+0x808>
 8005326:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005328:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800532c:	e795      	b.n	800525a <_dtoa_r+0x6da>
 800532e:	9b07      	ldr	r3, [sp, #28]
 8005330:	f109 37ff 	add.w	r7, r9, #4294967295
 8005334:	42bb      	cmp	r3, r7
 8005336:	bfbf      	itttt	lt
 8005338:	9b07      	ldrlt	r3, [sp, #28]
 800533a:	9707      	strlt	r7, [sp, #28]
 800533c:	1afa      	sublt	r2, r7, r3
 800533e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005340:	bfbb      	ittet	lt
 8005342:	189b      	addlt	r3, r3, r2
 8005344:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005346:	1bdf      	subge	r7, r3, r7
 8005348:	2700      	movlt	r7, #0
 800534a:	f1b9 0f00 	cmp.w	r9, #0
 800534e:	bfb5      	itete	lt
 8005350:	9b05      	ldrlt	r3, [sp, #20]
 8005352:	9d05      	ldrge	r5, [sp, #20]
 8005354:	eba3 0509 	sublt.w	r5, r3, r9
 8005358:	464b      	movge	r3, r9
 800535a:	bfb8      	it	lt
 800535c:	2300      	movlt	r3, #0
 800535e:	e77e      	b.n	800525e <_dtoa_r+0x6de>
 8005360:	9f07      	ldr	r7, [sp, #28]
 8005362:	9d05      	ldr	r5, [sp, #20]
 8005364:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005366:	e783      	b.n	8005270 <_dtoa_r+0x6f0>
 8005368:	9a07      	ldr	r2, [sp, #28]
 800536a:	e7ab      	b.n	80052c4 <_dtoa_r+0x744>
 800536c:	2300      	movs	r3, #0
 800536e:	e7d4      	b.n	800531a <_dtoa_r+0x79a>
 8005370:	9b00      	ldr	r3, [sp, #0]
 8005372:	e7d2      	b.n	800531a <_dtoa_r+0x79a>
 8005374:	2300      	movs	r3, #0
 8005376:	9307      	str	r3, [sp, #28]
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800537e:	6918      	ldr	r0, [r3, #16]
 8005380:	f000 ff3f 	bl	8006202 <__hi0bits>
 8005384:	f1c0 0020 	rsb	r0, r0, #32
 8005388:	4440      	add	r0, r8
 800538a:	f010 001f 	ands.w	r0, r0, #31
 800538e:	d047      	beq.n	8005420 <_dtoa_r+0x8a0>
 8005390:	f1c0 0320 	rsb	r3, r0, #32
 8005394:	2b04      	cmp	r3, #4
 8005396:	dd3b      	ble.n	8005410 <_dtoa_r+0x890>
 8005398:	9b05      	ldr	r3, [sp, #20]
 800539a:	f1c0 001c 	rsb	r0, r0, #28
 800539e:	4403      	add	r3, r0
 80053a0:	9305      	str	r3, [sp, #20]
 80053a2:	4405      	add	r5, r0
 80053a4:	4480      	add	r8, r0
 80053a6:	9b05      	ldr	r3, [sp, #20]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	dd05      	ble.n	80053b8 <_dtoa_r+0x838>
 80053ac:	461a      	mov	r2, r3
 80053ae:	9904      	ldr	r1, [sp, #16]
 80053b0:	4620      	mov	r0, r4
 80053b2:	f001 f853 	bl	800645c <__lshift>
 80053b6:	9004      	str	r0, [sp, #16]
 80053b8:	f1b8 0f00 	cmp.w	r8, #0
 80053bc:	dd05      	ble.n	80053ca <_dtoa_r+0x84a>
 80053be:	4639      	mov	r1, r7
 80053c0:	4642      	mov	r2, r8
 80053c2:	4620      	mov	r0, r4
 80053c4:	f001 f84a 	bl	800645c <__lshift>
 80053c8:	4607      	mov	r7, r0
 80053ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80053cc:	b353      	cbz	r3, 8005424 <_dtoa_r+0x8a4>
 80053ce:	4639      	mov	r1, r7
 80053d0:	9804      	ldr	r0, [sp, #16]
 80053d2:	f001 f897 	bl	8006504 <__mcmp>
 80053d6:	2800      	cmp	r0, #0
 80053d8:	da24      	bge.n	8005424 <_dtoa_r+0x8a4>
 80053da:	2300      	movs	r3, #0
 80053dc:	220a      	movs	r2, #10
 80053de:	9904      	ldr	r1, [sp, #16]
 80053e0:	4620      	mov	r0, r4
 80053e2:	f000 fed3 	bl	800618c <__multadd>
 80053e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053e8:	9004      	str	r0, [sp, #16]
 80053ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	f000 814c 	beq.w	800568c <_dtoa_r+0xb0c>
 80053f4:	2300      	movs	r3, #0
 80053f6:	4631      	mov	r1, r6
 80053f8:	220a      	movs	r2, #10
 80053fa:	4620      	mov	r0, r4
 80053fc:	f000 fec6 	bl	800618c <__multadd>
 8005400:	9b02      	ldr	r3, [sp, #8]
 8005402:	2b00      	cmp	r3, #0
 8005404:	4606      	mov	r6, r0
 8005406:	dc4f      	bgt.n	80054a8 <_dtoa_r+0x928>
 8005408:	9b06      	ldr	r3, [sp, #24]
 800540a:	2b02      	cmp	r3, #2
 800540c:	dd4c      	ble.n	80054a8 <_dtoa_r+0x928>
 800540e:	e011      	b.n	8005434 <_dtoa_r+0x8b4>
 8005410:	d0c9      	beq.n	80053a6 <_dtoa_r+0x826>
 8005412:	9a05      	ldr	r2, [sp, #20]
 8005414:	331c      	adds	r3, #28
 8005416:	441a      	add	r2, r3
 8005418:	9205      	str	r2, [sp, #20]
 800541a:	441d      	add	r5, r3
 800541c:	4498      	add	r8, r3
 800541e:	e7c2      	b.n	80053a6 <_dtoa_r+0x826>
 8005420:	4603      	mov	r3, r0
 8005422:	e7f6      	b.n	8005412 <_dtoa_r+0x892>
 8005424:	f1b9 0f00 	cmp.w	r9, #0
 8005428:	dc38      	bgt.n	800549c <_dtoa_r+0x91c>
 800542a:	9b06      	ldr	r3, [sp, #24]
 800542c:	2b02      	cmp	r3, #2
 800542e:	dd35      	ble.n	800549c <_dtoa_r+0x91c>
 8005430:	f8cd 9008 	str.w	r9, [sp, #8]
 8005434:	9b02      	ldr	r3, [sp, #8]
 8005436:	b963      	cbnz	r3, 8005452 <_dtoa_r+0x8d2>
 8005438:	4639      	mov	r1, r7
 800543a:	2205      	movs	r2, #5
 800543c:	4620      	mov	r0, r4
 800543e:	f000 fea5 	bl	800618c <__multadd>
 8005442:	4601      	mov	r1, r0
 8005444:	4607      	mov	r7, r0
 8005446:	9804      	ldr	r0, [sp, #16]
 8005448:	f001 f85c 	bl	8006504 <__mcmp>
 800544c:	2800      	cmp	r0, #0
 800544e:	f73f adcc 	bgt.w	8004fea <_dtoa_r+0x46a>
 8005452:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005454:	465d      	mov	r5, fp
 8005456:	ea6f 0a03 	mvn.w	sl, r3
 800545a:	f04f 0900 	mov.w	r9, #0
 800545e:	4639      	mov	r1, r7
 8005460:	4620      	mov	r0, r4
 8005462:	f000 fe8a 	bl	800617a <_Bfree>
 8005466:	2e00      	cmp	r6, #0
 8005468:	f43f aeb7 	beq.w	80051da <_dtoa_r+0x65a>
 800546c:	f1b9 0f00 	cmp.w	r9, #0
 8005470:	d005      	beq.n	800547e <_dtoa_r+0x8fe>
 8005472:	45b1      	cmp	r9, r6
 8005474:	d003      	beq.n	800547e <_dtoa_r+0x8fe>
 8005476:	4649      	mov	r1, r9
 8005478:	4620      	mov	r0, r4
 800547a:	f000 fe7e 	bl	800617a <_Bfree>
 800547e:	4631      	mov	r1, r6
 8005480:	4620      	mov	r0, r4
 8005482:	f000 fe7a 	bl	800617a <_Bfree>
 8005486:	e6a8      	b.n	80051da <_dtoa_r+0x65a>
 8005488:	2700      	movs	r7, #0
 800548a:	463e      	mov	r6, r7
 800548c:	e7e1      	b.n	8005452 <_dtoa_r+0x8d2>
 800548e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005492:	463e      	mov	r6, r7
 8005494:	e5a9      	b.n	8004fea <_dtoa_r+0x46a>
 8005496:	bf00      	nop
 8005498:	40240000 	.word	0x40240000
 800549c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800549e:	f8cd 9008 	str.w	r9, [sp, #8]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	f000 80f9 	beq.w	800569a <_dtoa_r+0xb1a>
 80054a8:	2d00      	cmp	r5, #0
 80054aa:	dd05      	ble.n	80054b8 <_dtoa_r+0x938>
 80054ac:	4631      	mov	r1, r6
 80054ae:	462a      	mov	r2, r5
 80054b0:	4620      	mov	r0, r4
 80054b2:	f000 ffd3 	bl	800645c <__lshift>
 80054b6:	4606      	mov	r6, r0
 80054b8:	9b07      	ldr	r3, [sp, #28]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d04c      	beq.n	8005558 <_dtoa_r+0x9d8>
 80054be:	6871      	ldr	r1, [r6, #4]
 80054c0:	4620      	mov	r0, r4
 80054c2:	f000 fe35 	bl	8006130 <_Balloc>
 80054c6:	6932      	ldr	r2, [r6, #16]
 80054c8:	3202      	adds	r2, #2
 80054ca:	4605      	mov	r5, r0
 80054cc:	0092      	lsls	r2, r2, #2
 80054ce:	f106 010c 	add.w	r1, r6, #12
 80054d2:	300c      	adds	r0, #12
 80054d4:	f000 fe14 	bl	8006100 <memcpy>
 80054d8:	2201      	movs	r2, #1
 80054da:	4629      	mov	r1, r5
 80054dc:	4620      	mov	r0, r4
 80054de:	f000 ffbd 	bl	800645c <__lshift>
 80054e2:	9b00      	ldr	r3, [sp, #0]
 80054e4:	f8cd b014 	str.w	fp, [sp, #20]
 80054e8:	f003 0301 	and.w	r3, r3, #1
 80054ec:	46b1      	mov	r9, r6
 80054ee:	9307      	str	r3, [sp, #28]
 80054f0:	4606      	mov	r6, r0
 80054f2:	4639      	mov	r1, r7
 80054f4:	9804      	ldr	r0, [sp, #16]
 80054f6:	f7ff fab5 	bl	8004a64 <quorem>
 80054fa:	4649      	mov	r1, r9
 80054fc:	4605      	mov	r5, r0
 80054fe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005502:	9804      	ldr	r0, [sp, #16]
 8005504:	f000 fffe 	bl	8006504 <__mcmp>
 8005508:	4632      	mov	r2, r6
 800550a:	9000      	str	r0, [sp, #0]
 800550c:	4639      	mov	r1, r7
 800550e:	4620      	mov	r0, r4
 8005510:	f001 f812 	bl	8006538 <__mdiff>
 8005514:	68c3      	ldr	r3, [r0, #12]
 8005516:	4602      	mov	r2, r0
 8005518:	bb03      	cbnz	r3, 800555c <_dtoa_r+0x9dc>
 800551a:	4601      	mov	r1, r0
 800551c:	9008      	str	r0, [sp, #32]
 800551e:	9804      	ldr	r0, [sp, #16]
 8005520:	f000 fff0 	bl	8006504 <__mcmp>
 8005524:	9a08      	ldr	r2, [sp, #32]
 8005526:	4603      	mov	r3, r0
 8005528:	4611      	mov	r1, r2
 800552a:	4620      	mov	r0, r4
 800552c:	9308      	str	r3, [sp, #32]
 800552e:	f000 fe24 	bl	800617a <_Bfree>
 8005532:	9b08      	ldr	r3, [sp, #32]
 8005534:	b9a3      	cbnz	r3, 8005560 <_dtoa_r+0x9e0>
 8005536:	9a06      	ldr	r2, [sp, #24]
 8005538:	b992      	cbnz	r2, 8005560 <_dtoa_r+0x9e0>
 800553a:	9a07      	ldr	r2, [sp, #28]
 800553c:	b982      	cbnz	r2, 8005560 <_dtoa_r+0x9e0>
 800553e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005542:	d029      	beq.n	8005598 <_dtoa_r+0xa18>
 8005544:	9b00      	ldr	r3, [sp, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	dd01      	ble.n	800554e <_dtoa_r+0x9ce>
 800554a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800554e:	9b05      	ldr	r3, [sp, #20]
 8005550:	1c5d      	adds	r5, r3, #1
 8005552:	f883 8000 	strb.w	r8, [r3]
 8005556:	e782      	b.n	800545e <_dtoa_r+0x8de>
 8005558:	4630      	mov	r0, r6
 800555a:	e7c2      	b.n	80054e2 <_dtoa_r+0x962>
 800555c:	2301      	movs	r3, #1
 800555e:	e7e3      	b.n	8005528 <_dtoa_r+0x9a8>
 8005560:	9a00      	ldr	r2, [sp, #0]
 8005562:	2a00      	cmp	r2, #0
 8005564:	db04      	blt.n	8005570 <_dtoa_r+0x9f0>
 8005566:	d125      	bne.n	80055b4 <_dtoa_r+0xa34>
 8005568:	9a06      	ldr	r2, [sp, #24]
 800556a:	bb1a      	cbnz	r2, 80055b4 <_dtoa_r+0xa34>
 800556c:	9a07      	ldr	r2, [sp, #28]
 800556e:	bb0a      	cbnz	r2, 80055b4 <_dtoa_r+0xa34>
 8005570:	2b00      	cmp	r3, #0
 8005572:	ddec      	ble.n	800554e <_dtoa_r+0x9ce>
 8005574:	2201      	movs	r2, #1
 8005576:	9904      	ldr	r1, [sp, #16]
 8005578:	4620      	mov	r0, r4
 800557a:	f000 ff6f 	bl	800645c <__lshift>
 800557e:	4639      	mov	r1, r7
 8005580:	9004      	str	r0, [sp, #16]
 8005582:	f000 ffbf 	bl	8006504 <__mcmp>
 8005586:	2800      	cmp	r0, #0
 8005588:	dc03      	bgt.n	8005592 <_dtoa_r+0xa12>
 800558a:	d1e0      	bne.n	800554e <_dtoa_r+0x9ce>
 800558c:	f018 0f01 	tst.w	r8, #1
 8005590:	d0dd      	beq.n	800554e <_dtoa_r+0x9ce>
 8005592:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005596:	d1d8      	bne.n	800554a <_dtoa_r+0x9ca>
 8005598:	9b05      	ldr	r3, [sp, #20]
 800559a:	9a05      	ldr	r2, [sp, #20]
 800559c:	1c5d      	adds	r5, r3, #1
 800559e:	2339      	movs	r3, #57	; 0x39
 80055a0:	7013      	strb	r3, [r2, #0]
 80055a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80055a6:	2b39      	cmp	r3, #57	; 0x39
 80055a8:	f105 32ff 	add.w	r2, r5, #4294967295
 80055ac:	d04f      	beq.n	800564e <_dtoa_r+0xace>
 80055ae:	3301      	adds	r3, #1
 80055b0:	7013      	strb	r3, [r2, #0]
 80055b2:	e754      	b.n	800545e <_dtoa_r+0x8de>
 80055b4:	9a05      	ldr	r2, [sp, #20]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	f102 0501 	add.w	r5, r2, #1
 80055bc:	dd06      	ble.n	80055cc <_dtoa_r+0xa4c>
 80055be:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80055c2:	d0e9      	beq.n	8005598 <_dtoa_r+0xa18>
 80055c4:	f108 0801 	add.w	r8, r8, #1
 80055c8:	9b05      	ldr	r3, [sp, #20]
 80055ca:	e7c2      	b.n	8005552 <_dtoa_r+0x9d2>
 80055cc:	9a02      	ldr	r2, [sp, #8]
 80055ce:	f805 8c01 	strb.w	r8, [r5, #-1]
 80055d2:	eba5 030b 	sub.w	r3, r5, fp
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d021      	beq.n	800561e <_dtoa_r+0xa9e>
 80055da:	2300      	movs	r3, #0
 80055dc:	220a      	movs	r2, #10
 80055de:	9904      	ldr	r1, [sp, #16]
 80055e0:	4620      	mov	r0, r4
 80055e2:	f000 fdd3 	bl	800618c <__multadd>
 80055e6:	45b1      	cmp	r9, r6
 80055e8:	9004      	str	r0, [sp, #16]
 80055ea:	f04f 0300 	mov.w	r3, #0
 80055ee:	f04f 020a 	mov.w	r2, #10
 80055f2:	4649      	mov	r1, r9
 80055f4:	4620      	mov	r0, r4
 80055f6:	d105      	bne.n	8005604 <_dtoa_r+0xa84>
 80055f8:	f000 fdc8 	bl	800618c <__multadd>
 80055fc:	4681      	mov	r9, r0
 80055fe:	4606      	mov	r6, r0
 8005600:	9505      	str	r5, [sp, #20]
 8005602:	e776      	b.n	80054f2 <_dtoa_r+0x972>
 8005604:	f000 fdc2 	bl	800618c <__multadd>
 8005608:	4631      	mov	r1, r6
 800560a:	4681      	mov	r9, r0
 800560c:	2300      	movs	r3, #0
 800560e:	220a      	movs	r2, #10
 8005610:	4620      	mov	r0, r4
 8005612:	f000 fdbb 	bl	800618c <__multadd>
 8005616:	4606      	mov	r6, r0
 8005618:	e7f2      	b.n	8005600 <_dtoa_r+0xa80>
 800561a:	f04f 0900 	mov.w	r9, #0
 800561e:	2201      	movs	r2, #1
 8005620:	9904      	ldr	r1, [sp, #16]
 8005622:	4620      	mov	r0, r4
 8005624:	f000 ff1a 	bl	800645c <__lshift>
 8005628:	4639      	mov	r1, r7
 800562a:	9004      	str	r0, [sp, #16]
 800562c:	f000 ff6a 	bl	8006504 <__mcmp>
 8005630:	2800      	cmp	r0, #0
 8005632:	dcb6      	bgt.n	80055a2 <_dtoa_r+0xa22>
 8005634:	d102      	bne.n	800563c <_dtoa_r+0xabc>
 8005636:	f018 0f01 	tst.w	r8, #1
 800563a:	d1b2      	bne.n	80055a2 <_dtoa_r+0xa22>
 800563c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005640:	2b30      	cmp	r3, #48	; 0x30
 8005642:	f105 32ff 	add.w	r2, r5, #4294967295
 8005646:	f47f af0a 	bne.w	800545e <_dtoa_r+0x8de>
 800564a:	4615      	mov	r5, r2
 800564c:	e7f6      	b.n	800563c <_dtoa_r+0xabc>
 800564e:	4593      	cmp	fp, r2
 8005650:	d105      	bne.n	800565e <_dtoa_r+0xade>
 8005652:	2331      	movs	r3, #49	; 0x31
 8005654:	f10a 0a01 	add.w	sl, sl, #1
 8005658:	f88b 3000 	strb.w	r3, [fp]
 800565c:	e6ff      	b.n	800545e <_dtoa_r+0x8de>
 800565e:	4615      	mov	r5, r2
 8005660:	e79f      	b.n	80055a2 <_dtoa_r+0xa22>
 8005662:	f8df b064 	ldr.w	fp, [pc, #100]	; 80056c8 <_dtoa_r+0xb48>
 8005666:	f7ff bac5 	b.w	8004bf4 <_dtoa_r+0x74>
 800566a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800566c:	f8df b05c 	ldr.w	fp, [pc, #92]	; 80056cc <_dtoa_r+0xb4c>
 8005670:	2b00      	cmp	r3, #0
 8005672:	f43f aabf 	beq.w	8004bf4 <_dtoa_r+0x74>
 8005676:	f10b 0308 	add.w	r3, fp, #8
 800567a:	f7ff bab9 	b.w	8004bf0 <_dtoa_r+0x70>
 800567e:	9b06      	ldr	r3, [sp, #24]
 8005680:	2b01      	cmp	r3, #1
 8005682:	f77f ae36 	ble.w	80052f2 <_dtoa_r+0x772>
 8005686:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005688:	9307      	str	r3, [sp, #28]
 800568a:	e64a      	b.n	8005322 <_dtoa_r+0x7a2>
 800568c:	9b02      	ldr	r3, [sp, #8]
 800568e:	2b00      	cmp	r3, #0
 8005690:	dc03      	bgt.n	800569a <_dtoa_r+0xb1a>
 8005692:	9b06      	ldr	r3, [sp, #24]
 8005694:	2b02      	cmp	r3, #2
 8005696:	f73f aecd 	bgt.w	8005434 <_dtoa_r+0x8b4>
 800569a:	465d      	mov	r5, fp
 800569c:	4639      	mov	r1, r7
 800569e:	9804      	ldr	r0, [sp, #16]
 80056a0:	f7ff f9e0 	bl	8004a64 <quorem>
 80056a4:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80056a8:	f805 8b01 	strb.w	r8, [r5], #1
 80056ac:	9a02      	ldr	r2, [sp, #8]
 80056ae:	eba5 030b 	sub.w	r3, r5, fp
 80056b2:	429a      	cmp	r2, r3
 80056b4:	ddb1      	ble.n	800561a <_dtoa_r+0xa9a>
 80056b6:	2300      	movs	r3, #0
 80056b8:	220a      	movs	r2, #10
 80056ba:	9904      	ldr	r1, [sp, #16]
 80056bc:	4620      	mov	r0, r4
 80056be:	f000 fd65 	bl	800618c <__multadd>
 80056c2:	9004      	str	r0, [sp, #16]
 80056c4:	e7ea      	b.n	800569c <_dtoa_r+0xb1c>
 80056c6:	bf00      	nop
 80056c8:	0800841e 	.word	0x0800841e
 80056cc:	08008440 	.word	0x08008440

080056d0 <__sflush_r>:
 80056d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80056d4:	b293      	uxth	r3, r2
 80056d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056da:	4605      	mov	r5, r0
 80056dc:	0718      	lsls	r0, r3, #28
 80056de:	460c      	mov	r4, r1
 80056e0:	d45f      	bmi.n	80057a2 <__sflush_r+0xd2>
 80056e2:	684b      	ldr	r3, [r1, #4]
 80056e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	818a      	strh	r2, [r1, #12]
 80056ec:	dc05      	bgt.n	80056fa <__sflush_r+0x2a>
 80056ee:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	dc02      	bgt.n	80056fa <__sflush_r+0x2a>
 80056f4:	2000      	movs	r0, #0
 80056f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80056fc:	2e00      	cmp	r6, #0
 80056fe:	d0f9      	beq.n	80056f4 <__sflush_r+0x24>
 8005700:	2300      	movs	r3, #0
 8005702:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005706:	682f      	ldr	r7, [r5, #0]
 8005708:	69e1      	ldr	r1, [r4, #28]
 800570a:	602b      	str	r3, [r5, #0]
 800570c:	d036      	beq.n	800577c <__sflush_r+0xac>
 800570e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8005710:	89a3      	ldrh	r3, [r4, #12]
 8005712:	075a      	lsls	r2, r3, #29
 8005714:	d505      	bpl.n	8005722 <__sflush_r+0x52>
 8005716:	6863      	ldr	r3, [r4, #4]
 8005718:	1ac0      	subs	r0, r0, r3
 800571a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800571c:	b10b      	cbz	r3, 8005722 <__sflush_r+0x52>
 800571e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005720:	1ac0      	subs	r0, r0, r3
 8005722:	2300      	movs	r3, #0
 8005724:	4602      	mov	r2, r0
 8005726:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005728:	69e1      	ldr	r1, [r4, #28]
 800572a:	4628      	mov	r0, r5
 800572c:	47b0      	blx	r6
 800572e:	1c43      	adds	r3, r0, #1
 8005730:	89a3      	ldrh	r3, [r4, #12]
 8005732:	d106      	bne.n	8005742 <__sflush_r+0x72>
 8005734:	6829      	ldr	r1, [r5, #0]
 8005736:	291d      	cmp	r1, #29
 8005738:	d84c      	bhi.n	80057d4 <__sflush_r+0x104>
 800573a:	4a2b      	ldr	r2, [pc, #172]	; (80057e8 <__sflush_r+0x118>)
 800573c:	40ca      	lsrs	r2, r1
 800573e:	07d6      	lsls	r6, r2, #31
 8005740:	d548      	bpl.n	80057d4 <__sflush_r+0x104>
 8005742:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005746:	b21b      	sxth	r3, r3
 8005748:	2200      	movs	r2, #0
 800574a:	6062      	str	r2, [r4, #4]
 800574c:	04d9      	lsls	r1, r3, #19
 800574e:	6922      	ldr	r2, [r4, #16]
 8005750:	81a3      	strh	r3, [r4, #12]
 8005752:	6022      	str	r2, [r4, #0]
 8005754:	d504      	bpl.n	8005760 <__sflush_r+0x90>
 8005756:	1c42      	adds	r2, r0, #1
 8005758:	d101      	bne.n	800575e <__sflush_r+0x8e>
 800575a:	682b      	ldr	r3, [r5, #0]
 800575c:	b903      	cbnz	r3, 8005760 <__sflush_r+0x90>
 800575e:	6520      	str	r0, [r4, #80]	; 0x50
 8005760:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005762:	602f      	str	r7, [r5, #0]
 8005764:	2900      	cmp	r1, #0
 8005766:	d0c5      	beq.n	80056f4 <__sflush_r+0x24>
 8005768:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800576c:	4299      	cmp	r1, r3
 800576e:	d002      	beq.n	8005776 <__sflush_r+0xa6>
 8005770:	4628      	mov	r0, r5
 8005772:	f000 f937 	bl	80059e4 <_free_r>
 8005776:	2000      	movs	r0, #0
 8005778:	6320      	str	r0, [r4, #48]	; 0x30
 800577a:	e7bc      	b.n	80056f6 <__sflush_r+0x26>
 800577c:	2301      	movs	r3, #1
 800577e:	4628      	mov	r0, r5
 8005780:	47b0      	blx	r6
 8005782:	1c41      	adds	r1, r0, #1
 8005784:	d1c4      	bne.n	8005710 <__sflush_r+0x40>
 8005786:	682b      	ldr	r3, [r5, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d0c1      	beq.n	8005710 <__sflush_r+0x40>
 800578c:	2b1d      	cmp	r3, #29
 800578e:	d001      	beq.n	8005794 <__sflush_r+0xc4>
 8005790:	2b16      	cmp	r3, #22
 8005792:	d101      	bne.n	8005798 <__sflush_r+0xc8>
 8005794:	602f      	str	r7, [r5, #0]
 8005796:	e7ad      	b.n	80056f4 <__sflush_r+0x24>
 8005798:	89a3      	ldrh	r3, [r4, #12]
 800579a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800579e:	81a3      	strh	r3, [r4, #12]
 80057a0:	e7a9      	b.n	80056f6 <__sflush_r+0x26>
 80057a2:	690f      	ldr	r7, [r1, #16]
 80057a4:	2f00      	cmp	r7, #0
 80057a6:	d0a5      	beq.n	80056f4 <__sflush_r+0x24>
 80057a8:	079b      	lsls	r3, r3, #30
 80057aa:	680e      	ldr	r6, [r1, #0]
 80057ac:	bf08      	it	eq
 80057ae:	694b      	ldreq	r3, [r1, #20]
 80057b0:	600f      	str	r7, [r1, #0]
 80057b2:	bf18      	it	ne
 80057b4:	2300      	movne	r3, #0
 80057b6:	eba6 0807 	sub.w	r8, r6, r7
 80057ba:	608b      	str	r3, [r1, #8]
 80057bc:	f1b8 0f00 	cmp.w	r8, #0
 80057c0:	dd98      	ble.n	80056f4 <__sflush_r+0x24>
 80057c2:	4643      	mov	r3, r8
 80057c4:	463a      	mov	r2, r7
 80057c6:	69e1      	ldr	r1, [r4, #28]
 80057c8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80057ca:	4628      	mov	r0, r5
 80057cc:	47b0      	blx	r6
 80057ce:	2800      	cmp	r0, #0
 80057d0:	dc06      	bgt.n	80057e0 <__sflush_r+0x110>
 80057d2:	89a3      	ldrh	r3, [r4, #12]
 80057d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057d8:	81a3      	strh	r3, [r4, #12]
 80057da:	f04f 30ff 	mov.w	r0, #4294967295
 80057de:	e78a      	b.n	80056f6 <__sflush_r+0x26>
 80057e0:	4407      	add	r7, r0
 80057e2:	eba8 0800 	sub.w	r8, r8, r0
 80057e6:	e7e9      	b.n	80057bc <__sflush_r+0xec>
 80057e8:	20400001 	.word	0x20400001

080057ec <_fflush_r>:
 80057ec:	b538      	push	{r3, r4, r5, lr}
 80057ee:	460c      	mov	r4, r1
 80057f0:	4605      	mov	r5, r0
 80057f2:	b118      	cbz	r0, 80057fc <_fflush_r+0x10>
 80057f4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80057f6:	b90b      	cbnz	r3, 80057fc <_fflush_r+0x10>
 80057f8:	f000 f864 	bl	80058c4 <__sinit>
 80057fc:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8005800:	b1b8      	cbz	r0, 8005832 <_fflush_r+0x46>
 8005802:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005804:	07db      	lsls	r3, r3, #31
 8005806:	d404      	bmi.n	8005812 <_fflush_r+0x26>
 8005808:	0581      	lsls	r1, r0, #22
 800580a:	d402      	bmi.n	8005812 <_fflush_r+0x26>
 800580c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800580e:	f000 f9d3 	bl	8005bb8 <__retarget_lock_acquire_recursive>
 8005812:	4628      	mov	r0, r5
 8005814:	4621      	mov	r1, r4
 8005816:	f7ff ff5b 	bl	80056d0 <__sflush_r>
 800581a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800581c:	07da      	lsls	r2, r3, #31
 800581e:	4605      	mov	r5, r0
 8005820:	d405      	bmi.n	800582e <_fflush_r+0x42>
 8005822:	89a3      	ldrh	r3, [r4, #12]
 8005824:	059b      	lsls	r3, r3, #22
 8005826:	d402      	bmi.n	800582e <_fflush_r+0x42>
 8005828:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800582a:	f000 f9c6 	bl	8005bba <__retarget_lock_release_recursive>
 800582e:	4628      	mov	r0, r5
 8005830:	bd38      	pop	{r3, r4, r5, pc}
 8005832:	4605      	mov	r5, r0
 8005834:	e7fb      	b.n	800582e <_fflush_r+0x42>
	...

08005838 <std>:
 8005838:	2300      	movs	r3, #0
 800583a:	b510      	push	{r4, lr}
 800583c:	4604      	mov	r4, r0
 800583e:	e9c0 3300 	strd	r3, r3, [r0]
 8005842:	6083      	str	r3, [r0, #8]
 8005844:	8181      	strh	r1, [r0, #12]
 8005846:	6643      	str	r3, [r0, #100]	; 0x64
 8005848:	81c2      	strh	r2, [r0, #14]
 800584a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800584e:	6183      	str	r3, [r0, #24]
 8005850:	4619      	mov	r1, r3
 8005852:	2208      	movs	r2, #8
 8005854:	305c      	adds	r0, #92	; 0x5c
 8005856:	f7fd fdcf 	bl	80033f8 <memset>
 800585a:	4b07      	ldr	r3, [pc, #28]	; (8005878 <std+0x40>)
 800585c:	6223      	str	r3, [r4, #32]
 800585e:	4b07      	ldr	r3, [pc, #28]	; (800587c <std+0x44>)
 8005860:	6263      	str	r3, [r4, #36]	; 0x24
 8005862:	4b07      	ldr	r3, [pc, #28]	; (8005880 <std+0x48>)
 8005864:	62a3      	str	r3, [r4, #40]	; 0x28
 8005866:	4b07      	ldr	r3, [pc, #28]	; (8005884 <std+0x4c>)
 8005868:	61e4      	str	r4, [r4, #28]
 800586a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800586c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005874:	f000 b99e 	b.w	8005bb4 <__retarget_lock_init_recursive>
 8005878:	0800671d 	.word	0x0800671d
 800587c:	0800673f 	.word	0x0800673f
 8005880:	08006777 	.word	0x08006777
 8005884:	0800679b 	.word	0x0800679b

08005888 <_cleanup_r>:
 8005888:	4901      	ldr	r1, [pc, #4]	; (8005890 <_cleanup_r+0x8>)
 800588a:	f000 b967 	b.w	8005b5c <_fwalk_reent>
 800588e:	bf00      	nop
 8005890:	08006999 	.word	0x08006999

08005894 <__sfp_lock_acquire>:
 8005894:	4801      	ldr	r0, [pc, #4]	; (800589c <__sfp_lock_acquire+0x8>)
 8005896:	f000 b98f 	b.w	8005bb8 <__retarget_lock_acquire_recursive>
 800589a:	bf00      	nop
 800589c:	20000f88 	.word	0x20000f88

080058a0 <__sfp_lock_release>:
 80058a0:	4801      	ldr	r0, [pc, #4]	; (80058a8 <__sfp_lock_release+0x8>)
 80058a2:	f000 b98a 	b.w	8005bba <__retarget_lock_release_recursive>
 80058a6:	bf00      	nop
 80058a8:	20000f88 	.word	0x20000f88

080058ac <__sinit_lock_acquire>:
 80058ac:	4801      	ldr	r0, [pc, #4]	; (80058b4 <__sinit_lock_acquire+0x8>)
 80058ae:	f000 b983 	b.w	8005bb8 <__retarget_lock_acquire_recursive>
 80058b2:	bf00      	nop
 80058b4:	20000f83 	.word	0x20000f83

080058b8 <__sinit_lock_release>:
 80058b8:	4801      	ldr	r0, [pc, #4]	; (80058c0 <__sinit_lock_release+0x8>)
 80058ba:	f000 b97e 	b.w	8005bba <__retarget_lock_release_recursive>
 80058be:	bf00      	nop
 80058c0:	20000f83 	.word	0x20000f83

080058c4 <__sinit>:
 80058c4:	b510      	push	{r4, lr}
 80058c6:	4604      	mov	r4, r0
 80058c8:	f7ff fff0 	bl	80058ac <__sinit_lock_acquire>
 80058cc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80058ce:	b11a      	cbz	r2, 80058d8 <__sinit+0x14>
 80058d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058d4:	f7ff bff0 	b.w	80058b8 <__sinit_lock_release>
 80058d8:	4b0d      	ldr	r3, [pc, #52]	; (8005910 <__sinit+0x4c>)
 80058da:	63e3      	str	r3, [r4, #60]	; 0x3c
 80058dc:	2303      	movs	r3, #3
 80058de:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 80058e2:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 80058e6:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 80058ea:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 80058ee:	2104      	movs	r1, #4
 80058f0:	6860      	ldr	r0, [r4, #4]
 80058f2:	f7ff ffa1 	bl	8005838 <std>
 80058f6:	2201      	movs	r2, #1
 80058f8:	2109      	movs	r1, #9
 80058fa:	68a0      	ldr	r0, [r4, #8]
 80058fc:	f7ff ff9c 	bl	8005838 <std>
 8005900:	2202      	movs	r2, #2
 8005902:	2112      	movs	r1, #18
 8005904:	68e0      	ldr	r0, [r4, #12]
 8005906:	f7ff ff97 	bl	8005838 <std>
 800590a:	2301      	movs	r3, #1
 800590c:	63a3      	str	r3, [r4, #56]	; 0x38
 800590e:	e7df      	b.n	80058d0 <__sinit+0xc>
 8005910:	08005889 	.word	0x08005889

08005914 <__libc_fini_array>:
 8005914:	b538      	push	{r3, r4, r5, lr}
 8005916:	4d07      	ldr	r5, [pc, #28]	; (8005934 <__libc_fini_array+0x20>)
 8005918:	4c07      	ldr	r4, [pc, #28]	; (8005938 <__libc_fini_array+0x24>)
 800591a:	1b64      	subs	r4, r4, r5
 800591c:	10a4      	asrs	r4, r4, #2
 800591e:	b91c      	cbnz	r4, 8005928 <__libc_fini_array+0x14>
 8005920:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005924:	f002 bd04 	b.w	8008330 <_fini>
 8005928:	3c01      	subs	r4, #1
 800592a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800592e:	4798      	blx	r3
 8005930:	e7f5      	b.n	800591e <__libc_fini_array+0xa>
 8005932:	bf00      	nop
 8005934:	08008840 	.word	0x08008840
 8005938:	08008844 	.word	0x08008844

0800593c <_malloc_trim_r>:
 800593c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005940:	4605      	mov	r5, r0
 8005942:	2008      	movs	r0, #8
 8005944:	460c      	mov	r4, r1
 8005946:	f000 ff41 	bl	80067cc <sysconf>
 800594a:	4f23      	ldr	r7, [pc, #140]	; (80059d8 <_malloc_trim_r+0x9c>)
 800594c:	4680      	mov	r8, r0
 800594e:	4628      	mov	r0, r5
 8005950:	f000 fbe2 	bl	8006118 <__malloc_lock>
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	685e      	ldr	r6, [r3, #4]
 8005958:	f026 0603 	bic.w	r6, r6, #3
 800595c:	1b34      	subs	r4, r6, r4
 800595e:	3c11      	subs	r4, #17
 8005960:	4444      	add	r4, r8
 8005962:	fbb4 f4f8 	udiv	r4, r4, r8
 8005966:	3c01      	subs	r4, #1
 8005968:	fb08 f404 	mul.w	r4, r8, r4
 800596c:	45a0      	cmp	r8, r4
 800596e:	dd05      	ble.n	800597c <_malloc_trim_r+0x40>
 8005970:	4628      	mov	r0, r5
 8005972:	f000 fbd7 	bl	8006124 <__malloc_unlock>
 8005976:	2000      	movs	r0, #0
 8005978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800597c:	2100      	movs	r1, #0
 800597e:	4628      	mov	r0, r5
 8005980:	f000 febc 	bl	80066fc <_sbrk_r>
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	4433      	add	r3, r6
 8005988:	4298      	cmp	r0, r3
 800598a:	d1f1      	bne.n	8005970 <_malloc_trim_r+0x34>
 800598c:	4261      	negs	r1, r4
 800598e:	4628      	mov	r0, r5
 8005990:	f000 feb4 	bl	80066fc <_sbrk_r>
 8005994:	3001      	adds	r0, #1
 8005996:	d110      	bne.n	80059ba <_malloc_trim_r+0x7e>
 8005998:	2100      	movs	r1, #0
 800599a:	4628      	mov	r0, r5
 800599c:	f000 feae 	bl	80066fc <_sbrk_r>
 80059a0:	68ba      	ldr	r2, [r7, #8]
 80059a2:	1a83      	subs	r3, r0, r2
 80059a4:	2b0f      	cmp	r3, #15
 80059a6:	dde3      	ble.n	8005970 <_malloc_trim_r+0x34>
 80059a8:	490c      	ldr	r1, [pc, #48]	; (80059dc <_malloc_trim_r+0xa0>)
 80059aa:	6809      	ldr	r1, [r1, #0]
 80059ac:	1a40      	subs	r0, r0, r1
 80059ae:	490c      	ldr	r1, [pc, #48]	; (80059e0 <_malloc_trim_r+0xa4>)
 80059b0:	f043 0301 	orr.w	r3, r3, #1
 80059b4:	6008      	str	r0, [r1, #0]
 80059b6:	6053      	str	r3, [r2, #4]
 80059b8:	e7da      	b.n	8005970 <_malloc_trim_r+0x34>
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	4a08      	ldr	r2, [pc, #32]	; (80059e0 <_malloc_trim_r+0xa4>)
 80059be:	1b36      	subs	r6, r6, r4
 80059c0:	f046 0601 	orr.w	r6, r6, #1
 80059c4:	605e      	str	r6, [r3, #4]
 80059c6:	6813      	ldr	r3, [r2, #0]
 80059c8:	4628      	mov	r0, r5
 80059ca:	1b1c      	subs	r4, r3, r4
 80059cc:	6014      	str	r4, [r2, #0]
 80059ce:	f000 fba9 	bl	8006124 <__malloc_unlock>
 80059d2:	2001      	movs	r0, #1
 80059d4:	e7d0      	b.n	8005978 <_malloc_trim_r+0x3c>
 80059d6:	bf00      	nop
 80059d8:	2000043c 	.word	0x2000043c
 80059dc:	20000844 	.word	0x20000844
 80059e0:	20000a14 	.word	0x20000a14

080059e4 <_free_r>:
 80059e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059e8:	4604      	mov	r4, r0
 80059ea:	4688      	mov	r8, r1
 80059ec:	2900      	cmp	r1, #0
 80059ee:	f000 80ab 	beq.w	8005b48 <_free_r+0x164>
 80059f2:	f000 fb91 	bl	8006118 <__malloc_lock>
 80059f6:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80059fa:	4d54      	ldr	r5, [pc, #336]	; (8005b4c <_free_r+0x168>)
 80059fc:	f022 0001 	bic.w	r0, r2, #1
 8005a00:	f1a8 0308 	sub.w	r3, r8, #8
 8005a04:	181f      	adds	r7, r3, r0
 8005a06:	68a9      	ldr	r1, [r5, #8]
 8005a08:	687e      	ldr	r6, [r7, #4]
 8005a0a:	42b9      	cmp	r1, r7
 8005a0c:	f026 0603 	bic.w	r6, r6, #3
 8005a10:	f002 0201 	and.w	r2, r2, #1
 8005a14:	d11b      	bne.n	8005a4e <_free_r+0x6a>
 8005a16:	4430      	add	r0, r6
 8005a18:	b93a      	cbnz	r2, 8005a2a <_free_r+0x46>
 8005a1a:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8005a1e:	1a9b      	subs	r3, r3, r2
 8005a20:	4410      	add	r0, r2
 8005a22:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8005a26:	60ca      	str	r2, [r1, #12]
 8005a28:	6091      	str	r1, [r2, #8]
 8005a2a:	f040 0201 	orr.w	r2, r0, #1
 8005a2e:	605a      	str	r2, [r3, #4]
 8005a30:	60ab      	str	r3, [r5, #8]
 8005a32:	4b47      	ldr	r3, [pc, #284]	; (8005b50 <_free_r+0x16c>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4283      	cmp	r3, r0
 8005a38:	d804      	bhi.n	8005a44 <_free_r+0x60>
 8005a3a:	4b46      	ldr	r3, [pc, #280]	; (8005b54 <_free_r+0x170>)
 8005a3c:	4620      	mov	r0, r4
 8005a3e:	6819      	ldr	r1, [r3, #0]
 8005a40:	f7ff ff7c 	bl	800593c <_malloc_trim_r>
 8005a44:	4620      	mov	r0, r4
 8005a46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a4a:	f000 bb6b 	b.w	8006124 <__malloc_unlock>
 8005a4e:	607e      	str	r6, [r7, #4]
 8005a50:	2a00      	cmp	r2, #0
 8005a52:	d139      	bne.n	8005ac8 <_free_r+0xe4>
 8005a54:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8005a58:	1a5b      	subs	r3, r3, r1
 8005a5a:	4408      	add	r0, r1
 8005a5c:	6899      	ldr	r1, [r3, #8]
 8005a5e:	f105 0c08 	add.w	ip, r5, #8
 8005a62:	4561      	cmp	r1, ip
 8005a64:	d032      	beq.n	8005acc <_free_r+0xe8>
 8005a66:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8005a6a:	f8c1 c00c 	str.w	ip, [r1, #12]
 8005a6e:	f8cc 1008 	str.w	r1, [ip, #8]
 8005a72:	19b9      	adds	r1, r7, r6
 8005a74:	6849      	ldr	r1, [r1, #4]
 8005a76:	07c9      	lsls	r1, r1, #31
 8005a78:	d40a      	bmi.n	8005a90 <_free_r+0xac>
 8005a7a:	4430      	add	r0, r6
 8005a7c:	68b9      	ldr	r1, [r7, #8]
 8005a7e:	bb3a      	cbnz	r2, 8005ad0 <_free_r+0xec>
 8005a80:	4e35      	ldr	r6, [pc, #212]	; (8005b58 <_free_r+0x174>)
 8005a82:	42b1      	cmp	r1, r6
 8005a84:	d124      	bne.n	8005ad0 <_free_r+0xec>
 8005a86:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8005a8a:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f040 0101 	orr.w	r1, r0, #1
 8005a94:	6059      	str	r1, [r3, #4]
 8005a96:	5018      	str	r0, [r3, r0]
 8005a98:	2a00      	cmp	r2, #0
 8005a9a:	d1d3      	bne.n	8005a44 <_free_r+0x60>
 8005a9c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005aa0:	d21a      	bcs.n	8005ad8 <_free_r+0xf4>
 8005aa2:	08c0      	lsrs	r0, r0, #3
 8005aa4:	1081      	asrs	r1, r0, #2
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	408a      	lsls	r2, r1
 8005aaa:	6869      	ldr	r1, [r5, #4]
 8005aac:	3001      	adds	r0, #1
 8005aae:	430a      	orrs	r2, r1
 8005ab0:	606a      	str	r2, [r5, #4]
 8005ab2:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8005ab6:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8005aba:	3a08      	subs	r2, #8
 8005abc:	e9c3 1202 	strd	r1, r2, [r3, #8]
 8005ac0:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8005ac4:	60cb      	str	r3, [r1, #12]
 8005ac6:	e7bd      	b.n	8005a44 <_free_r+0x60>
 8005ac8:	2200      	movs	r2, #0
 8005aca:	e7d2      	b.n	8005a72 <_free_r+0x8e>
 8005acc:	2201      	movs	r2, #1
 8005ace:	e7d0      	b.n	8005a72 <_free_r+0x8e>
 8005ad0:	68fe      	ldr	r6, [r7, #12]
 8005ad2:	60ce      	str	r6, [r1, #12]
 8005ad4:	60b1      	str	r1, [r6, #8]
 8005ad6:	e7db      	b.n	8005a90 <_free_r+0xac>
 8005ad8:	0a42      	lsrs	r2, r0, #9
 8005ada:	2a04      	cmp	r2, #4
 8005adc:	d813      	bhi.n	8005b06 <_free_r+0x122>
 8005ade:	0982      	lsrs	r2, r0, #6
 8005ae0:	3238      	adds	r2, #56	; 0x38
 8005ae2:	1c51      	adds	r1, r2, #1
 8005ae4:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8005ae8:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8005aec:	428e      	cmp	r6, r1
 8005aee:	d124      	bne.n	8005b3a <_free_r+0x156>
 8005af0:	2001      	movs	r0, #1
 8005af2:	1092      	asrs	r2, r2, #2
 8005af4:	fa00 f202 	lsl.w	r2, r0, r2
 8005af8:	6868      	ldr	r0, [r5, #4]
 8005afa:	4302      	orrs	r2, r0
 8005afc:	606a      	str	r2, [r5, #4]
 8005afe:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8005b02:	60b3      	str	r3, [r6, #8]
 8005b04:	e7de      	b.n	8005ac4 <_free_r+0xe0>
 8005b06:	2a14      	cmp	r2, #20
 8005b08:	d801      	bhi.n	8005b0e <_free_r+0x12a>
 8005b0a:	325b      	adds	r2, #91	; 0x5b
 8005b0c:	e7e9      	b.n	8005ae2 <_free_r+0xfe>
 8005b0e:	2a54      	cmp	r2, #84	; 0x54
 8005b10:	d802      	bhi.n	8005b18 <_free_r+0x134>
 8005b12:	0b02      	lsrs	r2, r0, #12
 8005b14:	326e      	adds	r2, #110	; 0x6e
 8005b16:	e7e4      	b.n	8005ae2 <_free_r+0xfe>
 8005b18:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005b1c:	d802      	bhi.n	8005b24 <_free_r+0x140>
 8005b1e:	0bc2      	lsrs	r2, r0, #15
 8005b20:	3277      	adds	r2, #119	; 0x77
 8005b22:	e7de      	b.n	8005ae2 <_free_r+0xfe>
 8005b24:	f240 5154 	movw	r1, #1364	; 0x554
 8005b28:	428a      	cmp	r2, r1
 8005b2a:	bf9a      	itte	ls
 8005b2c:	0c82      	lsrls	r2, r0, #18
 8005b2e:	327c      	addls	r2, #124	; 0x7c
 8005b30:	227e      	movhi	r2, #126	; 0x7e
 8005b32:	e7d6      	b.n	8005ae2 <_free_r+0xfe>
 8005b34:	6889      	ldr	r1, [r1, #8]
 8005b36:	428e      	cmp	r6, r1
 8005b38:	d004      	beq.n	8005b44 <_free_r+0x160>
 8005b3a:	684a      	ldr	r2, [r1, #4]
 8005b3c:	f022 0203 	bic.w	r2, r2, #3
 8005b40:	4282      	cmp	r2, r0
 8005b42:	d8f7      	bhi.n	8005b34 <_free_r+0x150>
 8005b44:	68ce      	ldr	r6, [r1, #12]
 8005b46:	e7da      	b.n	8005afe <_free_r+0x11a>
 8005b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b4c:	2000043c 	.word	0x2000043c
 8005b50:	20000848 	.word	0x20000848
 8005b54:	20000a44 	.word	0x20000a44
 8005b58:	20000444 	.word	0x20000444

08005b5c <_fwalk_reent>:
 8005b5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b60:	4680      	mov	r8, r0
 8005b62:	4689      	mov	r9, r1
 8005b64:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 8005b68:	2600      	movs	r6, #0
 8005b6a:	b914      	cbnz	r4, 8005b72 <_fwalk_reent+0x16>
 8005b6c:	4630      	mov	r0, r6
 8005b6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b72:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005b76:	3f01      	subs	r7, #1
 8005b78:	d501      	bpl.n	8005b7e <_fwalk_reent+0x22>
 8005b7a:	6824      	ldr	r4, [r4, #0]
 8005b7c:	e7f5      	b.n	8005b6a <_fwalk_reent+0xe>
 8005b7e:	89ab      	ldrh	r3, [r5, #12]
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d907      	bls.n	8005b94 <_fwalk_reent+0x38>
 8005b84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b88:	3301      	adds	r3, #1
 8005b8a:	d003      	beq.n	8005b94 <_fwalk_reent+0x38>
 8005b8c:	4629      	mov	r1, r5
 8005b8e:	4640      	mov	r0, r8
 8005b90:	47c8      	blx	r9
 8005b92:	4306      	orrs	r6, r0
 8005b94:	3568      	adds	r5, #104	; 0x68
 8005b96:	e7ee      	b.n	8005b76 <_fwalk_reent+0x1a>

08005b98 <_localeconv_r>:
 8005b98:	4b04      	ldr	r3, [pc, #16]	; (8005bac <_localeconv_r+0x14>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005b9e:	4b04      	ldr	r3, [pc, #16]	; (8005bb0 <_localeconv_r+0x18>)
 8005ba0:	2800      	cmp	r0, #0
 8005ba2:	bf08      	it	eq
 8005ba4:	4618      	moveq	r0, r3
 8005ba6:	30f0      	adds	r0, #240	; 0xf0
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	2000000c 	.word	0x2000000c
 8005bb0:	2000084c 	.word	0x2000084c

08005bb4 <__retarget_lock_init_recursive>:
 8005bb4:	4770      	bx	lr

08005bb6 <__retarget_lock_close_recursive>:
 8005bb6:	4770      	bx	lr

08005bb8 <__retarget_lock_acquire_recursive>:
 8005bb8:	4770      	bx	lr

08005bba <__retarget_lock_release_recursive>:
 8005bba:	4770      	bx	lr

08005bbc <__swhatbuf_r>:
 8005bbc:	b570      	push	{r4, r5, r6, lr}
 8005bbe:	460e      	mov	r6, r1
 8005bc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bc4:	2900      	cmp	r1, #0
 8005bc6:	b096      	sub	sp, #88	; 0x58
 8005bc8:	4614      	mov	r4, r2
 8005bca:	461d      	mov	r5, r3
 8005bcc:	da09      	bge.n	8005be2 <__swhatbuf_r+0x26>
 8005bce:	89b3      	ldrh	r3, [r6, #12]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005bd6:	602a      	str	r2, [r5, #0]
 8005bd8:	d116      	bne.n	8005c08 <__swhatbuf_r+0x4c>
 8005bda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bde:	6023      	str	r3, [r4, #0]
 8005be0:	e015      	b.n	8005c0e <__swhatbuf_r+0x52>
 8005be2:	466a      	mov	r2, sp
 8005be4:	f000 ff9a 	bl	8006b1c <_fstat_r>
 8005be8:	2800      	cmp	r0, #0
 8005bea:	dbf0      	blt.n	8005bce <__swhatbuf_r+0x12>
 8005bec:	9a01      	ldr	r2, [sp, #4]
 8005bee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005bf2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005bf6:	425a      	negs	r2, r3
 8005bf8:	415a      	adcs	r2, r3
 8005bfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bfe:	602a      	str	r2, [r5, #0]
 8005c00:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005c04:	6023      	str	r3, [r4, #0]
 8005c06:	e002      	b.n	8005c0e <__swhatbuf_r+0x52>
 8005c08:	2340      	movs	r3, #64	; 0x40
 8005c0a:	6023      	str	r3, [r4, #0]
 8005c0c:	4610      	mov	r0, r2
 8005c0e:	b016      	add	sp, #88	; 0x58
 8005c10:	bd70      	pop	{r4, r5, r6, pc}
	...

08005c14 <__smakebuf_r>:
 8005c14:	898b      	ldrh	r3, [r1, #12]
 8005c16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005c18:	079d      	lsls	r5, r3, #30
 8005c1a:	4606      	mov	r6, r0
 8005c1c:	460c      	mov	r4, r1
 8005c1e:	d507      	bpl.n	8005c30 <__smakebuf_r+0x1c>
 8005c20:	f104 0343 	add.w	r3, r4, #67	; 0x43
 8005c24:	6023      	str	r3, [r4, #0]
 8005c26:	6123      	str	r3, [r4, #16]
 8005c28:	2301      	movs	r3, #1
 8005c2a:	6163      	str	r3, [r4, #20]
 8005c2c:	b002      	add	sp, #8
 8005c2e:	bd70      	pop	{r4, r5, r6, pc}
 8005c30:	ab01      	add	r3, sp, #4
 8005c32:	466a      	mov	r2, sp
 8005c34:	f7ff ffc2 	bl	8005bbc <__swhatbuf_r>
 8005c38:	9900      	ldr	r1, [sp, #0]
 8005c3a:	4605      	mov	r5, r0
 8005c3c:	4630      	mov	r0, r6
 8005c3e:	f000 f829 	bl	8005c94 <_malloc_r>
 8005c42:	b948      	cbnz	r0, 8005c58 <__smakebuf_r+0x44>
 8005c44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c48:	059a      	lsls	r2, r3, #22
 8005c4a:	d4ef      	bmi.n	8005c2c <__smakebuf_r+0x18>
 8005c4c:	f023 0303 	bic.w	r3, r3, #3
 8005c50:	f043 0302 	orr.w	r3, r3, #2
 8005c54:	81a3      	strh	r3, [r4, #12]
 8005c56:	e7e3      	b.n	8005c20 <__smakebuf_r+0xc>
 8005c58:	4b0d      	ldr	r3, [pc, #52]	; (8005c90 <__smakebuf_r+0x7c>)
 8005c5a:	63f3      	str	r3, [r6, #60]	; 0x3c
 8005c5c:	89a3      	ldrh	r3, [r4, #12]
 8005c5e:	6020      	str	r0, [r4, #0]
 8005c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c64:	81a3      	strh	r3, [r4, #12]
 8005c66:	9b00      	ldr	r3, [sp, #0]
 8005c68:	6163      	str	r3, [r4, #20]
 8005c6a:	9b01      	ldr	r3, [sp, #4]
 8005c6c:	6120      	str	r0, [r4, #16]
 8005c6e:	b15b      	cbz	r3, 8005c88 <__smakebuf_r+0x74>
 8005c70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c74:	4630      	mov	r0, r6
 8005c76:	f001 f8b1 	bl	8006ddc <_isatty_r>
 8005c7a:	b128      	cbz	r0, 8005c88 <__smakebuf_r+0x74>
 8005c7c:	89a3      	ldrh	r3, [r4, #12]
 8005c7e:	f023 0303 	bic.w	r3, r3, #3
 8005c82:	f043 0301 	orr.w	r3, r3, #1
 8005c86:	81a3      	strh	r3, [r4, #12]
 8005c88:	89a3      	ldrh	r3, [r4, #12]
 8005c8a:	431d      	orrs	r5, r3
 8005c8c:	81a5      	strh	r5, [r4, #12]
 8005c8e:	e7cd      	b.n	8005c2c <__smakebuf_r+0x18>
 8005c90:	08005889 	.word	0x08005889

08005c94 <_malloc_r>:
 8005c94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c98:	f101 050b 	add.w	r5, r1, #11
 8005c9c:	2d16      	cmp	r5, #22
 8005c9e:	4606      	mov	r6, r0
 8005ca0:	d906      	bls.n	8005cb0 <_malloc_r+0x1c>
 8005ca2:	f035 0507 	bics.w	r5, r5, #7
 8005ca6:	d504      	bpl.n	8005cb2 <_malloc_r+0x1e>
 8005ca8:	230c      	movs	r3, #12
 8005caa:	6033      	str	r3, [r6, #0]
 8005cac:	2400      	movs	r4, #0
 8005cae:	e1a8      	b.n	8006002 <_malloc_r+0x36e>
 8005cb0:	2510      	movs	r5, #16
 8005cb2:	428d      	cmp	r5, r1
 8005cb4:	d3f8      	bcc.n	8005ca8 <_malloc_r+0x14>
 8005cb6:	4630      	mov	r0, r6
 8005cb8:	f000 fa2e 	bl	8006118 <__malloc_lock>
 8005cbc:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8005cc0:	4fc0      	ldr	r7, [pc, #768]	; (8005fc4 <_malloc_r+0x330>)
 8005cc2:	d238      	bcs.n	8005d36 <_malloc_r+0xa2>
 8005cc4:	f105 0208 	add.w	r2, r5, #8
 8005cc8:	443a      	add	r2, r7
 8005cca:	f1a2 0108 	sub.w	r1, r2, #8
 8005cce:	6854      	ldr	r4, [r2, #4]
 8005cd0:	428c      	cmp	r4, r1
 8005cd2:	ea4f 03d5 	mov.w	r3, r5, lsr #3
 8005cd6:	d102      	bne.n	8005cde <_malloc_r+0x4a>
 8005cd8:	68d4      	ldr	r4, [r2, #12]
 8005cda:	42a2      	cmp	r2, r4
 8005cdc:	d010      	beq.n	8005d00 <_malloc_r+0x6c>
 8005cde:	6863      	ldr	r3, [r4, #4]
 8005ce0:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8005ce4:	f023 0303 	bic.w	r3, r3, #3
 8005ce8:	60ca      	str	r2, [r1, #12]
 8005cea:	4423      	add	r3, r4
 8005cec:	6091      	str	r1, [r2, #8]
 8005cee:	685a      	ldr	r2, [r3, #4]
 8005cf0:	f042 0201 	orr.w	r2, r2, #1
 8005cf4:	605a      	str	r2, [r3, #4]
 8005cf6:	4630      	mov	r0, r6
 8005cf8:	f000 fa14 	bl	8006124 <__malloc_unlock>
 8005cfc:	3408      	adds	r4, #8
 8005cfe:	e180      	b.n	8006002 <_malloc_r+0x36e>
 8005d00:	3302      	adds	r3, #2
 8005d02:	4ab1      	ldr	r2, [pc, #708]	; (8005fc8 <_malloc_r+0x334>)
 8005d04:	693c      	ldr	r4, [r7, #16]
 8005d06:	4294      	cmp	r4, r2
 8005d08:	4611      	mov	r1, r2
 8005d0a:	d075      	beq.n	8005df8 <_malloc_r+0x164>
 8005d0c:	6860      	ldr	r0, [r4, #4]
 8005d0e:	f020 0c03 	bic.w	ip, r0, #3
 8005d12:	ebac 0005 	sub.w	r0, ip, r5
 8005d16:	280f      	cmp	r0, #15
 8005d18:	dd48      	ble.n	8005dac <_malloc_r+0x118>
 8005d1a:	1963      	adds	r3, r4, r5
 8005d1c:	f045 0501 	orr.w	r5, r5, #1
 8005d20:	6065      	str	r5, [r4, #4]
 8005d22:	e9c7 3304 	strd	r3, r3, [r7, #16]
 8005d26:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8005d2a:	f040 0201 	orr.w	r2, r0, #1
 8005d2e:	605a      	str	r2, [r3, #4]
 8005d30:	f844 000c 	str.w	r0, [r4, ip]
 8005d34:	e7df      	b.n	8005cf6 <_malloc_r+0x62>
 8005d36:	0a6b      	lsrs	r3, r5, #9
 8005d38:	d02a      	beq.n	8005d90 <_malloc_r+0xfc>
 8005d3a:	2b04      	cmp	r3, #4
 8005d3c:	d812      	bhi.n	8005d64 <_malloc_r+0xd0>
 8005d3e:	09ab      	lsrs	r3, r5, #6
 8005d40:	3338      	adds	r3, #56	; 0x38
 8005d42:	1c5a      	adds	r2, r3, #1
 8005d44:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 8005d48:	f1a2 0c08 	sub.w	ip, r2, #8
 8005d4c:	6854      	ldr	r4, [r2, #4]
 8005d4e:	4564      	cmp	r4, ip
 8005d50:	d006      	beq.n	8005d60 <_malloc_r+0xcc>
 8005d52:	6862      	ldr	r2, [r4, #4]
 8005d54:	f022 0203 	bic.w	r2, r2, #3
 8005d58:	1b50      	subs	r0, r2, r5
 8005d5a:	280f      	cmp	r0, #15
 8005d5c:	dd1c      	ble.n	8005d98 <_malloc_r+0x104>
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	3301      	adds	r3, #1
 8005d62:	e7ce      	b.n	8005d02 <_malloc_r+0x6e>
 8005d64:	2b14      	cmp	r3, #20
 8005d66:	d801      	bhi.n	8005d6c <_malloc_r+0xd8>
 8005d68:	335b      	adds	r3, #91	; 0x5b
 8005d6a:	e7ea      	b.n	8005d42 <_malloc_r+0xae>
 8005d6c:	2b54      	cmp	r3, #84	; 0x54
 8005d6e:	d802      	bhi.n	8005d76 <_malloc_r+0xe2>
 8005d70:	0b2b      	lsrs	r3, r5, #12
 8005d72:	336e      	adds	r3, #110	; 0x6e
 8005d74:	e7e5      	b.n	8005d42 <_malloc_r+0xae>
 8005d76:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8005d7a:	d802      	bhi.n	8005d82 <_malloc_r+0xee>
 8005d7c:	0beb      	lsrs	r3, r5, #15
 8005d7e:	3377      	adds	r3, #119	; 0x77
 8005d80:	e7df      	b.n	8005d42 <_malloc_r+0xae>
 8005d82:	f240 5254 	movw	r2, #1364	; 0x554
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d804      	bhi.n	8005d94 <_malloc_r+0x100>
 8005d8a:	0cab      	lsrs	r3, r5, #18
 8005d8c:	337c      	adds	r3, #124	; 0x7c
 8005d8e:	e7d8      	b.n	8005d42 <_malloc_r+0xae>
 8005d90:	233f      	movs	r3, #63	; 0x3f
 8005d92:	e7d6      	b.n	8005d42 <_malloc_r+0xae>
 8005d94:	237e      	movs	r3, #126	; 0x7e
 8005d96:	e7d4      	b.n	8005d42 <_malloc_r+0xae>
 8005d98:	2800      	cmp	r0, #0
 8005d9a:	68e1      	ldr	r1, [r4, #12]
 8005d9c:	db04      	blt.n	8005da8 <_malloc_r+0x114>
 8005d9e:	68a3      	ldr	r3, [r4, #8]
 8005da0:	60d9      	str	r1, [r3, #12]
 8005da2:	608b      	str	r3, [r1, #8]
 8005da4:	18a3      	adds	r3, r4, r2
 8005da6:	e7a2      	b.n	8005cee <_malloc_r+0x5a>
 8005da8:	460c      	mov	r4, r1
 8005daa:	e7d0      	b.n	8005d4e <_malloc_r+0xba>
 8005dac:	2800      	cmp	r0, #0
 8005dae:	e9c7 2204 	strd	r2, r2, [r7, #16]
 8005db2:	db07      	blt.n	8005dc4 <_malloc_r+0x130>
 8005db4:	44a4      	add	ip, r4
 8005db6:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8005dba:	f043 0301 	orr.w	r3, r3, #1
 8005dbe:	f8cc 3004 	str.w	r3, [ip, #4]
 8005dc2:	e798      	b.n	8005cf6 <_malloc_r+0x62>
 8005dc4:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f080 8099 	bcs.w	8005f00 <_malloc_r+0x26c>
 8005dce:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8005dd2:	ea4f 0eac 	mov.w	lr, ip, asr #2
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f10c 0c01 	add.w	ip, ip, #1
 8005ddc:	fa02 f20e 	lsl.w	r2, r2, lr
 8005de0:	4310      	orrs	r0, r2
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	eb07 02cc 	add.w	r2, r7, ip, lsl #3
 8005de8:	f857 003c 	ldr.w	r0, [r7, ip, lsl #3]
 8005dec:	3a08      	subs	r2, #8
 8005dee:	e9c4 0202 	strd	r0, r2, [r4, #8]
 8005df2:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
 8005df6:	60c4      	str	r4, [r0, #12]
 8005df8:	2001      	movs	r0, #1
 8005dfa:	109a      	asrs	r2, r3, #2
 8005dfc:	fa00 f202 	lsl.w	r2, r0, r2
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	4290      	cmp	r0, r2
 8005e04:	d326      	bcc.n	8005e54 <_malloc_r+0x1c0>
 8005e06:	4210      	tst	r0, r2
 8005e08:	d106      	bne.n	8005e18 <_malloc_r+0x184>
 8005e0a:	f023 0303 	bic.w	r3, r3, #3
 8005e0e:	0052      	lsls	r2, r2, #1
 8005e10:	4210      	tst	r0, r2
 8005e12:	f103 0304 	add.w	r3, r3, #4
 8005e16:	d0fa      	beq.n	8005e0e <_malloc_r+0x17a>
 8005e18:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
 8005e1c:	46e1      	mov	r9, ip
 8005e1e:	4698      	mov	r8, r3
 8005e20:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8005e24:	454c      	cmp	r4, r9
 8005e26:	f040 80af 	bne.w	8005f88 <_malloc_r+0x2f4>
 8005e2a:	f108 0801 	add.w	r8, r8, #1
 8005e2e:	f018 0f03 	tst.w	r8, #3
 8005e32:	f109 0908 	add.w	r9, r9, #8
 8005e36:	d1f3      	bne.n	8005e20 <_malloc_r+0x18c>
 8005e38:	0798      	lsls	r0, r3, #30
 8005e3a:	f040 80e8 	bne.w	800600e <_malloc_r+0x37a>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	ea23 0302 	bic.w	r3, r3, r2
 8005e44:	607b      	str	r3, [r7, #4]
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	0052      	lsls	r2, r2, #1
 8005e4a:	4290      	cmp	r0, r2
 8005e4c:	d302      	bcc.n	8005e54 <_malloc_r+0x1c0>
 8005e4e:	2a00      	cmp	r2, #0
 8005e50:	f040 80ec 	bne.w	800602c <_malloc_r+0x398>
 8005e54:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8005e58:	f8da 4004 	ldr.w	r4, [sl, #4]
 8005e5c:	f024 0203 	bic.w	r2, r4, #3
 8005e60:	42aa      	cmp	r2, r5
 8005e62:	d303      	bcc.n	8005e6c <_malloc_r+0x1d8>
 8005e64:	1b53      	subs	r3, r2, r5
 8005e66:	2b0f      	cmp	r3, #15
 8005e68:	f300 8140 	bgt.w	80060ec <_malloc_r+0x458>
 8005e6c:	4b57      	ldr	r3, [pc, #348]	; (8005fcc <_malloc_r+0x338>)
 8005e6e:	9200      	str	r2, [sp, #0]
 8005e70:	2008      	movs	r0, #8
 8005e72:	681c      	ldr	r4, [r3, #0]
 8005e74:	f000 fcaa 	bl	80067cc <sysconf>
 8005e78:	4b55      	ldr	r3, [pc, #340]	; (8005fd0 <_malloc_r+0x33c>)
 8005e7a:	9a00      	ldr	r2, [sp, #0]
 8005e7c:	6819      	ldr	r1, [r3, #0]
 8005e7e:	3410      	adds	r4, #16
 8005e80:	3101      	adds	r1, #1
 8005e82:	442c      	add	r4, r5
 8005e84:	bf1f      	itttt	ne
 8005e86:	f104 34ff 	addne.w	r4, r4, #4294967295
 8005e8a:	1824      	addne	r4, r4, r0
 8005e8c:	4241      	negne	r1, r0
 8005e8e:	400c      	andne	r4, r1
 8005e90:	4680      	mov	r8, r0
 8005e92:	4621      	mov	r1, r4
 8005e94:	4630      	mov	r0, r6
 8005e96:	e9cd 2300 	strd	r2, r3, [sp]
 8005e9a:	f000 fc2f 	bl	80066fc <_sbrk_r>
 8005e9e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005ea2:	4683      	mov	fp, r0
 8005ea4:	f000 80fb 	beq.w	800609e <_malloc_r+0x40a>
 8005ea8:	9a00      	ldr	r2, [sp, #0]
 8005eaa:	9b01      	ldr	r3, [sp, #4]
 8005eac:	eb0a 0102 	add.w	r1, sl, r2
 8005eb0:	4281      	cmp	r1, r0
 8005eb2:	d902      	bls.n	8005eba <_malloc_r+0x226>
 8005eb4:	45ba      	cmp	sl, r7
 8005eb6:	f040 80f2 	bne.w	800609e <_malloc_r+0x40a>
 8005eba:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8005fdc <_malloc_r+0x348>
 8005ebe:	f8d9 0000 	ldr.w	r0, [r9]
 8005ec2:	4559      	cmp	r1, fp
 8005ec4:	eb00 0e04 	add.w	lr, r0, r4
 8005ec8:	f8c9 e000 	str.w	lr, [r9]
 8005ecc:	f108 3cff 	add.w	ip, r8, #4294967295
 8005ed0:	f040 80ae 	bne.w	8006030 <_malloc_r+0x39c>
 8005ed4:	ea11 0f0c 	tst.w	r1, ip
 8005ed8:	f040 80aa 	bne.w	8006030 <_malloc_r+0x39c>
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	4414      	add	r4, r2
 8005ee0:	f044 0401 	orr.w	r4, r4, #1
 8005ee4:	605c      	str	r4, [r3, #4]
 8005ee6:	4a3b      	ldr	r2, [pc, #236]	; (8005fd4 <_malloc_r+0x340>)
 8005ee8:	f8d9 3000 	ldr.w	r3, [r9]
 8005eec:	6811      	ldr	r1, [r2, #0]
 8005eee:	428b      	cmp	r3, r1
 8005ef0:	bf88      	it	hi
 8005ef2:	6013      	strhi	r3, [r2, #0]
 8005ef4:	4a38      	ldr	r2, [pc, #224]	; (8005fd8 <_malloc_r+0x344>)
 8005ef6:	6811      	ldr	r1, [r2, #0]
 8005ef8:	428b      	cmp	r3, r1
 8005efa:	bf88      	it	hi
 8005efc:	6013      	strhi	r3, [r2, #0]
 8005efe:	e0ce      	b.n	800609e <_malloc_r+0x40a>
 8005f00:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8005f04:	2a04      	cmp	r2, #4
 8005f06:	d818      	bhi.n	8005f3a <_malloc_r+0x2a6>
 8005f08:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8005f0c:	3238      	adds	r2, #56	; 0x38
 8005f0e:	f102 0e01 	add.w	lr, r2, #1
 8005f12:	eb07 08c2 	add.w	r8, r7, r2, lsl #3
 8005f16:	f857 e03e 	ldr.w	lr, [r7, lr, lsl #3]
 8005f1a:	45f0      	cmp	r8, lr
 8005f1c:	d12b      	bne.n	8005f76 <_malloc_r+0x2e2>
 8005f1e:	1092      	asrs	r2, r2, #2
 8005f20:	f04f 0c01 	mov.w	ip, #1
 8005f24:	fa0c f202 	lsl.w	r2, ip, r2
 8005f28:	4310      	orrs	r0, r2
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8005f30:	f8c8 4008 	str.w	r4, [r8, #8]
 8005f34:	f8ce 400c 	str.w	r4, [lr, #12]
 8005f38:	e75e      	b.n	8005df8 <_malloc_r+0x164>
 8005f3a:	2a14      	cmp	r2, #20
 8005f3c:	d801      	bhi.n	8005f42 <_malloc_r+0x2ae>
 8005f3e:	325b      	adds	r2, #91	; 0x5b
 8005f40:	e7e5      	b.n	8005f0e <_malloc_r+0x27a>
 8005f42:	2a54      	cmp	r2, #84	; 0x54
 8005f44:	d803      	bhi.n	8005f4e <_malloc_r+0x2ba>
 8005f46:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8005f4a:	326e      	adds	r2, #110	; 0x6e
 8005f4c:	e7df      	b.n	8005f0e <_malloc_r+0x27a>
 8005f4e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005f52:	d803      	bhi.n	8005f5c <_malloc_r+0x2c8>
 8005f54:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8005f58:	3277      	adds	r2, #119	; 0x77
 8005f5a:	e7d8      	b.n	8005f0e <_malloc_r+0x27a>
 8005f5c:	f240 5e54 	movw	lr, #1364	; 0x554
 8005f60:	4572      	cmp	r2, lr
 8005f62:	bf9a      	itte	ls
 8005f64:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8005f68:	327c      	addls	r2, #124	; 0x7c
 8005f6a:	227e      	movhi	r2, #126	; 0x7e
 8005f6c:	e7cf      	b.n	8005f0e <_malloc_r+0x27a>
 8005f6e:	f8de e008 	ldr.w	lr, [lr, #8]
 8005f72:	45f0      	cmp	r8, lr
 8005f74:	d005      	beq.n	8005f82 <_malloc_r+0x2ee>
 8005f76:	f8de 2004 	ldr.w	r2, [lr, #4]
 8005f7a:	f022 0203 	bic.w	r2, r2, #3
 8005f7e:	4562      	cmp	r2, ip
 8005f80:	d8f5      	bhi.n	8005f6e <_malloc_r+0x2da>
 8005f82:	f8de 800c 	ldr.w	r8, [lr, #12]
 8005f86:	e7d1      	b.n	8005f2c <_malloc_r+0x298>
 8005f88:	6860      	ldr	r0, [r4, #4]
 8005f8a:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 8005f8e:	f020 0003 	bic.w	r0, r0, #3
 8005f92:	eba0 0a05 	sub.w	sl, r0, r5
 8005f96:	f1ba 0f0f 	cmp.w	sl, #15
 8005f9a:	dd21      	ble.n	8005fe0 <_malloc_r+0x34c>
 8005f9c:	68a2      	ldr	r2, [r4, #8]
 8005f9e:	1963      	adds	r3, r4, r5
 8005fa0:	f045 0501 	orr.w	r5, r5, #1
 8005fa4:	6065      	str	r5, [r4, #4]
 8005fa6:	f8c2 e00c 	str.w	lr, [r2, #12]
 8005faa:	f8ce 2008 	str.w	r2, [lr, #8]
 8005fae:	f04a 0201 	orr.w	r2, sl, #1
 8005fb2:	e9c7 3304 	strd	r3, r3, [r7, #16]
 8005fb6:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8005fba:	605a      	str	r2, [r3, #4]
 8005fbc:	f844 a000 	str.w	sl, [r4, r0]
 8005fc0:	e699      	b.n	8005cf6 <_malloc_r+0x62>
 8005fc2:	bf00      	nop
 8005fc4:	2000043c 	.word	0x2000043c
 8005fc8:	20000444 	.word	0x20000444
 8005fcc:	20000a44 	.word	0x20000a44
 8005fd0:	20000844 	.word	0x20000844
 8005fd4:	20000a3c 	.word	0x20000a3c
 8005fd8:	20000a40 	.word	0x20000a40
 8005fdc:	20000a14 	.word	0x20000a14
 8005fe0:	f1ba 0f00 	cmp.w	sl, #0
 8005fe4:	db11      	blt.n	800600a <_malloc_r+0x376>
 8005fe6:	4420      	add	r0, r4
 8005fe8:	6843      	ldr	r3, [r0, #4]
 8005fea:	f043 0301 	orr.w	r3, r3, #1
 8005fee:	6043      	str	r3, [r0, #4]
 8005ff0:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8005ff4:	4630      	mov	r0, r6
 8005ff6:	f8c3 e00c 	str.w	lr, [r3, #12]
 8005ffa:	f8ce 3008 	str.w	r3, [lr, #8]
 8005ffe:	f000 f891 	bl	8006124 <__malloc_unlock>
 8006002:	4620      	mov	r0, r4
 8006004:	b003      	add	sp, #12
 8006006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800600a:	4674      	mov	r4, lr
 800600c:	e70a      	b.n	8005e24 <_malloc_r+0x190>
 800600e:	f1ac 0008 	sub.w	r0, ip, #8
 8006012:	f8dc c000 	ldr.w	ip, [ip]
 8006016:	4584      	cmp	ip, r0
 8006018:	f103 33ff 	add.w	r3, r3, #4294967295
 800601c:	f43f af0c 	beq.w	8005e38 <_malloc_r+0x1a4>
 8006020:	e711      	b.n	8005e46 <_malloc_r+0x1b2>
 8006022:	3304      	adds	r3, #4
 8006024:	0052      	lsls	r2, r2, #1
 8006026:	4210      	tst	r0, r2
 8006028:	d0fb      	beq.n	8006022 <_malloc_r+0x38e>
 800602a:	e6f5      	b.n	8005e18 <_malloc_r+0x184>
 800602c:	4643      	mov	r3, r8
 800602e:	e7fa      	b.n	8006026 <_malloc_r+0x392>
 8006030:	6818      	ldr	r0, [r3, #0]
 8006032:	9200      	str	r2, [sp, #0]
 8006034:	3001      	adds	r0, #1
 8006036:	bf1b      	ittet	ne
 8006038:	ebab 0101 	subne.w	r1, fp, r1
 800603c:	4471      	addne	r1, lr
 800603e:	f8c3 b000 	streq.w	fp, [r3]
 8006042:	f8c9 1000 	strne.w	r1, [r9]
 8006046:	f01b 0307 	ands.w	r3, fp, #7
 800604a:	bf1c      	itt	ne
 800604c:	f1c3 0308 	rsbne	r3, r3, #8
 8006050:	449b      	addne	fp, r3
 8006052:	445c      	add	r4, fp
 8006054:	4498      	add	r8, r3
 8006056:	ea04 030c 	and.w	r3, r4, ip
 800605a:	eba8 0803 	sub.w	r8, r8, r3
 800605e:	4641      	mov	r1, r8
 8006060:	4630      	mov	r0, r6
 8006062:	f000 fb4b 	bl	80066fc <_sbrk_r>
 8006066:	1c43      	adds	r3, r0, #1
 8006068:	bf04      	itt	eq
 800606a:	4658      	moveq	r0, fp
 800606c:	f04f 0800 	moveq.w	r8, #0
 8006070:	f8d9 3000 	ldr.w	r3, [r9]
 8006074:	f8c7 b008 	str.w	fp, [r7, #8]
 8006078:	eba0 000b 	sub.w	r0, r0, fp
 800607c:	4440      	add	r0, r8
 800607e:	4443      	add	r3, r8
 8006080:	f040 0001 	orr.w	r0, r0, #1
 8006084:	45ba      	cmp	sl, r7
 8006086:	9a00      	ldr	r2, [sp, #0]
 8006088:	f8c9 3000 	str.w	r3, [r9]
 800608c:	f8cb 0004 	str.w	r0, [fp, #4]
 8006090:	f43f af29 	beq.w	8005ee6 <_malloc_r+0x252>
 8006094:	2a0f      	cmp	r2, #15
 8006096:	d810      	bhi.n	80060ba <_malloc_r+0x426>
 8006098:	2301      	movs	r3, #1
 800609a:	f8cb 3004 	str.w	r3, [fp, #4]
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	685a      	ldr	r2, [r3, #4]
 80060a2:	f022 0203 	bic.w	r2, r2, #3
 80060a6:	42aa      	cmp	r2, r5
 80060a8:	eba2 0305 	sub.w	r3, r2, r5
 80060ac:	d301      	bcc.n	80060b2 <_malloc_r+0x41e>
 80060ae:	2b0f      	cmp	r3, #15
 80060b0:	dc1c      	bgt.n	80060ec <_malloc_r+0x458>
 80060b2:	4630      	mov	r0, r6
 80060b4:	f000 f836 	bl	8006124 <__malloc_unlock>
 80060b8:	e5f8      	b.n	8005cac <_malloc_r+0x18>
 80060ba:	f8da 3004 	ldr.w	r3, [sl, #4]
 80060be:	f1a2 040c 	sub.w	r4, r2, #12
 80060c2:	f024 0407 	bic.w	r4, r4, #7
 80060c6:	f003 0301 	and.w	r3, r3, #1
 80060ca:	4323      	orrs	r3, r4
 80060cc:	f8ca 3004 	str.w	r3, [sl, #4]
 80060d0:	2205      	movs	r2, #5
 80060d2:	eb0a 0304 	add.w	r3, sl, r4
 80060d6:	2c0f      	cmp	r4, #15
 80060d8:	e9c3 2201 	strd	r2, r2, [r3, #4]
 80060dc:	f67f af03 	bls.w	8005ee6 <_malloc_r+0x252>
 80060e0:	f10a 0108 	add.w	r1, sl, #8
 80060e4:	4630      	mov	r0, r6
 80060e6:	f7ff fc7d 	bl	80059e4 <_free_r>
 80060ea:	e6fc      	b.n	8005ee6 <_malloc_r+0x252>
 80060ec:	68bc      	ldr	r4, [r7, #8]
 80060ee:	f045 0201 	orr.w	r2, r5, #1
 80060f2:	4425      	add	r5, r4
 80060f4:	f043 0301 	orr.w	r3, r3, #1
 80060f8:	6062      	str	r2, [r4, #4]
 80060fa:	60bd      	str	r5, [r7, #8]
 80060fc:	606b      	str	r3, [r5, #4]
 80060fe:	e5fa      	b.n	8005cf6 <_malloc_r+0x62>

08006100 <memcpy>:
 8006100:	b510      	push	{r4, lr}
 8006102:	1e43      	subs	r3, r0, #1
 8006104:	440a      	add	r2, r1
 8006106:	4291      	cmp	r1, r2
 8006108:	d100      	bne.n	800610c <memcpy+0xc>
 800610a:	bd10      	pop	{r4, pc}
 800610c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006110:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006114:	e7f7      	b.n	8006106 <memcpy+0x6>
	...

08006118 <__malloc_lock>:
 8006118:	4801      	ldr	r0, [pc, #4]	; (8006120 <__malloc_lock+0x8>)
 800611a:	f7ff bd4d 	b.w	8005bb8 <__retarget_lock_acquire_recursive>
 800611e:	bf00      	nop
 8006120:	20000f84 	.word	0x20000f84

08006124 <__malloc_unlock>:
 8006124:	4801      	ldr	r0, [pc, #4]	; (800612c <__malloc_unlock+0x8>)
 8006126:	f7ff bd48 	b.w	8005bba <__retarget_lock_release_recursive>
 800612a:	bf00      	nop
 800612c:	20000f84 	.word	0x20000f84

08006130 <_Balloc>:
 8006130:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006132:	b570      	push	{r4, r5, r6, lr}
 8006134:	4605      	mov	r5, r0
 8006136:	460c      	mov	r4, r1
 8006138:	b17b      	cbz	r3, 800615a <_Balloc+0x2a>
 800613a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800613c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8006140:	b9a0      	cbnz	r0, 800616c <_Balloc+0x3c>
 8006142:	2101      	movs	r1, #1
 8006144:	fa01 f604 	lsl.w	r6, r1, r4
 8006148:	1d72      	adds	r2, r6, #5
 800614a:	0092      	lsls	r2, r2, #2
 800614c:	4628      	mov	r0, r5
 800614e:	f000 fbe5 	bl	800691c <_calloc_r>
 8006152:	b148      	cbz	r0, 8006168 <_Balloc+0x38>
 8006154:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8006158:	e00b      	b.n	8006172 <_Balloc+0x42>
 800615a:	2221      	movs	r2, #33	; 0x21
 800615c:	2104      	movs	r1, #4
 800615e:	f000 fbdd 	bl	800691c <_calloc_r>
 8006162:	64e8      	str	r0, [r5, #76]	; 0x4c
 8006164:	2800      	cmp	r0, #0
 8006166:	d1e8      	bne.n	800613a <_Balloc+0xa>
 8006168:	2000      	movs	r0, #0
 800616a:	bd70      	pop	{r4, r5, r6, pc}
 800616c:	6802      	ldr	r2, [r0, #0]
 800616e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8006172:	2300      	movs	r3, #0
 8006174:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006178:	e7f7      	b.n	800616a <_Balloc+0x3a>

0800617a <_Bfree>:
 800617a:	b131      	cbz	r1, 800618a <_Bfree+0x10>
 800617c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800617e:	684a      	ldr	r2, [r1, #4]
 8006180:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006184:	6008      	str	r0, [r1, #0]
 8006186:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800618a:	4770      	bx	lr

0800618c <__multadd>:
 800618c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006190:	690d      	ldr	r5, [r1, #16]
 8006192:	461f      	mov	r7, r3
 8006194:	4606      	mov	r6, r0
 8006196:	460c      	mov	r4, r1
 8006198:	f101 0c14 	add.w	ip, r1, #20
 800619c:	2300      	movs	r3, #0
 800619e:	f8dc 0000 	ldr.w	r0, [ip]
 80061a2:	b281      	uxth	r1, r0
 80061a4:	fb02 7101 	mla	r1, r2, r1, r7
 80061a8:	0c0f      	lsrs	r7, r1, #16
 80061aa:	0c00      	lsrs	r0, r0, #16
 80061ac:	fb02 7000 	mla	r0, r2, r0, r7
 80061b0:	b289      	uxth	r1, r1
 80061b2:	3301      	adds	r3, #1
 80061b4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80061b8:	429d      	cmp	r5, r3
 80061ba:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80061be:	f84c 1b04 	str.w	r1, [ip], #4
 80061c2:	dcec      	bgt.n	800619e <__multadd+0x12>
 80061c4:	b1d7      	cbz	r7, 80061fc <__multadd+0x70>
 80061c6:	68a3      	ldr	r3, [r4, #8]
 80061c8:	42ab      	cmp	r3, r5
 80061ca:	dc12      	bgt.n	80061f2 <__multadd+0x66>
 80061cc:	6861      	ldr	r1, [r4, #4]
 80061ce:	4630      	mov	r0, r6
 80061d0:	3101      	adds	r1, #1
 80061d2:	f7ff ffad 	bl	8006130 <_Balloc>
 80061d6:	6922      	ldr	r2, [r4, #16]
 80061d8:	3202      	adds	r2, #2
 80061da:	f104 010c 	add.w	r1, r4, #12
 80061de:	4680      	mov	r8, r0
 80061e0:	0092      	lsls	r2, r2, #2
 80061e2:	300c      	adds	r0, #12
 80061e4:	f7ff ff8c 	bl	8006100 <memcpy>
 80061e8:	4621      	mov	r1, r4
 80061ea:	4630      	mov	r0, r6
 80061ec:	f7ff ffc5 	bl	800617a <_Bfree>
 80061f0:	4644      	mov	r4, r8
 80061f2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80061f6:	3501      	adds	r5, #1
 80061f8:	615f      	str	r7, [r3, #20]
 80061fa:	6125      	str	r5, [r4, #16]
 80061fc:	4620      	mov	r0, r4
 80061fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006202 <__hi0bits>:
 8006202:	0c02      	lsrs	r2, r0, #16
 8006204:	0412      	lsls	r2, r2, #16
 8006206:	4603      	mov	r3, r0
 8006208:	b9b2      	cbnz	r2, 8006238 <__hi0bits+0x36>
 800620a:	0403      	lsls	r3, r0, #16
 800620c:	2010      	movs	r0, #16
 800620e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006212:	bf04      	itt	eq
 8006214:	021b      	lsleq	r3, r3, #8
 8006216:	3008      	addeq	r0, #8
 8006218:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800621c:	bf04      	itt	eq
 800621e:	011b      	lsleq	r3, r3, #4
 8006220:	3004      	addeq	r0, #4
 8006222:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006226:	bf04      	itt	eq
 8006228:	009b      	lsleq	r3, r3, #2
 800622a:	3002      	addeq	r0, #2
 800622c:	2b00      	cmp	r3, #0
 800622e:	db06      	blt.n	800623e <__hi0bits+0x3c>
 8006230:	005b      	lsls	r3, r3, #1
 8006232:	d503      	bpl.n	800623c <__hi0bits+0x3a>
 8006234:	3001      	adds	r0, #1
 8006236:	4770      	bx	lr
 8006238:	2000      	movs	r0, #0
 800623a:	e7e8      	b.n	800620e <__hi0bits+0xc>
 800623c:	2020      	movs	r0, #32
 800623e:	4770      	bx	lr

08006240 <__lo0bits>:
 8006240:	6803      	ldr	r3, [r0, #0]
 8006242:	f013 0207 	ands.w	r2, r3, #7
 8006246:	4601      	mov	r1, r0
 8006248:	d00b      	beq.n	8006262 <__lo0bits+0x22>
 800624a:	07da      	lsls	r2, r3, #31
 800624c:	d423      	bmi.n	8006296 <__lo0bits+0x56>
 800624e:	0798      	lsls	r0, r3, #30
 8006250:	bf49      	itett	mi
 8006252:	085b      	lsrmi	r3, r3, #1
 8006254:	089b      	lsrpl	r3, r3, #2
 8006256:	2001      	movmi	r0, #1
 8006258:	600b      	strmi	r3, [r1, #0]
 800625a:	bf5c      	itt	pl
 800625c:	600b      	strpl	r3, [r1, #0]
 800625e:	2002      	movpl	r0, #2
 8006260:	4770      	bx	lr
 8006262:	b298      	uxth	r0, r3
 8006264:	b9a8      	cbnz	r0, 8006292 <__lo0bits+0x52>
 8006266:	0c1b      	lsrs	r3, r3, #16
 8006268:	2010      	movs	r0, #16
 800626a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800626e:	bf04      	itt	eq
 8006270:	0a1b      	lsreq	r3, r3, #8
 8006272:	3008      	addeq	r0, #8
 8006274:	071a      	lsls	r2, r3, #28
 8006276:	bf04      	itt	eq
 8006278:	091b      	lsreq	r3, r3, #4
 800627a:	3004      	addeq	r0, #4
 800627c:	079a      	lsls	r2, r3, #30
 800627e:	bf04      	itt	eq
 8006280:	089b      	lsreq	r3, r3, #2
 8006282:	3002      	addeq	r0, #2
 8006284:	07da      	lsls	r2, r3, #31
 8006286:	d402      	bmi.n	800628e <__lo0bits+0x4e>
 8006288:	085b      	lsrs	r3, r3, #1
 800628a:	d006      	beq.n	800629a <__lo0bits+0x5a>
 800628c:	3001      	adds	r0, #1
 800628e:	600b      	str	r3, [r1, #0]
 8006290:	4770      	bx	lr
 8006292:	4610      	mov	r0, r2
 8006294:	e7e9      	b.n	800626a <__lo0bits+0x2a>
 8006296:	2000      	movs	r0, #0
 8006298:	4770      	bx	lr
 800629a:	2020      	movs	r0, #32
 800629c:	4770      	bx	lr

0800629e <__i2b>:
 800629e:	b510      	push	{r4, lr}
 80062a0:	460c      	mov	r4, r1
 80062a2:	2101      	movs	r1, #1
 80062a4:	f7ff ff44 	bl	8006130 <_Balloc>
 80062a8:	2201      	movs	r2, #1
 80062aa:	6144      	str	r4, [r0, #20]
 80062ac:	6102      	str	r2, [r0, #16]
 80062ae:	bd10      	pop	{r4, pc}

080062b0 <__multiply>:
 80062b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062b4:	4614      	mov	r4, r2
 80062b6:	690a      	ldr	r2, [r1, #16]
 80062b8:	6923      	ldr	r3, [r4, #16]
 80062ba:	429a      	cmp	r2, r3
 80062bc:	bfb8      	it	lt
 80062be:	460b      	movlt	r3, r1
 80062c0:	4688      	mov	r8, r1
 80062c2:	bfbc      	itt	lt
 80062c4:	46a0      	movlt	r8, r4
 80062c6:	461c      	movlt	r4, r3
 80062c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80062cc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80062d0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80062d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80062d8:	eb07 0609 	add.w	r6, r7, r9
 80062dc:	42b3      	cmp	r3, r6
 80062de:	bfb8      	it	lt
 80062e0:	3101      	addlt	r1, #1
 80062e2:	f7ff ff25 	bl	8006130 <_Balloc>
 80062e6:	f100 0514 	add.w	r5, r0, #20
 80062ea:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80062ee:	462b      	mov	r3, r5
 80062f0:	2200      	movs	r2, #0
 80062f2:	4573      	cmp	r3, lr
 80062f4:	d316      	bcc.n	8006324 <__multiply+0x74>
 80062f6:	f104 0214 	add.w	r2, r4, #20
 80062fa:	f108 0114 	add.w	r1, r8, #20
 80062fe:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006302:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006306:	9300      	str	r3, [sp, #0]
 8006308:	9b00      	ldr	r3, [sp, #0]
 800630a:	9201      	str	r2, [sp, #4]
 800630c:	4293      	cmp	r3, r2
 800630e:	d80c      	bhi.n	800632a <__multiply+0x7a>
 8006310:	2e00      	cmp	r6, #0
 8006312:	dd03      	ble.n	800631c <__multiply+0x6c>
 8006314:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006318:	2b00      	cmp	r3, #0
 800631a:	d05d      	beq.n	80063d8 <__multiply+0x128>
 800631c:	6106      	str	r6, [r0, #16]
 800631e:	b003      	add	sp, #12
 8006320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006324:	f843 2b04 	str.w	r2, [r3], #4
 8006328:	e7e3      	b.n	80062f2 <__multiply+0x42>
 800632a:	f8b2 b000 	ldrh.w	fp, [r2]
 800632e:	f1bb 0f00 	cmp.w	fp, #0
 8006332:	d023      	beq.n	800637c <__multiply+0xcc>
 8006334:	4689      	mov	r9, r1
 8006336:	46ac      	mov	ip, r5
 8006338:	f04f 0800 	mov.w	r8, #0
 800633c:	f859 4b04 	ldr.w	r4, [r9], #4
 8006340:	f8dc a000 	ldr.w	sl, [ip]
 8006344:	b2a3      	uxth	r3, r4
 8006346:	fa1f fa8a 	uxth.w	sl, sl
 800634a:	fb0b a303 	mla	r3, fp, r3, sl
 800634e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006352:	f8dc 4000 	ldr.w	r4, [ip]
 8006356:	4443      	add	r3, r8
 8006358:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800635c:	fb0b 840a 	mla	r4, fp, sl, r8
 8006360:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006364:	46e2      	mov	sl, ip
 8006366:	b29b      	uxth	r3, r3
 8006368:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800636c:	454f      	cmp	r7, r9
 800636e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006372:	f84a 3b04 	str.w	r3, [sl], #4
 8006376:	d82b      	bhi.n	80063d0 <__multiply+0x120>
 8006378:	f8cc 8004 	str.w	r8, [ip, #4]
 800637c:	9b01      	ldr	r3, [sp, #4]
 800637e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006382:	3204      	adds	r2, #4
 8006384:	f1ba 0f00 	cmp.w	sl, #0
 8006388:	d020      	beq.n	80063cc <__multiply+0x11c>
 800638a:	682b      	ldr	r3, [r5, #0]
 800638c:	4689      	mov	r9, r1
 800638e:	46a8      	mov	r8, r5
 8006390:	f04f 0b00 	mov.w	fp, #0
 8006394:	f8b9 c000 	ldrh.w	ip, [r9]
 8006398:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800639c:	fb0a 440c 	mla	r4, sl, ip, r4
 80063a0:	445c      	add	r4, fp
 80063a2:	46c4      	mov	ip, r8
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80063aa:	f84c 3b04 	str.w	r3, [ip], #4
 80063ae:	f859 3b04 	ldr.w	r3, [r9], #4
 80063b2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80063b6:	0c1b      	lsrs	r3, r3, #16
 80063b8:	fb0a b303 	mla	r3, sl, r3, fp
 80063bc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80063c0:	454f      	cmp	r7, r9
 80063c2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80063c6:	d805      	bhi.n	80063d4 <__multiply+0x124>
 80063c8:	f8c8 3004 	str.w	r3, [r8, #4]
 80063cc:	3504      	adds	r5, #4
 80063ce:	e79b      	b.n	8006308 <__multiply+0x58>
 80063d0:	46d4      	mov	ip, sl
 80063d2:	e7b3      	b.n	800633c <__multiply+0x8c>
 80063d4:	46e0      	mov	r8, ip
 80063d6:	e7dd      	b.n	8006394 <__multiply+0xe4>
 80063d8:	3e01      	subs	r6, #1
 80063da:	e799      	b.n	8006310 <__multiply+0x60>

080063dc <__pow5mult>:
 80063dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063e0:	4615      	mov	r5, r2
 80063e2:	f012 0203 	ands.w	r2, r2, #3
 80063e6:	4606      	mov	r6, r0
 80063e8:	460f      	mov	r7, r1
 80063ea:	d007      	beq.n	80063fc <__pow5mult+0x20>
 80063ec:	3a01      	subs	r2, #1
 80063ee:	4c1a      	ldr	r4, [pc, #104]	; (8006458 <__pow5mult+0x7c>)
 80063f0:	2300      	movs	r3, #0
 80063f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80063f6:	f7ff fec9 	bl	800618c <__multadd>
 80063fa:	4607      	mov	r7, r0
 80063fc:	10ad      	asrs	r5, r5, #2
 80063fe:	d027      	beq.n	8006450 <__pow5mult+0x74>
 8006400:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8006402:	b944      	cbnz	r4, 8006416 <__pow5mult+0x3a>
 8006404:	f240 2171 	movw	r1, #625	; 0x271
 8006408:	4630      	mov	r0, r6
 800640a:	f7ff ff48 	bl	800629e <__i2b>
 800640e:	2300      	movs	r3, #0
 8006410:	64b0      	str	r0, [r6, #72]	; 0x48
 8006412:	4604      	mov	r4, r0
 8006414:	6003      	str	r3, [r0, #0]
 8006416:	f04f 0800 	mov.w	r8, #0
 800641a:	07eb      	lsls	r3, r5, #31
 800641c:	d50a      	bpl.n	8006434 <__pow5mult+0x58>
 800641e:	4639      	mov	r1, r7
 8006420:	4622      	mov	r2, r4
 8006422:	4630      	mov	r0, r6
 8006424:	f7ff ff44 	bl	80062b0 <__multiply>
 8006428:	4639      	mov	r1, r7
 800642a:	4681      	mov	r9, r0
 800642c:	4630      	mov	r0, r6
 800642e:	f7ff fea4 	bl	800617a <_Bfree>
 8006432:	464f      	mov	r7, r9
 8006434:	106d      	asrs	r5, r5, #1
 8006436:	d00b      	beq.n	8006450 <__pow5mult+0x74>
 8006438:	6820      	ldr	r0, [r4, #0]
 800643a:	b938      	cbnz	r0, 800644c <__pow5mult+0x70>
 800643c:	4622      	mov	r2, r4
 800643e:	4621      	mov	r1, r4
 8006440:	4630      	mov	r0, r6
 8006442:	f7ff ff35 	bl	80062b0 <__multiply>
 8006446:	6020      	str	r0, [r4, #0]
 8006448:	f8c0 8000 	str.w	r8, [r0]
 800644c:	4604      	mov	r4, r0
 800644e:	e7e4      	b.n	800641a <__pow5mult+0x3e>
 8006450:	4638      	mov	r0, r7
 8006452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006456:	bf00      	nop
 8006458:	08008540 	.word	0x08008540

0800645c <__lshift>:
 800645c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006460:	460c      	mov	r4, r1
 8006462:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006466:	6923      	ldr	r3, [r4, #16]
 8006468:	6849      	ldr	r1, [r1, #4]
 800646a:	eb0a 0903 	add.w	r9, sl, r3
 800646e:	68a3      	ldr	r3, [r4, #8]
 8006470:	4607      	mov	r7, r0
 8006472:	4616      	mov	r6, r2
 8006474:	f109 0501 	add.w	r5, r9, #1
 8006478:	42ab      	cmp	r3, r5
 800647a:	db32      	blt.n	80064e2 <__lshift+0x86>
 800647c:	4638      	mov	r0, r7
 800647e:	f7ff fe57 	bl	8006130 <_Balloc>
 8006482:	2300      	movs	r3, #0
 8006484:	4680      	mov	r8, r0
 8006486:	f100 0114 	add.w	r1, r0, #20
 800648a:	461a      	mov	r2, r3
 800648c:	4553      	cmp	r3, sl
 800648e:	db2b      	blt.n	80064e8 <__lshift+0x8c>
 8006490:	6920      	ldr	r0, [r4, #16]
 8006492:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006496:	f104 0314 	add.w	r3, r4, #20
 800649a:	f016 021f 	ands.w	r2, r6, #31
 800649e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80064a2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80064a6:	d025      	beq.n	80064f4 <__lshift+0x98>
 80064a8:	f1c2 0e20 	rsb	lr, r2, #32
 80064ac:	2000      	movs	r0, #0
 80064ae:	681e      	ldr	r6, [r3, #0]
 80064b0:	468a      	mov	sl, r1
 80064b2:	4096      	lsls	r6, r2
 80064b4:	4330      	orrs	r0, r6
 80064b6:	f84a 0b04 	str.w	r0, [sl], #4
 80064ba:	f853 0b04 	ldr.w	r0, [r3], #4
 80064be:	459c      	cmp	ip, r3
 80064c0:	fa20 f00e 	lsr.w	r0, r0, lr
 80064c4:	d814      	bhi.n	80064f0 <__lshift+0x94>
 80064c6:	6048      	str	r0, [r1, #4]
 80064c8:	b108      	cbz	r0, 80064ce <__lshift+0x72>
 80064ca:	f109 0502 	add.w	r5, r9, #2
 80064ce:	3d01      	subs	r5, #1
 80064d0:	4638      	mov	r0, r7
 80064d2:	f8c8 5010 	str.w	r5, [r8, #16]
 80064d6:	4621      	mov	r1, r4
 80064d8:	f7ff fe4f 	bl	800617a <_Bfree>
 80064dc:	4640      	mov	r0, r8
 80064de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064e2:	3101      	adds	r1, #1
 80064e4:	005b      	lsls	r3, r3, #1
 80064e6:	e7c7      	b.n	8006478 <__lshift+0x1c>
 80064e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80064ec:	3301      	adds	r3, #1
 80064ee:	e7cd      	b.n	800648c <__lshift+0x30>
 80064f0:	4651      	mov	r1, sl
 80064f2:	e7dc      	b.n	80064ae <__lshift+0x52>
 80064f4:	3904      	subs	r1, #4
 80064f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80064fa:	f841 2f04 	str.w	r2, [r1, #4]!
 80064fe:	459c      	cmp	ip, r3
 8006500:	d8f9      	bhi.n	80064f6 <__lshift+0x9a>
 8006502:	e7e4      	b.n	80064ce <__lshift+0x72>

08006504 <__mcmp>:
 8006504:	6903      	ldr	r3, [r0, #16]
 8006506:	690a      	ldr	r2, [r1, #16]
 8006508:	1a9b      	subs	r3, r3, r2
 800650a:	b530      	push	{r4, r5, lr}
 800650c:	d10c      	bne.n	8006528 <__mcmp+0x24>
 800650e:	0092      	lsls	r2, r2, #2
 8006510:	3014      	adds	r0, #20
 8006512:	3114      	adds	r1, #20
 8006514:	1884      	adds	r4, r0, r2
 8006516:	4411      	add	r1, r2
 8006518:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800651c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006520:	4295      	cmp	r5, r2
 8006522:	d003      	beq.n	800652c <__mcmp+0x28>
 8006524:	d305      	bcc.n	8006532 <__mcmp+0x2e>
 8006526:	2301      	movs	r3, #1
 8006528:	4618      	mov	r0, r3
 800652a:	bd30      	pop	{r4, r5, pc}
 800652c:	42a0      	cmp	r0, r4
 800652e:	d3f3      	bcc.n	8006518 <__mcmp+0x14>
 8006530:	e7fa      	b.n	8006528 <__mcmp+0x24>
 8006532:	f04f 33ff 	mov.w	r3, #4294967295
 8006536:	e7f7      	b.n	8006528 <__mcmp+0x24>

08006538 <__mdiff>:
 8006538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800653c:	460d      	mov	r5, r1
 800653e:	4607      	mov	r7, r0
 8006540:	4611      	mov	r1, r2
 8006542:	4628      	mov	r0, r5
 8006544:	4614      	mov	r4, r2
 8006546:	f7ff ffdd 	bl	8006504 <__mcmp>
 800654a:	1e06      	subs	r6, r0, #0
 800654c:	d108      	bne.n	8006560 <__mdiff+0x28>
 800654e:	4631      	mov	r1, r6
 8006550:	4638      	mov	r0, r7
 8006552:	f7ff fded 	bl	8006130 <_Balloc>
 8006556:	2301      	movs	r3, #1
 8006558:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800655c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006560:	bfa4      	itt	ge
 8006562:	4623      	movge	r3, r4
 8006564:	462c      	movge	r4, r5
 8006566:	4638      	mov	r0, r7
 8006568:	6861      	ldr	r1, [r4, #4]
 800656a:	bfa6      	itte	ge
 800656c:	461d      	movge	r5, r3
 800656e:	2600      	movge	r6, #0
 8006570:	2601      	movlt	r6, #1
 8006572:	f7ff fddd 	bl	8006130 <_Balloc>
 8006576:	692b      	ldr	r3, [r5, #16]
 8006578:	60c6      	str	r6, [r0, #12]
 800657a:	6926      	ldr	r6, [r4, #16]
 800657c:	f105 0914 	add.w	r9, r5, #20
 8006580:	f104 0214 	add.w	r2, r4, #20
 8006584:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006588:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800658c:	f100 0514 	add.w	r5, r0, #20
 8006590:	f04f 0e00 	mov.w	lr, #0
 8006594:	f852 ab04 	ldr.w	sl, [r2], #4
 8006598:	f859 4b04 	ldr.w	r4, [r9], #4
 800659c:	fa1e f18a 	uxtah	r1, lr, sl
 80065a0:	b2a3      	uxth	r3, r4
 80065a2:	1ac9      	subs	r1, r1, r3
 80065a4:	0c23      	lsrs	r3, r4, #16
 80065a6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80065aa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80065ae:	b289      	uxth	r1, r1
 80065b0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80065b4:	45c8      	cmp	r8, r9
 80065b6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80065ba:	4694      	mov	ip, r2
 80065bc:	f845 3b04 	str.w	r3, [r5], #4
 80065c0:	d8e8      	bhi.n	8006594 <__mdiff+0x5c>
 80065c2:	45bc      	cmp	ip, r7
 80065c4:	d304      	bcc.n	80065d0 <__mdiff+0x98>
 80065c6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80065ca:	b183      	cbz	r3, 80065ee <__mdiff+0xb6>
 80065cc:	6106      	str	r6, [r0, #16]
 80065ce:	e7c5      	b.n	800655c <__mdiff+0x24>
 80065d0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80065d4:	fa1e f381 	uxtah	r3, lr, r1
 80065d8:	141a      	asrs	r2, r3, #16
 80065da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80065de:	b29b      	uxth	r3, r3
 80065e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065e4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80065e8:	f845 3b04 	str.w	r3, [r5], #4
 80065ec:	e7e9      	b.n	80065c2 <__mdiff+0x8a>
 80065ee:	3e01      	subs	r6, #1
 80065f0:	e7e9      	b.n	80065c6 <__mdiff+0x8e>

080065f2 <__d2b>:
 80065f2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80065f6:	460e      	mov	r6, r1
 80065f8:	2101      	movs	r1, #1
 80065fa:	ec59 8b10 	vmov	r8, r9, d0
 80065fe:	4615      	mov	r5, r2
 8006600:	f7ff fd96 	bl	8006130 <_Balloc>
 8006604:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006608:	4607      	mov	r7, r0
 800660a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800660e:	bb34      	cbnz	r4, 800665e <__d2b+0x6c>
 8006610:	9301      	str	r3, [sp, #4]
 8006612:	f1b8 0300 	subs.w	r3, r8, #0
 8006616:	d027      	beq.n	8006668 <__d2b+0x76>
 8006618:	a802      	add	r0, sp, #8
 800661a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800661e:	f7ff fe0f 	bl	8006240 <__lo0bits>
 8006622:	9900      	ldr	r1, [sp, #0]
 8006624:	b1f0      	cbz	r0, 8006664 <__d2b+0x72>
 8006626:	9a01      	ldr	r2, [sp, #4]
 8006628:	f1c0 0320 	rsb	r3, r0, #32
 800662c:	fa02 f303 	lsl.w	r3, r2, r3
 8006630:	430b      	orrs	r3, r1
 8006632:	40c2      	lsrs	r2, r0
 8006634:	617b      	str	r3, [r7, #20]
 8006636:	9201      	str	r2, [sp, #4]
 8006638:	9b01      	ldr	r3, [sp, #4]
 800663a:	61bb      	str	r3, [r7, #24]
 800663c:	2b00      	cmp	r3, #0
 800663e:	bf14      	ite	ne
 8006640:	2102      	movne	r1, #2
 8006642:	2101      	moveq	r1, #1
 8006644:	6139      	str	r1, [r7, #16]
 8006646:	b1c4      	cbz	r4, 800667a <__d2b+0x88>
 8006648:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800664c:	4404      	add	r4, r0
 800664e:	6034      	str	r4, [r6, #0]
 8006650:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006654:	6028      	str	r0, [r5, #0]
 8006656:	4638      	mov	r0, r7
 8006658:	b003      	add	sp, #12
 800665a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800665e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006662:	e7d5      	b.n	8006610 <__d2b+0x1e>
 8006664:	6179      	str	r1, [r7, #20]
 8006666:	e7e7      	b.n	8006638 <__d2b+0x46>
 8006668:	a801      	add	r0, sp, #4
 800666a:	f7ff fde9 	bl	8006240 <__lo0bits>
 800666e:	9b01      	ldr	r3, [sp, #4]
 8006670:	617b      	str	r3, [r7, #20]
 8006672:	2101      	movs	r1, #1
 8006674:	6139      	str	r1, [r7, #16]
 8006676:	3020      	adds	r0, #32
 8006678:	e7e5      	b.n	8006646 <__d2b+0x54>
 800667a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800667e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006682:	6030      	str	r0, [r6, #0]
 8006684:	6918      	ldr	r0, [r3, #16]
 8006686:	f7ff fdbc 	bl	8006202 <__hi0bits>
 800668a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800668e:	e7e1      	b.n	8006654 <__d2b+0x62>

08006690 <frexp>:
 8006690:	b570      	push	{r4, r5, r6, lr}
 8006692:	2100      	movs	r1, #0
 8006694:	ec55 4b10 	vmov	r4, r5, d0
 8006698:	6001      	str	r1, [r0, #0]
 800669a:	4916      	ldr	r1, [pc, #88]	; (80066f4 <frexp+0x64>)
 800669c:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80066a0:	428b      	cmp	r3, r1
 80066a2:	4606      	mov	r6, r0
 80066a4:	462a      	mov	r2, r5
 80066a6:	dc22      	bgt.n	80066ee <frexp+0x5e>
 80066a8:	ee10 1a10 	vmov	r1, s0
 80066ac:	4319      	orrs	r1, r3
 80066ae:	d01e      	beq.n	80066ee <frexp+0x5e>
 80066b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066b4:	da0d      	bge.n	80066d2 <frexp+0x42>
 80066b6:	2200      	movs	r2, #0
 80066b8:	4b0f      	ldr	r3, [pc, #60]	; (80066f8 <frexp+0x68>)
 80066ba:	ee10 0a10 	vmov	r0, s0
 80066be:	4629      	mov	r1, r5
 80066c0:	f7f9 ffba 	bl	8000638 <__aeabi_dmul>
 80066c4:	460a      	mov	r2, r1
 80066c6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80066ca:	f06f 0135 	mvn.w	r1, #53	; 0x35
 80066ce:	4604      	mov	r4, r0
 80066d0:	6031      	str	r1, [r6, #0]
 80066d2:	6831      	ldr	r1, [r6, #0]
 80066d4:	151b      	asrs	r3, r3, #20
 80066d6:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80066da:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80066de:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 80066e2:	440b      	add	r3, r1
 80066e4:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80066e8:	6033      	str	r3, [r6, #0]
 80066ea:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 80066ee:	ec45 4b10 	vmov	d0, r4, r5
 80066f2:	bd70      	pop	{r4, r5, r6, pc}
 80066f4:	7fefffff 	.word	0x7fefffff
 80066f8:	43500000 	.word	0x43500000

080066fc <_sbrk_r>:
 80066fc:	b538      	push	{r3, r4, r5, lr}
 80066fe:	4c06      	ldr	r4, [pc, #24]	; (8006718 <_sbrk_r+0x1c>)
 8006700:	2300      	movs	r3, #0
 8006702:	4605      	mov	r5, r0
 8006704:	4608      	mov	r0, r1
 8006706:	6023      	str	r3, [r4, #0]
 8006708:	f7fc fcc6 	bl	8003098 <_sbrk>
 800670c:	1c43      	adds	r3, r0, #1
 800670e:	d102      	bne.n	8006716 <_sbrk_r+0x1a>
 8006710:	6823      	ldr	r3, [r4, #0]
 8006712:	b103      	cbz	r3, 8006716 <_sbrk_r+0x1a>
 8006714:	602b      	str	r3, [r5, #0]
 8006716:	bd38      	pop	{r3, r4, r5, pc}
 8006718:	20000f8c 	.word	0x20000f8c

0800671c <__sread>:
 800671c:	b510      	push	{r4, lr}
 800671e:	460c      	mov	r4, r1
 8006720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006724:	f000 fbb6 	bl	8006e94 <_read_r>
 8006728:	2800      	cmp	r0, #0
 800672a:	bfab      	itete	ge
 800672c:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 800672e:	89a3      	ldrhlt	r3, [r4, #12]
 8006730:	181b      	addge	r3, r3, r0
 8006732:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006736:	bfac      	ite	ge
 8006738:	6523      	strge	r3, [r4, #80]	; 0x50
 800673a:	81a3      	strhlt	r3, [r4, #12]
 800673c:	bd10      	pop	{r4, pc}

0800673e <__swrite>:
 800673e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006742:	461f      	mov	r7, r3
 8006744:	898b      	ldrh	r3, [r1, #12]
 8006746:	05db      	lsls	r3, r3, #23
 8006748:	4605      	mov	r5, r0
 800674a:	460c      	mov	r4, r1
 800674c:	4616      	mov	r6, r2
 800674e:	d505      	bpl.n	800675c <__swrite+0x1e>
 8006750:	2302      	movs	r3, #2
 8006752:	2200      	movs	r2, #0
 8006754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006758:	f000 fb5e 	bl	8006e18 <_lseek_r>
 800675c:	89a3      	ldrh	r3, [r4, #12]
 800675e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006762:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006766:	81a3      	strh	r3, [r4, #12]
 8006768:	4632      	mov	r2, r6
 800676a:	463b      	mov	r3, r7
 800676c:	4628      	mov	r0, r5
 800676e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006772:	f000 b86b 	b.w	800684c <_write_r>

08006776 <__sseek>:
 8006776:	b510      	push	{r4, lr}
 8006778:	460c      	mov	r4, r1
 800677a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800677e:	f000 fb4b 	bl	8006e18 <_lseek_r>
 8006782:	1c43      	adds	r3, r0, #1
 8006784:	89a3      	ldrh	r3, [r4, #12]
 8006786:	bf15      	itete	ne
 8006788:	6520      	strne	r0, [r4, #80]	; 0x50
 800678a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800678e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006792:	81a3      	strheq	r3, [r4, #12]
 8006794:	bf18      	it	ne
 8006796:	81a3      	strhne	r3, [r4, #12]
 8006798:	bd10      	pop	{r4, pc}

0800679a <__sclose>:
 800679a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800679e:	f000 b8eb 	b.w	8006978 <_close_r>

080067a2 <strncpy>:
 80067a2:	b570      	push	{r4, r5, r6, lr}
 80067a4:	3901      	subs	r1, #1
 80067a6:	4604      	mov	r4, r0
 80067a8:	b902      	cbnz	r2, 80067ac <strncpy+0xa>
 80067aa:	bd70      	pop	{r4, r5, r6, pc}
 80067ac:	4623      	mov	r3, r4
 80067ae:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80067b2:	f803 5b01 	strb.w	r5, [r3], #1
 80067b6:	1e56      	subs	r6, r2, #1
 80067b8:	b92d      	cbnz	r5, 80067c6 <strncpy+0x24>
 80067ba:	4414      	add	r4, r2
 80067bc:	42a3      	cmp	r3, r4
 80067be:	d0f4      	beq.n	80067aa <strncpy+0x8>
 80067c0:	f803 5b01 	strb.w	r5, [r3], #1
 80067c4:	e7fa      	b.n	80067bc <strncpy+0x1a>
 80067c6:	461c      	mov	r4, r3
 80067c8:	4632      	mov	r2, r6
 80067ca:	e7ed      	b.n	80067a8 <strncpy+0x6>

080067cc <sysconf>:
 80067cc:	2808      	cmp	r0, #8
 80067ce:	b508      	push	{r3, lr}
 80067d0:	d006      	beq.n	80067e0 <sysconf+0x14>
 80067d2:	f7fc fde7 	bl	80033a4 <__errno>
 80067d6:	2316      	movs	r3, #22
 80067d8:	6003      	str	r3, [r0, #0]
 80067da:	f04f 30ff 	mov.w	r0, #4294967295
 80067de:	bd08      	pop	{r3, pc}
 80067e0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80067e4:	e7fb      	b.n	80067de <sysconf+0x12>

080067e6 <__sprint_r>:
 80067e6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ea:	6893      	ldr	r3, [r2, #8]
 80067ec:	4680      	mov	r8, r0
 80067ee:	460f      	mov	r7, r1
 80067f0:	4614      	mov	r4, r2
 80067f2:	b91b      	cbnz	r3, 80067fc <__sprint_r+0x16>
 80067f4:	6053      	str	r3, [r2, #4]
 80067f6:	4618      	mov	r0, r3
 80067f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067fc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80067fe:	049d      	lsls	r5, r3, #18
 8006800:	d520      	bpl.n	8006844 <__sprint_r+0x5e>
 8006802:	6815      	ldr	r5, [r2, #0]
 8006804:	68a0      	ldr	r0, [r4, #8]
 8006806:	3508      	adds	r5, #8
 8006808:	b918      	cbnz	r0, 8006812 <__sprint_r+0x2c>
 800680a:	2300      	movs	r3, #0
 800680c:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8006810:	e7f2      	b.n	80067f8 <__sprint_r+0x12>
 8006812:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 8006816:	f04f 0900 	mov.w	r9, #0
 800681a:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 800681e:	45ca      	cmp	sl, r9
 8006820:	dc05      	bgt.n	800682e <__sprint_r+0x48>
 8006822:	68a3      	ldr	r3, [r4, #8]
 8006824:	f026 0603 	bic.w	r6, r6, #3
 8006828:	1b9e      	subs	r6, r3, r6
 800682a:	60a6      	str	r6, [r4, #8]
 800682c:	e7ea      	b.n	8006804 <__sprint_r+0x1e>
 800682e:	463a      	mov	r2, r7
 8006830:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8006834:	4640      	mov	r0, r8
 8006836:	f000 f947 	bl	8006ac8 <_fputwc_r>
 800683a:	1c43      	adds	r3, r0, #1
 800683c:	d0e5      	beq.n	800680a <__sprint_r+0x24>
 800683e:	f109 0901 	add.w	r9, r9, #1
 8006842:	e7ec      	b.n	800681e <__sprint_r+0x38>
 8006844:	f000 f97c 	bl	8006b40 <__sfvwrite_r>
 8006848:	e7df      	b.n	800680a <__sprint_r+0x24>
	...

0800684c <_write_r>:
 800684c:	b538      	push	{r3, r4, r5, lr}
 800684e:	4c07      	ldr	r4, [pc, #28]	; (800686c <_write_r+0x20>)
 8006850:	4605      	mov	r5, r0
 8006852:	4608      	mov	r0, r1
 8006854:	4611      	mov	r1, r2
 8006856:	2200      	movs	r2, #0
 8006858:	6022      	str	r2, [r4, #0]
 800685a:	461a      	mov	r2, r3
 800685c:	f7fc fa76 	bl	8002d4c <_write>
 8006860:	1c43      	adds	r3, r0, #1
 8006862:	d102      	bne.n	800686a <_write_r+0x1e>
 8006864:	6823      	ldr	r3, [r4, #0]
 8006866:	b103      	cbz	r3, 800686a <_write_r+0x1e>
 8006868:	602b      	str	r3, [r5, #0]
 800686a:	bd38      	pop	{r3, r4, r5, pc}
 800686c:	20000f8c 	.word	0x20000f8c

08006870 <__register_exitproc>:
 8006870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006874:	4c26      	ldr	r4, [pc, #152]	; (8006910 <__register_exitproc+0xa0>)
 8006876:	4606      	mov	r6, r0
 8006878:	6820      	ldr	r0, [r4, #0]
 800687a:	4698      	mov	r8, r3
 800687c:	460f      	mov	r7, r1
 800687e:	4691      	mov	r9, r2
 8006880:	f7ff f99a 	bl	8005bb8 <__retarget_lock_acquire_recursive>
 8006884:	4b23      	ldr	r3, [pc, #140]	; (8006914 <__register_exitproc+0xa4>)
 8006886:	681d      	ldr	r5, [r3, #0]
 8006888:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 800688c:	b918      	cbnz	r0, 8006896 <__register_exitproc+0x26>
 800688e:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 8006892:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8006896:	6843      	ldr	r3, [r0, #4]
 8006898:	2b1f      	cmp	r3, #31
 800689a:	dd19      	ble.n	80068d0 <__register_exitproc+0x60>
 800689c:	4b1e      	ldr	r3, [pc, #120]	; (8006918 <__register_exitproc+0xa8>)
 800689e:	b933      	cbnz	r3, 80068ae <__register_exitproc+0x3e>
 80068a0:	6820      	ldr	r0, [r4, #0]
 80068a2:	f7ff f98a 	bl	8005bba <__retarget_lock_release_recursive>
 80068a6:	f04f 30ff 	mov.w	r0, #4294967295
 80068aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068ae:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80068b2:	f3af 8000 	nop.w
 80068b6:	2800      	cmp	r0, #0
 80068b8:	d0f2      	beq.n	80068a0 <__register_exitproc+0x30>
 80068ba:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 80068be:	6003      	str	r3, [r0, #0]
 80068c0:	2200      	movs	r2, #0
 80068c2:	6042      	str	r2, [r0, #4]
 80068c4:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 80068c8:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 80068cc:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 80068d0:	6843      	ldr	r3, [r0, #4]
 80068d2:	b19e      	cbz	r6, 80068fc <__register_exitproc+0x8c>
 80068d4:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 80068d8:	2201      	movs	r2, #1
 80068da:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 80068de:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 80068e2:	409a      	lsls	r2, r3
 80068e4:	4311      	orrs	r1, r2
 80068e6:	2e02      	cmp	r6, #2
 80068e8:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 80068ec:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 80068f0:	bf02      	ittt	eq
 80068f2:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 80068f6:	430a      	orreq	r2, r1
 80068f8:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 80068fc:	1c5a      	adds	r2, r3, #1
 80068fe:	3302      	adds	r3, #2
 8006900:	6042      	str	r2, [r0, #4]
 8006902:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 8006906:	6820      	ldr	r0, [r4, #0]
 8006908:	f7ff f957 	bl	8005bba <__retarget_lock_release_recursive>
 800690c:	2000      	movs	r0, #0
 800690e:	e7cc      	b.n	80068aa <__register_exitproc+0x3a>
 8006910:	20000438 	.word	0x20000438
 8006914:	080083e8 	.word	0x080083e8
 8006918:	00000000 	.word	0x00000000

0800691c <_calloc_r>:
 800691c:	b510      	push	{r4, lr}
 800691e:	4351      	muls	r1, r2
 8006920:	f7ff f9b8 	bl	8005c94 <_malloc_r>
 8006924:	4604      	mov	r4, r0
 8006926:	b198      	cbz	r0, 8006950 <_calloc_r+0x34>
 8006928:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800692c:	f022 0203 	bic.w	r2, r2, #3
 8006930:	3a04      	subs	r2, #4
 8006932:	2a24      	cmp	r2, #36	; 0x24
 8006934:	d81b      	bhi.n	800696e <_calloc_r+0x52>
 8006936:	2a13      	cmp	r2, #19
 8006938:	d917      	bls.n	800696a <_calloc_r+0x4e>
 800693a:	2100      	movs	r1, #0
 800693c:	2a1b      	cmp	r2, #27
 800693e:	e9c0 1100 	strd	r1, r1, [r0]
 8006942:	d807      	bhi.n	8006954 <_calloc_r+0x38>
 8006944:	f100 0308 	add.w	r3, r0, #8
 8006948:	2200      	movs	r2, #0
 800694a:	e9c3 2200 	strd	r2, r2, [r3]
 800694e:	609a      	str	r2, [r3, #8]
 8006950:	4620      	mov	r0, r4
 8006952:	bd10      	pop	{r4, pc}
 8006954:	2a24      	cmp	r2, #36	; 0x24
 8006956:	e9c0 1102 	strd	r1, r1, [r0, #8]
 800695a:	bf11      	iteee	ne
 800695c:	f100 0310 	addne.w	r3, r0, #16
 8006960:	6101      	streq	r1, [r0, #16]
 8006962:	f100 0318 	addeq.w	r3, r0, #24
 8006966:	6141      	streq	r1, [r0, #20]
 8006968:	e7ee      	b.n	8006948 <_calloc_r+0x2c>
 800696a:	4603      	mov	r3, r0
 800696c:	e7ec      	b.n	8006948 <_calloc_r+0x2c>
 800696e:	2100      	movs	r1, #0
 8006970:	f7fc fd42 	bl	80033f8 <memset>
 8006974:	e7ec      	b.n	8006950 <_calloc_r+0x34>
	...

08006978 <_close_r>:
 8006978:	b538      	push	{r3, r4, r5, lr}
 800697a:	4c06      	ldr	r4, [pc, #24]	; (8006994 <_close_r+0x1c>)
 800697c:	2300      	movs	r3, #0
 800697e:	4605      	mov	r5, r0
 8006980:	4608      	mov	r0, r1
 8006982:	6023      	str	r3, [r4, #0]
 8006984:	f7fc fba6 	bl	80030d4 <_close>
 8006988:	1c43      	adds	r3, r0, #1
 800698a:	d102      	bne.n	8006992 <_close_r+0x1a>
 800698c:	6823      	ldr	r3, [r4, #0]
 800698e:	b103      	cbz	r3, 8006992 <_close_r+0x1a>
 8006990:	602b      	str	r3, [r5, #0]
 8006992:	bd38      	pop	{r3, r4, r5, pc}
 8006994:	20000f8c 	.word	0x20000f8c

08006998 <_fclose_r>:
 8006998:	b570      	push	{r4, r5, r6, lr}
 800699a:	4606      	mov	r6, r0
 800699c:	460c      	mov	r4, r1
 800699e:	b911      	cbnz	r1, 80069a6 <_fclose_r+0xe>
 80069a0:	2500      	movs	r5, #0
 80069a2:	4628      	mov	r0, r5
 80069a4:	bd70      	pop	{r4, r5, r6, pc}
 80069a6:	b118      	cbz	r0, 80069b0 <_fclose_r+0x18>
 80069a8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80069aa:	b90b      	cbnz	r3, 80069b0 <_fclose_r+0x18>
 80069ac:	f7fe ff8a 	bl	80058c4 <__sinit>
 80069b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80069b2:	07d8      	lsls	r0, r3, #31
 80069b4:	d405      	bmi.n	80069c2 <_fclose_r+0x2a>
 80069b6:	89a3      	ldrh	r3, [r4, #12]
 80069b8:	0599      	lsls	r1, r3, #22
 80069ba:	d402      	bmi.n	80069c2 <_fclose_r+0x2a>
 80069bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069be:	f7ff f8fb 	bl	8005bb8 <__retarget_lock_acquire_recursive>
 80069c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069c6:	b93b      	cbnz	r3, 80069d8 <_fclose_r+0x40>
 80069c8:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80069ca:	f015 0501 	ands.w	r5, r5, #1
 80069ce:	d1e7      	bne.n	80069a0 <_fclose_r+0x8>
 80069d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069d2:	f7ff f8f2 	bl	8005bba <__retarget_lock_release_recursive>
 80069d6:	e7e4      	b.n	80069a2 <_fclose_r+0xa>
 80069d8:	4621      	mov	r1, r4
 80069da:	4630      	mov	r0, r6
 80069dc:	f7fe fe78 	bl	80056d0 <__sflush_r>
 80069e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80069e2:	4605      	mov	r5, r0
 80069e4:	b133      	cbz	r3, 80069f4 <_fclose_r+0x5c>
 80069e6:	69e1      	ldr	r1, [r4, #28]
 80069e8:	4630      	mov	r0, r6
 80069ea:	4798      	blx	r3
 80069ec:	2800      	cmp	r0, #0
 80069ee:	bfb8      	it	lt
 80069f0:	f04f 35ff 	movlt.w	r5, #4294967295
 80069f4:	89a3      	ldrh	r3, [r4, #12]
 80069f6:	061a      	lsls	r2, r3, #24
 80069f8:	d503      	bpl.n	8006a02 <_fclose_r+0x6a>
 80069fa:	6921      	ldr	r1, [r4, #16]
 80069fc:	4630      	mov	r0, r6
 80069fe:	f7fe fff1 	bl	80059e4 <_free_r>
 8006a02:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006a04:	b141      	cbz	r1, 8006a18 <_fclose_r+0x80>
 8006a06:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8006a0a:	4299      	cmp	r1, r3
 8006a0c:	d002      	beq.n	8006a14 <_fclose_r+0x7c>
 8006a0e:	4630      	mov	r0, r6
 8006a10:	f7fe ffe8 	bl	80059e4 <_free_r>
 8006a14:	2300      	movs	r3, #0
 8006a16:	6323      	str	r3, [r4, #48]	; 0x30
 8006a18:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006a1a:	b121      	cbz	r1, 8006a26 <_fclose_r+0x8e>
 8006a1c:	4630      	mov	r0, r6
 8006a1e:	f7fe ffe1 	bl	80059e4 <_free_r>
 8006a22:	2300      	movs	r3, #0
 8006a24:	6463      	str	r3, [r4, #68]	; 0x44
 8006a26:	f7fe ff35 	bl	8005894 <__sfp_lock_acquire>
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	81a3      	strh	r3, [r4, #12]
 8006a2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a30:	07db      	lsls	r3, r3, #31
 8006a32:	d402      	bmi.n	8006a3a <_fclose_r+0xa2>
 8006a34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a36:	f7ff f8c0 	bl	8005bba <__retarget_lock_release_recursive>
 8006a3a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a3c:	f7ff f8bb 	bl	8005bb6 <__retarget_lock_close_recursive>
 8006a40:	f7fe ff2e 	bl	80058a0 <__sfp_lock_release>
 8006a44:	e7ad      	b.n	80069a2 <_fclose_r+0xa>

08006a46 <__fputwc>:
 8006a46:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006a4a:	4680      	mov	r8, r0
 8006a4c:	460e      	mov	r6, r1
 8006a4e:	4614      	mov	r4, r2
 8006a50:	f000 f9d4 	bl	8006dfc <__locale_mb_cur_max>
 8006a54:	2801      	cmp	r0, #1
 8006a56:	d11c      	bne.n	8006a92 <__fputwc+0x4c>
 8006a58:	1e73      	subs	r3, r6, #1
 8006a5a:	2bfe      	cmp	r3, #254	; 0xfe
 8006a5c:	d819      	bhi.n	8006a92 <__fputwc+0x4c>
 8006a5e:	f88d 6004 	strb.w	r6, [sp, #4]
 8006a62:	4605      	mov	r5, r0
 8006a64:	2700      	movs	r7, #0
 8006a66:	f10d 0904 	add.w	r9, sp, #4
 8006a6a:	42af      	cmp	r7, r5
 8006a6c:	d020      	beq.n	8006ab0 <__fputwc+0x6a>
 8006a6e:	68a3      	ldr	r3, [r4, #8]
 8006a70:	f817 1009 	ldrb.w	r1, [r7, r9]
 8006a74:	3b01      	subs	r3, #1
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	60a3      	str	r3, [r4, #8]
 8006a7a:	da04      	bge.n	8006a86 <__fputwc+0x40>
 8006a7c:	69a2      	ldr	r2, [r4, #24]
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	db1a      	blt.n	8006ab8 <__fputwc+0x72>
 8006a82:	290a      	cmp	r1, #10
 8006a84:	d018      	beq.n	8006ab8 <__fputwc+0x72>
 8006a86:	6823      	ldr	r3, [r4, #0]
 8006a88:	1c5a      	adds	r2, r3, #1
 8006a8a:	6022      	str	r2, [r4, #0]
 8006a8c:	7019      	strb	r1, [r3, #0]
 8006a8e:	3701      	adds	r7, #1
 8006a90:	e7eb      	b.n	8006a6a <__fputwc+0x24>
 8006a92:	4632      	mov	r2, r6
 8006a94:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 8006a98:	a901      	add	r1, sp, #4
 8006a9a:	4640      	mov	r0, r8
 8006a9c:	f000 fbfe 	bl	800729c <_wcrtomb_r>
 8006aa0:	1c42      	adds	r2, r0, #1
 8006aa2:	4605      	mov	r5, r0
 8006aa4:	d1de      	bne.n	8006a64 <__fputwc+0x1e>
 8006aa6:	89a3      	ldrh	r3, [r4, #12]
 8006aa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006aac:	81a3      	strh	r3, [r4, #12]
 8006aae:	4606      	mov	r6, r0
 8006ab0:	4630      	mov	r0, r6
 8006ab2:	b003      	add	sp, #12
 8006ab4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ab8:	4622      	mov	r2, r4
 8006aba:	4640      	mov	r0, r8
 8006abc:	f000 fba4 	bl	8007208 <__swbuf_r>
 8006ac0:	1c43      	adds	r3, r0, #1
 8006ac2:	d1e4      	bne.n	8006a8e <__fputwc+0x48>
 8006ac4:	4606      	mov	r6, r0
 8006ac6:	e7f3      	b.n	8006ab0 <__fputwc+0x6a>

08006ac8 <_fputwc_r>:
 8006ac8:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8006aca:	07db      	lsls	r3, r3, #31
 8006acc:	b570      	push	{r4, r5, r6, lr}
 8006ace:	4605      	mov	r5, r0
 8006ad0:	460e      	mov	r6, r1
 8006ad2:	4614      	mov	r4, r2
 8006ad4:	d405      	bmi.n	8006ae2 <_fputwc_r+0x1a>
 8006ad6:	8993      	ldrh	r3, [r2, #12]
 8006ad8:	0598      	lsls	r0, r3, #22
 8006ada:	d402      	bmi.n	8006ae2 <_fputwc_r+0x1a>
 8006adc:	6d90      	ldr	r0, [r2, #88]	; 0x58
 8006ade:	f7ff f86b 	bl	8005bb8 <__retarget_lock_acquire_recursive>
 8006ae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ae6:	0499      	lsls	r1, r3, #18
 8006ae8:	d406      	bmi.n	8006af8 <_fputwc_r+0x30>
 8006aea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006aee:	81a3      	strh	r3, [r4, #12]
 8006af0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006af2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006af6:	6663      	str	r3, [r4, #100]	; 0x64
 8006af8:	4622      	mov	r2, r4
 8006afa:	4628      	mov	r0, r5
 8006afc:	4631      	mov	r1, r6
 8006afe:	f7ff ffa2 	bl	8006a46 <__fputwc>
 8006b02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b04:	07da      	lsls	r2, r3, #31
 8006b06:	4605      	mov	r5, r0
 8006b08:	d405      	bmi.n	8006b16 <_fputwc_r+0x4e>
 8006b0a:	89a3      	ldrh	r3, [r4, #12]
 8006b0c:	059b      	lsls	r3, r3, #22
 8006b0e:	d402      	bmi.n	8006b16 <_fputwc_r+0x4e>
 8006b10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b12:	f7ff f852 	bl	8005bba <__retarget_lock_release_recursive>
 8006b16:	4628      	mov	r0, r5
 8006b18:	bd70      	pop	{r4, r5, r6, pc}
	...

08006b1c <_fstat_r>:
 8006b1c:	b538      	push	{r3, r4, r5, lr}
 8006b1e:	4c07      	ldr	r4, [pc, #28]	; (8006b3c <_fstat_r+0x20>)
 8006b20:	2300      	movs	r3, #0
 8006b22:	4605      	mov	r5, r0
 8006b24:	4608      	mov	r0, r1
 8006b26:	4611      	mov	r1, r2
 8006b28:	6023      	str	r3, [r4, #0]
 8006b2a:	f7fc fad6 	bl	80030da <_fstat>
 8006b2e:	1c43      	adds	r3, r0, #1
 8006b30:	d102      	bne.n	8006b38 <_fstat_r+0x1c>
 8006b32:	6823      	ldr	r3, [r4, #0]
 8006b34:	b103      	cbz	r3, 8006b38 <_fstat_r+0x1c>
 8006b36:	602b      	str	r3, [r5, #0]
 8006b38:	bd38      	pop	{r3, r4, r5, pc}
 8006b3a:	bf00      	nop
 8006b3c:	20000f8c 	.word	0x20000f8c

08006b40 <__sfvwrite_r>:
 8006b40:	6893      	ldr	r3, [r2, #8]
 8006b42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b46:	4680      	mov	r8, r0
 8006b48:	460c      	mov	r4, r1
 8006b4a:	4691      	mov	r9, r2
 8006b4c:	b91b      	cbnz	r3, 8006b56 <__sfvwrite_r+0x16>
 8006b4e:	2000      	movs	r0, #0
 8006b50:	b003      	add	sp, #12
 8006b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b56:	898b      	ldrh	r3, [r1, #12]
 8006b58:	0718      	lsls	r0, r3, #28
 8006b5a:	d54f      	bpl.n	8006bfc <__sfvwrite_r+0xbc>
 8006b5c:	690b      	ldr	r3, [r1, #16]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d04c      	beq.n	8006bfc <__sfvwrite_r+0xbc>
 8006b62:	89a5      	ldrh	r5, [r4, #12]
 8006b64:	f8d9 6000 	ldr.w	r6, [r9]
 8006b68:	f015 0702 	ands.w	r7, r5, #2
 8006b6c:	d169      	bne.n	8006c42 <__sfvwrite_r+0x102>
 8006b6e:	f015 0501 	ands.w	r5, r5, #1
 8006b72:	f000 809a 	beq.w	8006caa <__sfvwrite_r+0x16a>
 8006b76:	4638      	mov	r0, r7
 8006b78:	46ba      	mov	sl, r7
 8006b7a:	46bb      	mov	fp, r7
 8006b7c:	f1bb 0f00 	cmp.w	fp, #0
 8006b80:	f000 8103 	beq.w	8006d8a <__sfvwrite_r+0x24a>
 8006b84:	b950      	cbnz	r0, 8006b9c <__sfvwrite_r+0x5c>
 8006b86:	465a      	mov	r2, fp
 8006b88:	210a      	movs	r1, #10
 8006b8a:	4650      	mov	r0, sl
 8006b8c:	f7f9 fb40 	bl	8000210 <memchr>
 8006b90:	2800      	cmp	r0, #0
 8006b92:	f000 80ff 	beq.w	8006d94 <__sfvwrite_r+0x254>
 8006b96:	3001      	adds	r0, #1
 8006b98:	eba0 070a 	sub.w	r7, r0, sl
 8006b9c:	6820      	ldr	r0, [r4, #0]
 8006b9e:	6921      	ldr	r1, [r4, #16]
 8006ba0:	6962      	ldr	r2, [r4, #20]
 8006ba2:	455f      	cmp	r7, fp
 8006ba4:	463b      	mov	r3, r7
 8006ba6:	bf28      	it	cs
 8006ba8:	465b      	movcs	r3, fp
 8006baa:	4288      	cmp	r0, r1
 8006bac:	f240 80f5 	bls.w	8006d9a <__sfvwrite_r+0x25a>
 8006bb0:	68a5      	ldr	r5, [r4, #8]
 8006bb2:	4415      	add	r5, r2
 8006bb4:	42ab      	cmp	r3, r5
 8006bb6:	f340 80f0 	ble.w	8006d9a <__sfvwrite_r+0x25a>
 8006bba:	4651      	mov	r1, sl
 8006bbc:	462a      	mov	r2, r5
 8006bbe:	f000 f94f 	bl	8006e60 <memmove>
 8006bc2:	6823      	ldr	r3, [r4, #0]
 8006bc4:	442b      	add	r3, r5
 8006bc6:	6023      	str	r3, [r4, #0]
 8006bc8:	4621      	mov	r1, r4
 8006bca:	4640      	mov	r0, r8
 8006bcc:	f7fe fe0e 	bl	80057ec <_fflush_r>
 8006bd0:	2800      	cmp	r0, #0
 8006bd2:	d165      	bne.n	8006ca0 <__sfvwrite_r+0x160>
 8006bd4:	1b7f      	subs	r7, r7, r5
 8006bd6:	f040 80fa 	bne.w	8006dce <__sfvwrite_r+0x28e>
 8006bda:	4621      	mov	r1, r4
 8006bdc:	4640      	mov	r0, r8
 8006bde:	f7fe fe05 	bl	80057ec <_fflush_r>
 8006be2:	2800      	cmp	r0, #0
 8006be4:	d15c      	bne.n	8006ca0 <__sfvwrite_r+0x160>
 8006be6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8006bea:	44aa      	add	sl, r5
 8006bec:	ebab 0b05 	sub.w	fp, fp, r5
 8006bf0:	1b5d      	subs	r5, r3, r5
 8006bf2:	f8c9 5008 	str.w	r5, [r9, #8]
 8006bf6:	2d00      	cmp	r5, #0
 8006bf8:	d1c0      	bne.n	8006b7c <__sfvwrite_r+0x3c>
 8006bfa:	e7a8      	b.n	8006b4e <__sfvwrite_r+0xe>
 8006bfc:	4621      	mov	r1, r4
 8006bfe:	4640      	mov	r0, r8
 8006c00:	f7fd fec8 	bl	8004994 <__swsetup_r>
 8006c04:	2800      	cmp	r0, #0
 8006c06:	d0ac      	beq.n	8006b62 <__sfvwrite_r+0x22>
 8006c08:	f04f 30ff 	mov.w	r0, #4294967295
 8006c0c:	e7a0      	b.n	8006b50 <__sfvwrite_r+0x10>
 8006c0e:	e9d6 a700 	ldrd	sl, r7, [r6]
 8006c12:	3608      	adds	r6, #8
 8006c14:	2f00      	cmp	r7, #0
 8006c16:	d0fa      	beq.n	8006c0e <__sfvwrite_r+0xce>
 8006c18:	455f      	cmp	r7, fp
 8006c1a:	463b      	mov	r3, r7
 8006c1c:	4652      	mov	r2, sl
 8006c1e:	bf28      	it	cs
 8006c20:	465b      	movcs	r3, fp
 8006c22:	69e1      	ldr	r1, [r4, #28]
 8006c24:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006c26:	4640      	mov	r0, r8
 8006c28:	47a8      	blx	r5
 8006c2a:	2800      	cmp	r0, #0
 8006c2c:	dd38      	ble.n	8006ca0 <__sfvwrite_r+0x160>
 8006c2e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8006c32:	4482      	add	sl, r0
 8006c34:	1a3f      	subs	r7, r7, r0
 8006c36:	1a18      	subs	r0, r3, r0
 8006c38:	f8c9 0008 	str.w	r0, [r9, #8]
 8006c3c:	2800      	cmp	r0, #0
 8006c3e:	d1e9      	bne.n	8006c14 <__sfvwrite_r+0xd4>
 8006c40:	e785      	b.n	8006b4e <__sfvwrite_r+0xe>
 8006c42:	f04f 0a00 	mov.w	sl, #0
 8006c46:	4657      	mov	r7, sl
 8006c48:	f8df b18c 	ldr.w	fp, [pc, #396]	; 8006dd8 <__sfvwrite_r+0x298>
 8006c4c:	e7e2      	b.n	8006c14 <__sfvwrite_r+0xd4>
 8006c4e:	e9d6 5a00 	ldrd	r5, sl, [r6]
 8006c52:	3608      	adds	r6, #8
 8006c54:	f1ba 0f00 	cmp.w	sl, #0
 8006c58:	d0f9      	beq.n	8006c4e <__sfvwrite_r+0x10e>
 8006c5a:	89a2      	ldrh	r2, [r4, #12]
 8006c5c:	68a3      	ldr	r3, [r4, #8]
 8006c5e:	6820      	ldr	r0, [r4, #0]
 8006c60:	0591      	lsls	r1, r2, #22
 8006c62:	d564      	bpl.n	8006d2e <__sfvwrite_r+0x1ee>
 8006c64:	4553      	cmp	r3, sl
 8006c66:	d836      	bhi.n	8006cd6 <__sfvwrite_r+0x196>
 8006c68:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006c6c:	d033      	beq.n	8006cd6 <__sfvwrite_r+0x196>
 8006c6e:	6921      	ldr	r1, [r4, #16]
 8006c70:	6967      	ldr	r7, [r4, #20]
 8006c72:	eba0 0b01 	sub.w	fp, r0, r1
 8006c76:	2302      	movs	r3, #2
 8006c78:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8006c7c:	fb97 f7f3 	sdiv	r7, r7, r3
 8006c80:	f10b 0301 	add.w	r3, fp, #1
 8006c84:	4453      	add	r3, sl
 8006c86:	429f      	cmp	r7, r3
 8006c88:	bf38      	it	cc
 8006c8a:	461f      	movcc	r7, r3
 8006c8c:	0553      	lsls	r3, r2, #21
 8006c8e:	d53e      	bpl.n	8006d0e <__sfvwrite_r+0x1ce>
 8006c90:	4639      	mov	r1, r7
 8006c92:	4640      	mov	r0, r8
 8006c94:	f7fe fffe 	bl	8005c94 <_malloc_r>
 8006c98:	b948      	cbnz	r0, 8006cae <__sfvwrite_r+0x16e>
 8006c9a:	230c      	movs	r3, #12
 8006c9c:	f8c8 3000 	str.w	r3, [r8]
 8006ca0:	89a3      	ldrh	r3, [r4, #12]
 8006ca2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ca6:	81a3      	strh	r3, [r4, #12]
 8006ca8:	e7ae      	b.n	8006c08 <__sfvwrite_r+0xc8>
 8006caa:	46aa      	mov	sl, r5
 8006cac:	e7d2      	b.n	8006c54 <__sfvwrite_r+0x114>
 8006cae:	465a      	mov	r2, fp
 8006cb0:	6921      	ldr	r1, [r4, #16]
 8006cb2:	9001      	str	r0, [sp, #4]
 8006cb4:	f7ff fa24 	bl	8006100 <memcpy>
 8006cb8:	89a2      	ldrh	r2, [r4, #12]
 8006cba:	9b01      	ldr	r3, [sp, #4]
 8006cbc:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8006cc0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006cc4:	81a2      	strh	r2, [r4, #12]
 8006cc6:	6123      	str	r3, [r4, #16]
 8006cc8:	6167      	str	r7, [r4, #20]
 8006cca:	445b      	add	r3, fp
 8006ccc:	eba7 070b 	sub.w	r7, r7, fp
 8006cd0:	6023      	str	r3, [r4, #0]
 8006cd2:	60a7      	str	r7, [r4, #8]
 8006cd4:	4653      	mov	r3, sl
 8006cd6:	4553      	cmp	r3, sl
 8006cd8:	bf28      	it	cs
 8006cda:	4653      	movcs	r3, sl
 8006cdc:	461a      	mov	r2, r3
 8006cde:	4629      	mov	r1, r5
 8006ce0:	6820      	ldr	r0, [r4, #0]
 8006ce2:	9301      	str	r3, [sp, #4]
 8006ce4:	f000 f8bc 	bl	8006e60 <memmove>
 8006ce8:	68a2      	ldr	r2, [r4, #8]
 8006cea:	9b01      	ldr	r3, [sp, #4]
 8006cec:	1ad2      	subs	r2, r2, r3
 8006cee:	60a2      	str	r2, [r4, #8]
 8006cf0:	6822      	ldr	r2, [r4, #0]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	4657      	mov	r7, sl
 8006cf6:	6023      	str	r3, [r4, #0]
 8006cf8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8006cfc:	443d      	add	r5, r7
 8006cfe:	ebaa 0a07 	sub.w	sl, sl, r7
 8006d02:	1bdf      	subs	r7, r3, r7
 8006d04:	f8c9 7008 	str.w	r7, [r9, #8]
 8006d08:	2f00      	cmp	r7, #0
 8006d0a:	d1a3      	bne.n	8006c54 <__sfvwrite_r+0x114>
 8006d0c:	e71f      	b.n	8006b4e <__sfvwrite_r+0xe>
 8006d0e:	463a      	mov	r2, r7
 8006d10:	4640      	mov	r0, r8
 8006d12:	f000 f8d1 	bl	8006eb8 <_realloc_r>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2800      	cmp	r0, #0
 8006d1a:	d1d4      	bne.n	8006cc6 <__sfvwrite_r+0x186>
 8006d1c:	6921      	ldr	r1, [r4, #16]
 8006d1e:	4640      	mov	r0, r8
 8006d20:	f7fe fe60 	bl	80059e4 <_free_r>
 8006d24:	89a3      	ldrh	r3, [r4, #12]
 8006d26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d2a:	81a3      	strh	r3, [r4, #12]
 8006d2c:	e7b5      	b.n	8006c9a <__sfvwrite_r+0x15a>
 8006d2e:	6922      	ldr	r2, [r4, #16]
 8006d30:	4282      	cmp	r2, r0
 8006d32:	d302      	bcc.n	8006d3a <__sfvwrite_r+0x1fa>
 8006d34:	6962      	ldr	r2, [r4, #20]
 8006d36:	4552      	cmp	r2, sl
 8006d38:	d916      	bls.n	8006d68 <__sfvwrite_r+0x228>
 8006d3a:	4553      	cmp	r3, sl
 8006d3c:	bf28      	it	cs
 8006d3e:	4653      	movcs	r3, sl
 8006d40:	461a      	mov	r2, r3
 8006d42:	4629      	mov	r1, r5
 8006d44:	461f      	mov	r7, r3
 8006d46:	f000 f88b 	bl	8006e60 <memmove>
 8006d4a:	68a3      	ldr	r3, [r4, #8]
 8006d4c:	6822      	ldr	r2, [r4, #0]
 8006d4e:	1bdb      	subs	r3, r3, r7
 8006d50:	443a      	add	r2, r7
 8006d52:	60a3      	str	r3, [r4, #8]
 8006d54:	6022      	str	r2, [r4, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d1ce      	bne.n	8006cf8 <__sfvwrite_r+0x1b8>
 8006d5a:	4621      	mov	r1, r4
 8006d5c:	4640      	mov	r0, r8
 8006d5e:	f7fe fd45 	bl	80057ec <_fflush_r>
 8006d62:	2800      	cmp	r0, #0
 8006d64:	d0c8      	beq.n	8006cf8 <__sfvwrite_r+0x1b8>
 8006d66:	e79b      	b.n	8006ca0 <__sfvwrite_r+0x160>
 8006d68:	4b1a      	ldr	r3, [pc, #104]	; (8006dd4 <__sfvwrite_r+0x294>)
 8006d6a:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8006d6c:	69e1      	ldr	r1, [r4, #28]
 8006d6e:	459a      	cmp	sl, r3
 8006d70:	bf94      	ite	ls
 8006d72:	4653      	movls	r3, sl
 8006d74:	f06f 4300 	mvnhi.w	r3, #2147483648	; 0x80000000
 8006d78:	4640      	mov	r0, r8
 8006d7a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d7e:	4353      	muls	r3, r2
 8006d80:	462a      	mov	r2, r5
 8006d82:	47b8      	blx	r7
 8006d84:	1e07      	subs	r7, r0, #0
 8006d86:	dcb7      	bgt.n	8006cf8 <__sfvwrite_r+0x1b8>
 8006d88:	e78a      	b.n	8006ca0 <__sfvwrite_r+0x160>
 8006d8a:	e9d6 ab00 	ldrd	sl, fp, [r6]
 8006d8e:	2000      	movs	r0, #0
 8006d90:	3608      	adds	r6, #8
 8006d92:	e6f3      	b.n	8006b7c <__sfvwrite_r+0x3c>
 8006d94:	f10b 0701 	add.w	r7, fp, #1
 8006d98:	e700      	b.n	8006b9c <__sfvwrite_r+0x5c>
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	dc09      	bgt.n	8006db2 <__sfvwrite_r+0x272>
 8006d9e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006da0:	69e1      	ldr	r1, [r4, #28]
 8006da2:	4613      	mov	r3, r2
 8006da4:	4640      	mov	r0, r8
 8006da6:	4652      	mov	r2, sl
 8006da8:	47a8      	blx	r5
 8006daa:	1e05      	subs	r5, r0, #0
 8006dac:	f73f af12 	bgt.w	8006bd4 <__sfvwrite_r+0x94>
 8006db0:	e776      	b.n	8006ca0 <__sfvwrite_r+0x160>
 8006db2:	461a      	mov	r2, r3
 8006db4:	4651      	mov	r1, sl
 8006db6:	9301      	str	r3, [sp, #4]
 8006db8:	f000 f852 	bl	8006e60 <memmove>
 8006dbc:	9b01      	ldr	r3, [sp, #4]
 8006dbe:	68a2      	ldr	r2, [r4, #8]
 8006dc0:	1ad2      	subs	r2, r2, r3
 8006dc2:	60a2      	str	r2, [r4, #8]
 8006dc4:	6822      	ldr	r2, [r4, #0]
 8006dc6:	441a      	add	r2, r3
 8006dc8:	6022      	str	r2, [r4, #0]
 8006dca:	461d      	mov	r5, r3
 8006dcc:	e702      	b.n	8006bd4 <__sfvwrite_r+0x94>
 8006dce:	2001      	movs	r0, #1
 8006dd0:	e709      	b.n	8006be6 <__sfvwrite_r+0xa6>
 8006dd2:	bf00      	nop
 8006dd4:	7ffffffe 	.word	0x7ffffffe
 8006dd8:	7ffffc00 	.word	0x7ffffc00

08006ddc <_isatty_r>:
 8006ddc:	b538      	push	{r3, r4, r5, lr}
 8006dde:	4c06      	ldr	r4, [pc, #24]	; (8006df8 <_isatty_r+0x1c>)
 8006de0:	2300      	movs	r3, #0
 8006de2:	4605      	mov	r5, r0
 8006de4:	4608      	mov	r0, r1
 8006de6:	6023      	str	r3, [r4, #0]
 8006de8:	f7fc f97c 	bl	80030e4 <_isatty>
 8006dec:	1c43      	adds	r3, r0, #1
 8006dee:	d102      	bne.n	8006df6 <_isatty_r+0x1a>
 8006df0:	6823      	ldr	r3, [r4, #0]
 8006df2:	b103      	cbz	r3, 8006df6 <_isatty_r+0x1a>
 8006df4:	602b      	str	r3, [r5, #0]
 8006df6:	bd38      	pop	{r3, r4, r5, pc}
 8006df8:	20000f8c 	.word	0x20000f8c

08006dfc <__locale_mb_cur_max>:
 8006dfc:	4b04      	ldr	r3, [pc, #16]	; (8006e10 <__locale_mb_cur_max+0x14>)
 8006dfe:	4a05      	ldr	r2, [pc, #20]	; (8006e14 <__locale_mb_cur_max+0x18>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	bf08      	it	eq
 8006e08:	4613      	moveq	r3, r2
 8006e0a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8006e0e:	4770      	bx	lr
 8006e10:	2000000c 	.word	0x2000000c
 8006e14:	2000084c 	.word	0x2000084c

08006e18 <_lseek_r>:
 8006e18:	b538      	push	{r3, r4, r5, lr}
 8006e1a:	4c07      	ldr	r4, [pc, #28]	; (8006e38 <_lseek_r+0x20>)
 8006e1c:	4605      	mov	r5, r0
 8006e1e:	4608      	mov	r0, r1
 8006e20:	4611      	mov	r1, r2
 8006e22:	2200      	movs	r2, #0
 8006e24:	6022      	str	r2, [r4, #0]
 8006e26:	461a      	mov	r2, r3
 8006e28:	f7fc f95e 	bl	80030e8 <_lseek>
 8006e2c:	1c43      	adds	r3, r0, #1
 8006e2e:	d102      	bne.n	8006e36 <_lseek_r+0x1e>
 8006e30:	6823      	ldr	r3, [r4, #0]
 8006e32:	b103      	cbz	r3, 8006e36 <_lseek_r+0x1e>
 8006e34:	602b      	str	r3, [r5, #0]
 8006e36:	bd38      	pop	{r3, r4, r5, pc}
 8006e38:	20000f8c 	.word	0x20000f8c

08006e3c <__ascii_mbtowc>:
 8006e3c:	b082      	sub	sp, #8
 8006e3e:	b901      	cbnz	r1, 8006e42 <__ascii_mbtowc+0x6>
 8006e40:	a901      	add	r1, sp, #4
 8006e42:	b142      	cbz	r2, 8006e56 <__ascii_mbtowc+0x1a>
 8006e44:	b14b      	cbz	r3, 8006e5a <__ascii_mbtowc+0x1e>
 8006e46:	7813      	ldrb	r3, [r2, #0]
 8006e48:	600b      	str	r3, [r1, #0]
 8006e4a:	7812      	ldrb	r2, [r2, #0]
 8006e4c:	1c10      	adds	r0, r2, #0
 8006e4e:	bf18      	it	ne
 8006e50:	2001      	movne	r0, #1
 8006e52:	b002      	add	sp, #8
 8006e54:	4770      	bx	lr
 8006e56:	4610      	mov	r0, r2
 8006e58:	e7fb      	b.n	8006e52 <__ascii_mbtowc+0x16>
 8006e5a:	f06f 0001 	mvn.w	r0, #1
 8006e5e:	e7f8      	b.n	8006e52 <__ascii_mbtowc+0x16>

08006e60 <memmove>:
 8006e60:	4288      	cmp	r0, r1
 8006e62:	b510      	push	{r4, lr}
 8006e64:	eb01 0302 	add.w	r3, r1, r2
 8006e68:	d807      	bhi.n	8006e7a <memmove+0x1a>
 8006e6a:	1e42      	subs	r2, r0, #1
 8006e6c:	4299      	cmp	r1, r3
 8006e6e:	d00a      	beq.n	8006e86 <memmove+0x26>
 8006e70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e74:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006e78:	e7f8      	b.n	8006e6c <memmove+0xc>
 8006e7a:	4283      	cmp	r3, r0
 8006e7c:	d9f5      	bls.n	8006e6a <memmove+0xa>
 8006e7e:	1881      	adds	r1, r0, r2
 8006e80:	1ad2      	subs	r2, r2, r3
 8006e82:	42d3      	cmn	r3, r2
 8006e84:	d100      	bne.n	8006e88 <memmove+0x28>
 8006e86:	bd10      	pop	{r4, pc}
 8006e88:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e8c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006e90:	e7f7      	b.n	8006e82 <memmove+0x22>
	...

08006e94 <_read_r>:
 8006e94:	b538      	push	{r3, r4, r5, lr}
 8006e96:	4c07      	ldr	r4, [pc, #28]	; (8006eb4 <_read_r+0x20>)
 8006e98:	4605      	mov	r5, r0
 8006e9a:	4608      	mov	r0, r1
 8006e9c:	4611      	mov	r1, r2
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	6022      	str	r2, [r4, #0]
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	f7fc f8ea 	bl	800307c <_read>
 8006ea8:	1c43      	adds	r3, r0, #1
 8006eaa:	d102      	bne.n	8006eb2 <_read_r+0x1e>
 8006eac:	6823      	ldr	r3, [r4, #0]
 8006eae:	b103      	cbz	r3, 8006eb2 <_read_r+0x1e>
 8006eb0:	602b      	str	r3, [r5, #0]
 8006eb2:	bd38      	pop	{r3, r4, r5, pc}
 8006eb4:	20000f8c 	.word	0x20000f8c

08006eb8 <_realloc_r>:
 8006eb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ebc:	4682      	mov	sl, r0
 8006ebe:	460c      	mov	r4, r1
 8006ec0:	b929      	cbnz	r1, 8006ece <_realloc_r+0x16>
 8006ec2:	4611      	mov	r1, r2
 8006ec4:	b003      	add	sp, #12
 8006ec6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eca:	f7fe bee3 	b.w	8005c94 <_malloc_r>
 8006ece:	9201      	str	r2, [sp, #4]
 8006ed0:	f7ff f922 	bl	8006118 <__malloc_lock>
 8006ed4:	9a01      	ldr	r2, [sp, #4]
 8006ed6:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8006eda:	f102 080b 	add.w	r8, r2, #11
 8006ede:	f1b8 0f16 	cmp.w	r8, #22
 8006ee2:	f1a4 0908 	sub.w	r9, r4, #8
 8006ee6:	f025 0603 	bic.w	r6, r5, #3
 8006eea:	d90b      	bls.n	8006f04 <_realloc_r+0x4c>
 8006eec:	f038 0807 	bics.w	r8, r8, #7
 8006ef0:	d50a      	bpl.n	8006f08 <_realloc_r+0x50>
 8006ef2:	230c      	movs	r3, #12
 8006ef4:	f8ca 3000 	str.w	r3, [sl]
 8006ef8:	f04f 0b00 	mov.w	fp, #0
 8006efc:	4658      	mov	r0, fp
 8006efe:	b003      	add	sp, #12
 8006f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f04:	f04f 0810 	mov.w	r8, #16
 8006f08:	4590      	cmp	r8, r2
 8006f0a:	d3f2      	bcc.n	8006ef2 <_realloc_r+0x3a>
 8006f0c:	45b0      	cmp	r8, r6
 8006f0e:	f340 8170 	ble.w	80071f2 <_realloc_r+0x33a>
 8006f12:	49a9      	ldr	r1, [pc, #676]	; (80071b8 <_realloc_r+0x300>)
 8006f14:	9101      	str	r1, [sp, #4]
 8006f16:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8006f1a:	eb09 0306 	add.w	r3, r9, r6
 8006f1e:	459c      	cmp	ip, r3
 8006f20:	6858      	ldr	r0, [r3, #4]
 8006f22:	d005      	beq.n	8006f30 <_realloc_r+0x78>
 8006f24:	f020 0101 	bic.w	r1, r0, #1
 8006f28:	4419      	add	r1, r3
 8006f2a:	6849      	ldr	r1, [r1, #4]
 8006f2c:	07cf      	lsls	r7, r1, #31
 8006f2e:	d447      	bmi.n	8006fc0 <_realloc_r+0x108>
 8006f30:	f020 0003 	bic.w	r0, r0, #3
 8006f34:	459c      	cmp	ip, r3
 8006f36:	eb06 0700 	add.w	r7, r6, r0
 8006f3a:	d119      	bne.n	8006f70 <_realloc_r+0xb8>
 8006f3c:	f108 0110 	add.w	r1, r8, #16
 8006f40:	42b9      	cmp	r1, r7
 8006f42:	dc3f      	bgt.n	8006fc4 <_realloc_r+0x10c>
 8006f44:	eb09 0308 	add.w	r3, r9, r8
 8006f48:	9a01      	ldr	r2, [sp, #4]
 8006f4a:	eba7 0708 	sub.w	r7, r7, r8
 8006f4e:	f047 0701 	orr.w	r7, r7, #1
 8006f52:	6093      	str	r3, [r2, #8]
 8006f54:	605f      	str	r7, [r3, #4]
 8006f56:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006f5a:	f003 0301 	and.w	r3, r3, #1
 8006f5e:	ea43 0308 	orr.w	r3, r3, r8
 8006f62:	f844 3c04 	str.w	r3, [r4, #-4]
 8006f66:	4650      	mov	r0, sl
 8006f68:	f7ff f8dc 	bl	8006124 <__malloc_unlock>
 8006f6c:	46a3      	mov	fp, r4
 8006f6e:	e7c5      	b.n	8006efc <_realloc_r+0x44>
 8006f70:	45b8      	cmp	r8, r7
 8006f72:	dc27      	bgt.n	8006fc4 <_realloc_r+0x10c>
 8006f74:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8006f78:	60da      	str	r2, [r3, #12]
 8006f7a:	6093      	str	r3, [r2, #8]
 8006f7c:	eba7 0008 	sub.w	r0, r7, r8
 8006f80:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8006f84:	280f      	cmp	r0, #15
 8006f86:	f002 0201 	and.w	r2, r2, #1
 8006f8a:	eb09 0307 	add.w	r3, r9, r7
 8006f8e:	f240 8132 	bls.w	80071f6 <_realloc_r+0x33e>
 8006f92:	eb09 0108 	add.w	r1, r9, r8
 8006f96:	ea48 0202 	orr.w	r2, r8, r2
 8006f9a:	f040 0001 	orr.w	r0, r0, #1
 8006f9e:	f8c9 2004 	str.w	r2, [r9, #4]
 8006fa2:	6048      	str	r0, [r1, #4]
 8006fa4:	685a      	ldr	r2, [r3, #4]
 8006fa6:	f042 0201 	orr.w	r2, r2, #1
 8006faa:	605a      	str	r2, [r3, #4]
 8006fac:	3108      	adds	r1, #8
 8006fae:	4650      	mov	r0, sl
 8006fb0:	f7fe fd18 	bl	80059e4 <_free_r>
 8006fb4:	4650      	mov	r0, sl
 8006fb6:	f7ff f8b5 	bl	8006124 <__malloc_unlock>
 8006fba:	f109 0b08 	add.w	fp, r9, #8
 8006fbe:	e79d      	b.n	8006efc <_realloc_r+0x44>
 8006fc0:	2000      	movs	r0, #0
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	07e9      	lsls	r1, r5, #31
 8006fc6:	f100 80c6 	bmi.w	8007156 <_realloc_r+0x29e>
 8006fca:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8006fce:	eba9 0505 	sub.w	r5, r9, r5
 8006fd2:	6869      	ldr	r1, [r5, #4]
 8006fd4:	f021 0103 	bic.w	r1, r1, #3
 8006fd8:	eb01 0b06 	add.w	fp, r1, r6
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	f000 8086 	beq.w	80070ee <_realloc_r+0x236>
 8006fe2:	459c      	cmp	ip, r3
 8006fe4:	eb00 070b 	add.w	r7, r0, fp
 8006fe8:	d149      	bne.n	800707e <_realloc_r+0x1c6>
 8006fea:	f108 0310 	add.w	r3, r8, #16
 8006fee:	42bb      	cmp	r3, r7
 8006ff0:	dc7d      	bgt.n	80070ee <_realloc_r+0x236>
 8006ff2:	46ab      	mov	fp, r5
 8006ff4:	68eb      	ldr	r3, [r5, #12]
 8006ff6:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 8006ffa:	60d3      	str	r3, [r2, #12]
 8006ffc:	609a      	str	r2, [r3, #8]
 8006ffe:	1f32      	subs	r2, r6, #4
 8007000:	2a24      	cmp	r2, #36	; 0x24
 8007002:	d837      	bhi.n	8007074 <_realloc_r+0x1bc>
 8007004:	2a13      	cmp	r2, #19
 8007006:	d933      	bls.n	8007070 <_realloc_r+0x1b8>
 8007008:	6823      	ldr	r3, [r4, #0]
 800700a:	60ab      	str	r3, [r5, #8]
 800700c:	6863      	ldr	r3, [r4, #4]
 800700e:	60eb      	str	r3, [r5, #12]
 8007010:	2a1b      	cmp	r2, #27
 8007012:	d81b      	bhi.n	800704c <_realloc_r+0x194>
 8007014:	3408      	adds	r4, #8
 8007016:	f105 0310 	add.w	r3, r5, #16
 800701a:	6822      	ldr	r2, [r4, #0]
 800701c:	601a      	str	r2, [r3, #0]
 800701e:	6862      	ldr	r2, [r4, #4]
 8007020:	605a      	str	r2, [r3, #4]
 8007022:	68a2      	ldr	r2, [r4, #8]
 8007024:	609a      	str	r2, [r3, #8]
 8007026:	eb05 0308 	add.w	r3, r5, r8
 800702a:	9a01      	ldr	r2, [sp, #4]
 800702c:	eba7 0708 	sub.w	r7, r7, r8
 8007030:	f047 0701 	orr.w	r7, r7, #1
 8007034:	6093      	str	r3, [r2, #8]
 8007036:	605f      	str	r7, [r3, #4]
 8007038:	686b      	ldr	r3, [r5, #4]
 800703a:	f003 0301 	and.w	r3, r3, #1
 800703e:	ea43 0308 	orr.w	r3, r3, r8
 8007042:	606b      	str	r3, [r5, #4]
 8007044:	4650      	mov	r0, sl
 8007046:	f7ff f86d 	bl	8006124 <__malloc_unlock>
 800704a:	e757      	b.n	8006efc <_realloc_r+0x44>
 800704c:	68a3      	ldr	r3, [r4, #8]
 800704e:	612b      	str	r3, [r5, #16]
 8007050:	68e3      	ldr	r3, [r4, #12]
 8007052:	616b      	str	r3, [r5, #20]
 8007054:	2a24      	cmp	r2, #36	; 0x24
 8007056:	bf01      	itttt	eq
 8007058:	6923      	ldreq	r3, [r4, #16]
 800705a:	61ab      	streq	r3, [r5, #24]
 800705c:	6962      	ldreq	r2, [r4, #20]
 800705e:	61ea      	streq	r2, [r5, #28]
 8007060:	bf19      	ittee	ne
 8007062:	3410      	addne	r4, #16
 8007064:	f105 0318 	addne.w	r3, r5, #24
 8007068:	f105 0320 	addeq.w	r3, r5, #32
 800706c:	3418      	addeq	r4, #24
 800706e:	e7d4      	b.n	800701a <_realloc_r+0x162>
 8007070:	465b      	mov	r3, fp
 8007072:	e7d2      	b.n	800701a <_realloc_r+0x162>
 8007074:	4621      	mov	r1, r4
 8007076:	4658      	mov	r0, fp
 8007078:	f7ff fef2 	bl	8006e60 <memmove>
 800707c:	e7d3      	b.n	8007026 <_realloc_r+0x16e>
 800707e:	45b8      	cmp	r8, r7
 8007080:	dc35      	bgt.n	80070ee <_realloc_r+0x236>
 8007082:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8007086:	4628      	mov	r0, r5
 8007088:	60da      	str	r2, [r3, #12]
 800708a:	6093      	str	r3, [r2, #8]
 800708c:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8007090:	68eb      	ldr	r3, [r5, #12]
 8007092:	60d3      	str	r3, [r2, #12]
 8007094:	609a      	str	r2, [r3, #8]
 8007096:	1f32      	subs	r2, r6, #4
 8007098:	2a24      	cmp	r2, #36	; 0x24
 800709a:	d824      	bhi.n	80070e6 <_realloc_r+0x22e>
 800709c:	2a13      	cmp	r2, #19
 800709e:	d908      	bls.n	80070b2 <_realloc_r+0x1fa>
 80070a0:	6823      	ldr	r3, [r4, #0]
 80070a2:	60ab      	str	r3, [r5, #8]
 80070a4:	6863      	ldr	r3, [r4, #4]
 80070a6:	60eb      	str	r3, [r5, #12]
 80070a8:	2a1b      	cmp	r2, #27
 80070aa:	d80a      	bhi.n	80070c2 <_realloc_r+0x20a>
 80070ac:	3408      	adds	r4, #8
 80070ae:	f105 0010 	add.w	r0, r5, #16
 80070b2:	6823      	ldr	r3, [r4, #0]
 80070b4:	6003      	str	r3, [r0, #0]
 80070b6:	6863      	ldr	r3, [r4, #4]
 80070b8:	6043      	str	r3, [r0, #4]
 80070ba:	68a3      	ldr	r3, [r4, #8]
 80070bc:	6083      	str	r3, [r0, #8]
 80070be:	46a9      	mov	r9, r5
 80070c0:	e75c      	b.n	8006f7c <_realloc_r+0xc4>
 80070c2:	68a3      	ldr	r3, [r4, #8]
 80070c4:	612b      	str	r3, [r5, #16]
 80070c6:	68e3      	ldr	r3, [r4, #12]
 80070c8:	616b      	str	r3, [r5, #20]
 80070ca:	2a24      	cmp	r2, #36	; 0x24
 80070cc:	bf01      	itttt	eq
 80070ce:	6923      	ldreq	r3, [r4, #16]
 80070d0:	61ab      	streq	r3, [r5, #24]
 80070d2:	6963      	ldreq	r3, [r4, #20]
 80070d4:	61eb      	streq	r3, [r5, #28]
 80070d6:	bf19      	ittee	ne
 80070d8:	3410      	addne	r4, #16
 80070da:	f105 0018 	addne.w	r0, r5, #24
 80070de:	f105 0020 	addeq.w	r0, r5, #32
 80070e2:	3418      	addeq	r4, #24
 80070e4:	e7e5      	b.n	80070b2 <_realloc_r+0x1fa>
 80070e6:	4621      	mov	r1, r4
 80070e8:	f7ff feba 	bl	8006e60 <memmove>
 80070ec:	e7e7      	b.n	80070be <_realloc_r+0x206>
 80070ee:	45d8      	cmp	r8, fp
 80070f0:	dc31      	bgt.n	8007156 <_realloc_r+0x29e>
 80070f2:	4628      	mov	r0, r5
 80070f4:	68eb      	ldr	r3, [r5, #12]
 80070f6:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80070fa:	60d3      	str	r3, [r2, #12]
 80070fc:	609a      	str	r2, [r3, #8]
 80070fe:	1f32      	subs	r2, r6, #4
 8007100:	2a24      	cmp	r2, #36	; 0x24
 8007102:	d824      	bhi.n	800714e <_realloc_r+0x296>
 8007104:	2a13      	cmp	r2, #19
 8007106:	d908      	bls.n	800711a <_realloc_r+0x262>
 8007108:	6823      	ldr	r3, [r4, #0]
 800710a:	60ab      	str	r3, [r5, #8]
 800710c:	6863      	ldr	r3, [r4, #4]
 800710e:	60eb      	str	r3, [r5, #12]
 8007110:	2a1b      	cmp	r2, #27
 8007112:	d80a      	bhi.n	800712a <_realloc_r+0x272>
 8007114:	3408      	adds	r4, #8
 8007116:	f105 0010 	add.w	r0, r5, #16
 800711a:	6823      	ldr	r3, [r4, #0]
 800711c:	6003      	str	r3, [r0, #0]
 800711e:	6863      	ldr	r3, [r4, #4]
 8007120:	6043      	str	r3, [r0, #4]
 8007122:	68a3      	ldr	r3, [r4, #8]
 8007124:	6083      	str	r3, [r0, #8]
 8007126:	465f      	mov	r7, fp
 8007128:	e7c9      	b.n	80070be <_realloc_r+0x206>
 800712a:	68a3      	ldr	r3, [r4, #8]
 800712c:	612b      	str	r3, [r5, #16]
 800712e:	68e3      	ldr	r3, [r4, #12]
 8007130:	616b      	str	r3, [r5, #20]
 8007132:	2a24      	cmp	r2, #36	; 0x24
 8007134:	bf01      	itttt	eq
 8007136:	6923      	ldreq	r3, [r4, #16]
 8007138:	61ab      	streq	r3, [r5, #24]
 800713a:	6963      	ldreq	r3, [r4, #20]
 800713c:	61eb      	streq	r3, [r5, #28]
 800713e:	bf19      	ittee	ne
 8007140:	3410      	addne	r4, #16
 8007142:	f105 0018 	addne.w	r0, r5, #24
 8007146:	f105 0020 	addeq.w	r0, r5, #32
 800714a:	3418      	addeq	r4, #24
 800714c:	e7e5      	b.n	800711a <_realloc_r+0x262>
 800714e:	4621      	mov	r1, r4
 8007150:	f7ff fe86 	bl	8006e60 <memmove>
 8007154:	e7e7      	b.n	8007126 <_realloc_r+0x26e>
 8007156:	4611      	mov	r1, r2
 8007158:	4650      	mov	r0, sl
 800715a:	f7fe fd9b 	bl	8005c94 <_malloc_r>
 800715e:	4683      	mov	fp, r0
 8007160:	2800      	cmp	r0, #0
 8007162:	f43f af6f 	beq.w	8007044 <_realloc_r+0x18c>
 8007166:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800716a:	f023 0301 	bic.w	r3, r3, #1
 800716e:	444b      	add	r3, r9
 8007170:	f1a0 0208 	sub.w	r2, r0, #8
 8007174:	4293      	cmp	r3, r2
 8007176:	d105      	bne.n	8007184 <_realloc_r+0x2cc>
 8007178:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800717c:	f027 0703 	bic.w	r7, r7, #3
 8007180:	4437      	add	r7, r6
 8007182:	e6fb      	b.n	8006f7c <_realloc_r+0xc4>
 8007184:	1f32      	subs	r2, r6, #4
 8007186:	2a24      	cmp	r2, #36	; 0x24
 8007188:	d82f      	bhi.n	80071ea <_realloc_r+0x332>
 800718a:	2a13      	cmp	r2, #19
 800718c:	d92a      	bls.n	80071e4 <_realloc_r+0x32c>
 800718e:	6823      	ldr	r3, [r4, #0]
 8007190:	6003      	str	r3, [r0, #0]
 8007192:	6863      	ldr	r3, [r4, #4]
 8007194:	6043      	str	r3, [r0, #4]
 8007196:	2a1b      	cmp	r2, #27
 8007198:	d810      	bhi.n	80071bc <_realloc_r+0x304>
 800719a:	f104 0208 	add.w	r2, r4, #8
 800719e:	f100 0308 	add.w	r3, r0, #8
 80071a2:	6811      	ldr	r1, [r2, #0]
 80071a4:	6019      	str	r1, [r3, #0]
 80071a6:	6851      	ldr	r1, [r2, #4]
 80071a8:	6059      	str	r1, [r3, #4]
 80071aa:	6892      	ldr	r2, [r2, #8]
 80071ac:	609a      	str	r2, [r3, #8]
 80071ae:	4621      	mov	r1, r4
 80071b0:	4650      	mov	r0, sl
 80071b2:	f7fe fc17 	bl	80059e4 <_free_r>
 80071b6:	e745      	b.n	8007044 <_realloc_r+0x18c>
 80071b8:	2000043c 	.word	0x2000043c
 80071bc:	68a3      	ldr	r3, [r4, #8]
 80071be:	6083      	str	r3, [r0, #8]
 80071c0:	68e3      	ldr	r3, [r4, #12]
 80071c2:	60c3      	str	r3, [r0, #12]
 80071c4:	2a24      	cmp	r2, #36	; 0x24
 80071c6:	bf01      	itttt	eq
 80071c8:	6923      	ldreq	r3, [r4, #16]
 80071ca:	6103      	streq	r3, [r0, #16]
 80071cc:	6961      	ldreq	r1, [r4, #20]
 80071ce:	6141      	streq	r1, [r0, #20]
 80071d0:	bf19      	ittee	ne
 80071d2:	f104 0210 	addne.w	r2, r4, #16
 80071d6:	f100 0310 	addne.w	r3, r0, #16
 80071da:	f104 0218 	addeq.w	r2, r4, #24
 80071de:	f100 0318 	addeq.w	r3, r0, #24
 80071e2:	e7de      	b.n	80071a2 <_realloc_r+0x2ea>
 80071e4:	4603      	mov	r3, r0
 80071e6:	4622      	mov	r2, r4
 80071e8:	e7db      	b.n	80071a2 <_realloc_r+0x2ea>
 80071ea:	4621      	mov	r1, r4
 80071ec:	f7ff fe38 	bl	8006e60 <memmove>
 80071f0:	e7dd      	b.n	80071ae <_realloc_r+0x2f6>
 80071f2:	4637      	mov	r7, r6
 80071f4:	e6c2      	b.n	8006f7c <_realloc_r+0xc4>
 80071f6:	4317      	orrs	r7, r2
 80071f8:	f8c9 7004 	str.w	r7, [r9, #4]
 80071fc:	685a      	ldr	r2, [r3, #4]
 80071fe:	f042 0201 	orr.w	r2, r2, #1
 8007202:	605a      	str	r2, [r3, #4]
 8007204:	e6d6      	b.n	8006fb4 <_realloc_r+0xfc>
 8007206:	bf00      	nop

08007208 <__swbuf_r>:
 8007208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800720a:	460d      	mov	r5, r1
 800720c:	4614      	mov	r4, r2
 800720e:	4606      	mov	r6, r0
 8007210:	b118      	cbz	r0, 800721a <__swbuf_r+0x12>
 8007212:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007214:	b90b      	cbnz	r3, 800721a <__swbuf_r+0x12>
 8007216:	f7fe fb55 	bl	80058c4 <__sinit>
 800721a:	69a3      	ldr	r3, [r4, #24]
 800721c:	60a3      	str	r3, [r4, #8]
 800721e:	89a3      	ldrh	r3, [r4, #12]
 8007220:	0719      	lsls	r1, r3, #28
 8007222:	d528      	bpl.n	8007276 <__swbuf_r+0x6e>
 8007224:	6923      	ldr	r3, [r4, #16]
 8007226:	b333      	cbz	r3, 8007276 <__swbuf_r+0x6e>
 8007228:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800722c:	b2ed      	uxtb	r5, r5
 800722e:	049a      	lsls	r2, r3, #18
 8007230:	462f      	mov	r7, r5
 8007232:	d52a      	bpl.n	800728a <__swbuf_r+0x82>
 8007234:	6923      	ldr	r3, [r4, #16]
 8007236:	6820      	ldr	r0, [r4, #0]
 8007238:	1ac0      	subs	r0, r0, r3
 800723a:	6963      	ldr	r3, [r4, #20]
 800723c:	4283      	cmp	r3, r0
 800723e:	dc04      	bgt.n	800724a <__swbuf_r+0x42>
 8007240:	4621      	mov	r1, r4
 8007242:	4630      	mov	r0, r6
 8007244:	f7fe fad2 	bl	80057ec <_fflush_r>
 8007248:	b9d8      	cbnz	r0, 8007282 <__swbuf_r+0x7a>
 800724a:	68a3      	ldr	r3, [r4, #8]
 800724c:	3b01      	subs	r3, #1
 800724e:	60a3      	str	r3, [r4, #8]
 8007250:	6823      	ldr	r3, [r4, #0]
 8007252:	1c5a      	adds	r2, r3, #1
 8007254:	6022      	str	r2, [r4, #0]
 8007256:	701d      	strb	r5, [r3, #0]
 8007258:	6963      	ldr	r3, [r4, #20]
 800725a:	3001      	adds	r0, #1
 800725c:	4283      	cmp	r3, r0
 800725e:	d004      	beq.n	800726a <__swbuf_r+0x62>
 8007260:	89a3      	ldrh	r3, [r4, #12]
 8007262:	07db      	lsls	r3, r3, #31
 8007264:	d50f      	bpl.n	8007286 <__swbuf_r+0x7e>
 8007266:	2d0a      	cmp	r5, #10
 8007268:	d10d      	bne.n	8007286 <__swbuf_r+0x7e>
 800726a:	4621      	mov	r1, r4
 800726c:	4630      	mov	r0, r6
 800726e:	f7fe fabd 	bl	80057ec <_fflush_r>
 8007272:	b140      	cbz	r0, 8007286 <__swbuf_r+0x7e>
 8007274:	e005      	b.n	8007282 <__swbuf_r+0x7a>
 8007276:	4621      	mov	r1, r4
 8007278:	4630      	mov	r0, r6
 800727a:	f7fd fb8b 	bl	8004994 <__swsetup_r>
 800727e:	2800      	cmp	r0, #0
 8007280:	d0d2      	beq.n	8007228 <__swbuf_r+0x20>
 8007282:	f04f 37ff 	mov.w	r7, #4294967295
 8007286:	4638      	mov	r0, r7
 8007288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800728a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800728e:	81a3      	strh	r3, [r4, #12]
 8007290:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007292:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007296:	6663      	str	r3, [r4, #100]	; 0x64
 8007298:	e7cc      	b.n	8007234 <__swbuf_r+0x2c>
	...

0800729c <_wcrtomb_r>:
 800729c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800729e:	4c0f      	ldr	r4, [pc, #60]	; (80072dc <_wcrtomb_r+0x40>)
 80072a0:	6824      	ldr	r4, [r4, #0]
 80072a2:	b085      	sub	sp, #20
 80072a4:	4605      	mov	r5, r0
 80072a6:	461e      	mov	r6, r3
 80072a8:	6b64      	ldr	r4, [r4, #52]	; 0x34
 80072aa:	b981      	cbnz	r1, 80072ce <_wcrtomb_r+0x32>
 80072ac:	4a0c      	ldr	r2, [pc, #48]	; (80072e0 <_wcrtomb_r+0x44>)
 80072ae:	2c00      	cmp	r4, #0
 80072b0:	bf08      	it	eq
 80072b2:	4614      	moveq	r4, r2
 80072b4:	460a      	mov	r2, r1
 80072b6:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 80072ba:	a901      	add	r1, sp, #4
 80072bc:	47a0      	blx	r4
 80072be:	1c43      	adds	r3, r0, #1
 80072c0:	bf01      	itttt	eq
 80072c2:	2300      	moveq	r3, #0
 80072c4:	6033      	streq	r3, [r6, #0]
 80072c6:	238a      	moveq	r3, #138	; 0x8a
 80072c8:	602b      	streq	r3, [r5, #0]
 80072ca:	b005      	add	sp, #20
 80072cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072ce:	4f04      	ldr	r7, [pc, #16]	; (80072e0 <_wcrtomb_r+0x44>)
 80072d0:	2c00      	cmp	r4, #0
 80072d2:	bf08      	it	eq
 80072d4:	463c      	moveq	r4, r7
 80072d6:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 80072da:	e7ef      	b.n	80072bc <_wcrtomb_r+0x20>
 80072dc:	2000000c 	.word	0x2000000c
 80072e0:	2000084c 	.word	0x2000084c

080072e4 <__ascii_wctomb>:
 80072e4:	b149      	cbz	r1, 80072fa <__ascii_wctomb+0x16>
 80072e6:	2aff      	cmp	r2, #255	; 0xff
 80072e8:	bf85      	ittet	hi
 80072ea:	238a      	movhi	r3, #138	; 0x8a
 80072ec:	6003      	strhi	r3, [r0, #0]
 80072ee:	700a      	strbls	r2, [r1, #0]
 80072f0:	f04f 30ff 	movhi.w	r0, #4294967295
 80072f4:	bf98      	it	ls
 80072f6:	2001      	movls	r0, #1
 80072f8:	4770      	bx	lr
 80072fa:	4608      	mov	r0, r1
 80072fc:	4770      	bx	lr
	...

08007300 <sin>:
 8007300:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007302:	ec51 0b10 	vmov	r0, r1, d0
 8007306:	4a20      	ldr	r2, [pc, #128]	; (8007388 <sin+0x88>)
 8007308:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800730c:	4293      	cmp	r3, r2
 800730e:	dc07      	bgt.n	8007320 <sin+0x20>
 8007310:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8007380 <sin+0x80>
 8007314:	2000      	movs	r0, #0
 8007316:	f000 fe37 	bl	8007f88 <__kernel_sin>
 800731a:	ec51 0b10 	vmov	r0, r1, d0
 800731e:	e007      	b.n	8007330 <sin+0x30>
 8007320:	4a1a      	ldr	r2, [pc, #104]	; (800738c <sin+0x8c>)
 8007322:	4293      	cmp	r3, r2
 8007324:	dd09      	ble.n	800733a <sin+0x3a>
 8007326:	ee10 2a10 	vmov	r2, s0
 800732a:	460b      	mov	r3, r1
 800732c:	f7f8 ffcc 	bl	80002c8 <__aeabi_dsub>
 8007330:	ec41 0b10 	vmov	d0, r0, r1
 8007334:	b005      	add	sp, #20
 8007336:	f85d fb04 	ldr.w	pc, [sp], #4
 800733a:	4668      	mov	r0, sp
 800733c:	f000 f828 	bl	8007390 <__ieee754_rem_pio2>
 8007340:	f000 0003 	and.w	r0, r0, #3
 8007344:	2801      	cmp	r0, #1
 8007346:	ed9d 1b02 	vldr	d1, [sp, #8]
 800734a:	ed9d 0b00 	vldr	d0, [sp]
 800734e:	d004      	beq.n	800735a <sin+0x5a>
 8007350:	2802      	cmp	r0, #2
 8007352:	d005      	beq.n	8007360 <sin+0x60>
 8007354:	b970      	cbnz	r0, 8007374 <sin+0x74>
 8007356:	2001      	movs	r0, #1
 8007358:	e7dd      	b.n	8007316 <sin+0x16>
 800735a:	f000 fa0d 	bl	8007778 <__kernel_cos>
 800735e:	e7dc      	b.n	800731a <sin+0x1a>
 8007360:	2001      	movs	r0, #1
 8007362:	f000 fe11 	bl	8007f88 <__kernel_sin>
 8007366:	ec53 2b10 	vmov	r2, r3, d0
 800736a:	ee10 0a10 	vmov	r0, s0
 800736e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007372:	e7dd      	b.n	8007330 <sin+0x30>
 8007374:	f000 fa00 	bl	8007778 <__kernel_cos>
 8007378:	e7f5      	b.n	8007366 <sin+0x66>
 800737a:	bf00      	nop
 800737c:	f3af 8000 	nop.w
	...
 8007388:	3fe921fb 	.word	0x3fe921fb
 800738c:	7fefffff 	.word	0x7fefffff

08007390 <__ieee754_rem_pio2>:
 8007390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007394:	ec57 6b10 	vmov	r6, r7, d0
 8007398:	4bc3      	ldr	r3, [pc, #780]	; (80076a8 <__ieee754_rem_pio2+0x318>)
 800739a:	b08d      	sub	sp, #52	; 0x34
 800739c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80073a0:	4598      	cmp	r8, r3
 80073a2:	4604      	mov	r4, r0
 80073a4:	9704      	str	r7, [sp, #16]
 80073a6:	dc07      	bgt.n	80073b8 <__ieee754_rem_pio2+0x28>
 80073a8:	2200      	movs	r2, #0
 80073aa:	2300      	movs	r3, #0
 80073ac:	ed84 0b00 	vstr	d0, [r4]
 80073b0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80073b4:	2500      	movs	r5, #0
 80073b6:	e027      	b.n	8007408 <__ieee754_rem_pio2+0x78>
 80073b8:	4bbc      	ldr	r3, [pc, #752]	; (80076ac <__ieee754_rem_pio2+0x31c>)
 80073ba:	4598      	cmp	r8, r3
 80073bc:	dc75      	bgt.n	80074aa <__ieee754_rem_pio2+0x11a>
 80073be:	9b04      	ldr	r3, [sp, #16]
 80073c0:	4dbb      	ldr	r5, [pc, #748]	; (80076b0 <__ieee754_rem_pio2+0x320>)
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	ee10 0a10 	vmov	r0, s0
 80073c8:	a3a9      	add	r3, pc, #676	; (adr r3, 8007670 <__ieee754_rem_pio2+0x2e0>)
 80073ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ce:	4639      	mov	r1, r7
 80073d0:	dd36      	ble.n	8007440 <__ieee754_rem_pio2+0xb0>
 80073d2:	f7f8 ff79 	bl	80002c8 <__aeabi_dsub>
 80073d6:	45a8      	cmp	r8, r5
 80073d8:	4606      	mov	r6, r0
 80073da:	460f      	mov	r7, r1
 80073dc:	d018      	beq.n	8007410 <__ieee754_rem_pio2+0x80>
 80073de:	a3a6      	add	r3, pc, #664	; (adr r3, 8007678 <__ieee754_rem_pio2+0x2e8>)
 80073e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e4:	f7f8 ff70 	bl	80002c8 <__aeabi_dsub>
 80073e8:	4602      	mov	r2, r0
 80073ea:	460b      	mov	r3, r1
 80073ec:	e9c4 2300 	strd	r2, r3, [r4]
 80073f0:	4630      	mov	r0, r6
 80073f2:	4639      	mov	r1, r7
 80073f4:	f7f8 ff68 	bl	80002c8 <__aeabi_dsub>
 80073f8:	a39f      	add	r3, pc, #636	; (adr r3, 8007678 <__ieee754_rem_pio2+0x2e8>)
 80073fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073fe:	f7f8 ff63 	bl	80002c8 <__aeabi_dsub>
 8007402:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007406:	2501      	movs	r5, #1
 8007408:	4628      	mov	r0, r5
 800740a:	b00d      	add	sp, #52	; 0x34
 800740c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007410:	a39b      	add	r3, pc, #620	; (adr r3, 8007680 <__ieee754_rem_pio2+0x2f0>)
 8007412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007416:	f7f8 ff57 	bl	80002c8 <__aeabi_dsub>
 800741a:	a39b      	add	r3, pc, #620	; (adr r3, 8007688 <__ieee754_rem_pio2+0x2f8>)
 800741c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007420:	4606      	mov	r6, r0
 8007422:	460f      	mov	r7, r1
 8007424:	f7f8 ff50 	bl	80002c8 <__aeabi_dsub>
 8007428:	4602      	mov	r2, r0
 800742a:	460b      	mov	r3, r1
 800742c:	e9c4 2300 	strd	r2, r3, [r4]
 8007430:	4630      	mov	r0, r6
 8007432:	4639      	mov	r1, r7
 8007434:	f7f8 ff48 	bl	80002c8 <__aeabi_dsub>
 8007438:	a393      	add	r3, pc, #588	; (adr r3, 8007688 <__ieee754_rem_pio2+0x2f8>)
 800743a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743e:	e7de      	b.n	80073fe <__ieee754_rem_pio2+0x6e>
 8007440:	f7f8 ff44 	bl	80002cc <__adddf3>
 8007444:	45a8      	cmp	r8, r5
 8007446:	4606      	mov	r6, r0
 8007448:	460f      	mov	r7, r1
 800744a:	d016      	beq.n	800747a <__ieee754_rem_pio2+0xea>
 800744c:	a38a      	add	r3, pc, #552	; (adr r3, 8007678 <__ieee754_rem_pio2+0x2e8>)
 800744e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007452:	f7f8 ff3b 	bl	80002cc <__adddf3>
 8007456:	4602      	mov	r2, r0
 8007458:	460b      	mov	r3, r1
 800745a:	e9c4 2300 	strd	r2, r3, [r4]
 800745e:	4630      	mov	r0, r6
 8007460:	4639      	mov	r1, r7
 8007462:	f7f8 ff31 	bl	80002c8 <__aeabi_dsub>
 8007466:	a384      	add	r3, pc, #528	; (adr r3, 8007678 <__ieee754_rem_pio2+0x2e8>)
 8007468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800746c:	f7f8 ff2e 	bl	80002cc <__adddf3>
 8007470:	f04f 35ff 	mov.w	r5, #4294967295
 8007474:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007478:	e7c6      	b.n	8007408 <__ieee754_rem_pio2+0x78>
 800747a:	a381      	add	r3, pc, #516	; (adr r3, 8007680 <__ieee754_rem_pio2+0x2f0>)
 800747c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007480:	f7f8 ff24 	bl	80002cc <__adddf3>
 8007484:	a380      	add	r3, pc, #512	; (adr r3, 8007688 <__ieee754_rem_pio2+0x2f8>)
 8007486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800748a:	4606      	mov	r6, r0
 800748c:	460f      	mov	r7, r1
 800748e:	f7f8 ff1d 	bl	80002cc <__adddf3>
 8007492:	4602      	mov	r2, r0
 8007494:	460b      	mov	r3, r1
 8007496:	e9c4 2300 	strd	r2, r3, [r4]
 800749a:	4630      	mov	r0, r6
 800749c:	4639      	mov	r1, r7
 800749e:	f7f8 ff13 	bl	80002c8 <__aeabi_dsub>
 80074a2:	a379      	add	r3, pc, #484	; (adr r3, 8007688 <__ieee754_rem_pio2+0x2f8>)
 80074a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a8:	e7e0      	b.n	800746c <__ieee754_rem_pio2+0xdc>
 80074aa:	4b82      	ldr	r3, [pc, #520]	; (80076b4 <__ieee754_rem_pio2+0x324>)
 80074ac:	4598      	cmp	r8, r3
 80074ae:	f300 80d0 	bgt.w	8007652 <__ieee754_rem_pio2+0x2c2>
 80074b2:	f000 fe23 	bl	80080fc <fabs>
 80074b6:	ec57 6b10 	vmov	r6, r7, d0
 80074ba:	ee10 0a10 	vmov	r0, s0
 80074be:	a374      	add	r3, pc, #464	; (adr r3, 8007690 <__ieee754_rem_pio2+0x300>)
 80074c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c4:	4639      	mov	r1, r7
 80074c6:	f7f9 f8b7 	bl	8000638 <__aeabi_dmul>
 80074ca:	2200      	movs	r2, #0
 80074cc:	4b7a      	ldr	r3, [pc, #488]	; (80076b8 <__ieee754_rem_pio2+0x328>)
 80074ce:	f7f8 fefd 	bl	80002cc <__adddf3>
 80074d2:	f7f9 fb61 	bl	8000b98 <__aeabi_d2iz>
 80074d6:	4605      	mov	r5, r0
 80074d8:	f7f9 f844 	bl	8000564 <__aeabi_i2d>
 80074dc:	a364      	add	r3, pc, #400	; (adr r3, 8007670 <__ieee754_rem_pio2+0x2e0>)
 80074de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074e6:	f7f9 f8a7 	bl	8000638 <__aeabi_dmul>
 80074ea:	4602      	mov	r2, r0
 80074ec:	460b      	mov	r3, r1
 80074ee:	4630      	mov	r0, r6
 80074f0:	4639      	mov	r1, r7
 80074f2:	f7f8 fee9 	bl	80002c8 <__aeabi_dsub>
 80074f6:	a360      	add	r3, pc, #384	; (adr r3, 8007678 <__ieee754_rem_pio2+0x2e8>)
 80074f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074fc:	4682      	mov	sl, r0
 80074fe:	468b      	mov	fp, r1
 8007500:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007504:	f7f9 f898 	bl	8000638 <__aeabi_dmul>
 8007508:	2d1f      	cmp	r5, #31
 800750a:	4606      	mov	r6, r0
 800750c:	460f      	mov	r7, r1
 800750e:	dc0c      	bgt.n	800752a <__ieee754_rem_pio2+0x19a>
 8007510:	1e6a      	subs	r2, r5, #1
 8007512:	4b6a      	ldr	r3, [pc, #424]	; (80076bc <__ieee754_rem_pio2+0x32c>)
 8007514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007518:	4543      	cmp	r3, r8
 800751a:	d006      	beq.n	800752a <__ieee754_rem_pio2+0x19a>
 800751c:	4632      	mov	r2, r6
 800751e:	463b      	mov	r3, r7
 8007520:	4650      	mov	r0, sl
 8007522:	4659      	mov	r1, fp
 8007524:	f7f8 fed0 	bl	80002c8 <__aeabi_dsub>
 8007528:	e00e      	b.n	8007548 <__ieee754_rem_pio2+0x1b8>
 800752a:	4632      	mov	r2, r6
 800752c:	463b      	mov	r3, r7
 800752e:	4650      	mov	r0, sl
 8007530:	4659      	mov	r1, fp
 8007532:	f7f8 fec9 	bl	80002c8 <__aeabi_dsub>
 8007536:	ea4f 5328 	mov.w	r3, r8, asr #20
 800753a:	9305      	str	r3, [sp, #20]
 800753c:	9a05      	ldr	r2, [sp, #20]
 800753e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007542:	1ad3      	subs	r3, r2, r3
 8007544:	2b10      	cmp	r3, #16
 8007546:	dc02      	bgt.n	800754e <__ieee754_rem_pio2+0x1be>
 8007548:	e9c4 0100 	strd	r0, r1, [r4]
 800754c:	e039      	b.n	80075c2 <__ieee754_rem_pio2+0x232>
 800754e:	a34c      	add	r3, pc, #304	; (adr r3, 8007680 <__ieee754_rem_pio2+0x2f0>)
 8007550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007554:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007558:	f7f9 f86e 	bl	8000638 <__aeabi_dmul>
 800755c:	4606      	mov	r6, r0
 800755e:	460f      	mov	r7, r1
 8007560:	4602      	mov	r2, r0
 8007562:	460b      	mov	r3, r1
 8007564:	4650      	mov	r0, sl
 8007566:	4659      	mov	r1, fp
 8007568:	f7f8 feae 	bl	80002c8 <__aeabi_dsub>
 800756c:	4602      	mov	r2, r0
 800756e:	460b      	mov	r3, r1
 8007570:	4680      	mov	r8, r0
 8007572:	4689      	mov	r9, r1
 8007574:	4650      	mov	r0, sl
 8007576:	4659      	mov	r1, fp
 8007578:	f7f8 fea6 	bl	80002c8 <__aeabi_dsub>
 800757c:	4632      	mov	r2, r6
 800757e:	463b      	mov	r3, r7
 8007580:	f7f8 fea2 	bl	80002c8 <__aeabi_dsub>
 8007584:	a340      	add	r3, pc, #256	; (adr r3, 8007688 <__ieee754_rem_pio2+0x2f8>)
 8007586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800758a:	4606      	mov	r6, r0
 800758c:	460f      	mov	r7, r1
 800758e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007592:	f7f9 f851 	bl	8000638 <__aeabi_dmul>
 8007596:	4632      	mov	r2, r6
 8007598:	463b      	mov	r3, r7
 800759a:	f7f8 fe95 	bl	80002c8 <__aeabi_dsub>
 800759e:	4602      	mov	r2, r0
 80075a0:	460b      	mov	r3, r1
 80075a2:	4606      	mov	r6, r0
 80075a4:	460f      	mov	r7, r1
 80075a6:	4640      	mov	r0, r8
 80075a8:	4649      	mov	r1, r9
 80075aa:	f7f8 fe8d 	bl	80002c8 <__aeabi_dsub>
 80075ae:	9a05      	ldr	r2, [sp, #20]
 80075b0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80075b4:	1ad3      	subs	r3, r2, r3
 80075b6:	2b31      	cmp	r3, #49	; 0x31
 80075b8:	dc20      	bgt.n	80075fc <__ieee754_rem_pio2+0x26c>
 80075ba:	e9c4 0100 	strd	r0, r1, [r4]
 80075be:	46c2      	mov	sl, r8
 80075c0:	46cb      	mov	fp, r9
 80075c2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80075c6:	4650      	mov	r0, sl
 80075c8:	4642      	mov	r2, r8
 80075ca:	464b      	mov	r3, r9
 80075cc:	4659      	mov	r1, fp
 80075ce:	f7f8 fe7b 	bl	80002c8 <__aeabi_dsub>
 80075d2:	463b      	mov	r3, r7
 80075d4:	4632      	mov	r2, r6
 80075d6:	f7f8 fe77 	bl	80002c8 <__aeabi_dsub>
 80075da:	9b04      	ldr	r3, [sp, #16]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80075e2:	f6bf af11 	bge.w	8007408 <__ieee754_rem_pio2+0x78>
 80075e6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80075ea:	6063      	str	r3, [r4, #4]
 80075ec:	f8c4 8000 	str.w	r8, [r4]
 80075f0:	60a0      	str	r0, [r4, #8]
 80075f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80075f6:	60e3      	str	r3, [r4, #12]
 80075f8:	426d      	negs	r5, r5
 80075fa:	e705      	b.n	8007408 <__ieee754_rem_pio2+0x78>
 80075fc:	a326      	add	r3, pc, #152	; (adr r3, 8007698 <__ieee754_rem_pio2+0x308>)
 80075fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007602:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007606:	f7f9 f817 	bl	8000638 <__aeabi_dmul>
 800760a:	4606      	mov	r6, r0
 800760c:	460f      	mov	r7, r1
 800760e:	4602      	mov	r2, r0
 8007610:	460b      	mov	r3, r1
 8007612:	4640      	mov	r0, r8
 8007614:	4649      	mov	r1, r9
 8007616:	f7f8 fe57 	bl	80002c8 <__aeabi_dsub>
 800761a:	4602      	mov	r2, r0
 800761c:	460b      	mov	r3, r1
 800761e:	4682      	mov	sl, r0
 8007620:	468b      	mov	fp, r1
 8007622:	4640      	mov	r0, r8
 8007624:	4649      	mov	r1, r9
 8007626:	f7f8 fe4f 	bl	80002c8 <__aeabi_dsub>
 800762a:	4632      	mov	r2, r6
 800762c:	463b      	mov	r3, r7
 800762e:	f7f8 fe4b 	bl	80002c8 <__aeabi_dsub>
 8007632:	a31b      	add	r3, pc, #108	; (adr r3, 80076a0 <__ieee754_rem_pio2+0x310>)
 8007634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007638:	4606      	mov	r6, r0
 800763a:	460f      	mov	r7, r1
 800763c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007640:	f7f8 fffa 	bl	8000638 <__aeabi_dmul>
 8007644:	4632      	mov	r2, r6
 8007646:	463b      	mov	r3, r7
 8007648:	f7f8 fe3e 	bl	80002c8 <__aeabi_dsub>
 800764c:	4606      	mov	r6, r0
 800764e:	460f      	mov	r7, r1
 8007650:	e764      	b.n	800751c <__ieee754_rem_pio2+0x18c>
 8007652:	4b1b      	ldr	r3, [pc, #108]	; (80076c0 <__ieee754_rem_pio2+0x330>)
 8007654:	4598      	cmp	r8, r3
 8007656:	dd35      	ble.n	80076c4 <__ieee754_rem_pio2+0x334>
 8007658:	ee10 2a10 	vmov	r2, s0
 800765c:	463b      	mov	r3, r7
 800765e:	4630      	mov	r0, r6
 8007660:	4639      	mov	r1, r7
 8007662:	f7f8 fe31 	bl	80002c8 <__aeabi_dsub>
 8007666:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800766a:	e9c4 0100 	strd	r0, r1, [r4]
 800766e:	e6a1      	b.n	80073b4 <__ieee754_rem_pio2+0x24>
 8007670:	54400000 	.word	0x54400000
 8007674:	3ff921fb 	.word	0x3ff921fb
 8007678:	1a626331 	.word	0x1a626331
 800767c:	3dd0b461 	.word	0x3dd0b461
 8007680:	1a600000 	.word	0x1a600000
 8007684:	3dd0b461 	.word	0x3dd0b461
 8007688:	2e037073 	.word	0x2e037073
 800768c:	3ba3198a 	.word	0x3ba3198a
 8007690:	6dc9c883 	.word	0x6dc9c883
 8007694:	3fe45f30 	.word	0x3fe45f30
 8007698:	2e000000 	.word	0x2e000000
 800769c:	3ba3198a 	.word	0x3ba3198a
 80076a0:	252049c1 	.word	0x252049c1
 80076a4:	397b839a 	.word	0x397b839a
 80076a8:	3fe921fb 	.word	0x3fe921fb
 80076ac:	4002d97b 	.word	0x4002d97b
 80076b0:	3ff921fb 	.word	0x3ff921fb
 80076b4:	413921fb 	.word	0x413921fb
 80076b8:	3fe00000 	.word	0x3fe00000
 80076bc:	08008658 	.word	0x08008658
 80076c0:	7fefffff 	.word	0x7fefffff
 80076c4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80076c8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80076cc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80076d0:	4630      	mov	r0, r6
 80076d2:	460f      	mov	r7, r1
 80076d4:	f7f9 fa60 	bl	8000b98 <__aeabi_d2iz>
 80076d8:	f7f8 ff44 	bl	8000564 <__aeabi_i2d>
 80076dc:	4602      	mov	r2, r0
 80076de:	460b      	mov	r3, r1
 80076e0:	4630      	mov	r0, r6
 80076e2:	4639      	mov	r1, r7
 80076e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80076e8:	f7f8 fdee 	bl	80002c8 <__aeabi_dsub>
 80076ec:	2200      	movs	r2, #0
 80076ee:	4b1f      	ldr	r3, [pc, #124]	; (800776c <__ieee754_rem_pio2+0x3dc>)
 80076f0:	f7f8 ffa2 	bl	8000638 <__aeabi_dmul>
 80076f4:	460f      	mov	r7, r1
 80076f6:	4606      	mov	r6, r0
 80076f8:	f7f9 fa4e 	bl	8000b98 <__aeabi_d2iz>
 80076fc:	f7f8 ff32 	bl	8000564 <__aeabi_i2d>
 8007700:	4602      	mov	r2, r0
 8007702:	460b      	mov	r3, r1
 8007704:	4630      	mov	r0, r6
 8007706:	4639      	mov	r1, r7
 8007708:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800770c:	f7f8 fddc 	bl	80002c8 <__aeabi_dsub>
 8007710:	2200      	movs	r2, #0
 8007712:	4b16      	ldr	r3, [pc, #88]	; (800776c <__ieee754_rem_pio2+0x3dc>)
 8007714:	f7f8 ff90 	bl	8000638 <__aeabi_dmul>
 8007718:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800771c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8007720:	f04f 0803 	mov.w	r8, #3
 8007724:	2600      	movs	r6, #0
 8007726:	2700      	movs	r7, #0
 8007728:	4632      	mov	r2, r6
 800772a:	463b      	mov	r3, r7
 800772c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8007730:	f108 3aff 	add.w	sl, r8, #4294967295
 8007734:	f7f9 f9e8 	bl	8000b08 <__aeabi_dcmpeq>
 8007738:	b9b0      	cbnz	r0, 8007768 <__ieee754_rem_pio2+0x3d8>
 800773a:	4b0d      	ldr	r3, [pc, #52]	; (8007770 <__ieee754_rem_pio2+0x3e0>)
 800773c:	9301      	str	r3, [sp, #4]
 800773e:	2302      	movs	r3, #2
 8007740:	9300      	str	r3, [sp, #0]
 8007742:	462a      	mov	r2, r5
 8007744:	4643      	mov	r3, r8
 8007746:	4621      	mov	r1, r4
 8007748:	a806      	add	r0, sp, #24
 800774a:	f000 f8dd 	bl	8007908 <__kernel_rem_pio2>
 800774e:	9b04      	ldr	r3, [sp, #16]
 8007750:	2b00      	cmp	r3, #0
 8007752:	4605      	mov	r5, r0
 8007754:	f6bf ae58 	bge.w	8007408 <__ieee754_rem_pio2+0x78>
 8007758:	6863      	ldr	r3, [r4, #4]
 800775a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800775e:	6063      	str	r3, [r4, #4]
 8007760:	68e3      	ldr	r3, [r4, #12]
 8007762:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007766:	e746      	b.n	80075f6 <__ieee754_rem_pio2+0x266>
 8007768:	46d0      	mov	r8, sl
 800776a:	e7dd      	b.n	8007728 <__ieee754_rem_pio2+0x398>
 800776c:	41700000 	.word	0x41700000
 8007770:	080086d8 	.word	0x080086d8
 8007774:	00000000 	.word	0x00000000

08007778 <__kernel_cos>:
 8007778:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800777c:	ec59 8b10 	vmov	r8, r9, d0
 8007780:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8007784:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8007788:	ed2d 8b02 	vpush	{d8}
 800778c:	eeb0 8a41 	vmov.f32	s16, s2
 8007790:	eef0 8a61 	vmov.f32	s17, s3
 8007794:	da07      	bge.n	80077a6 <__kernel_cos+0x2e>
 8007796:	ee10 0a10 	vmov	r0, s0
 800779a:	4649      	mov	r1, r9
 800779c:	f7f9 f9fc 	bl	8000b98 <__aeabi_d2iz>
 80077a0:	2800      	cmp	r0, #0
 80077a2:	f000 8089 	beq.w	80078b8 <__kernel_cos+0x140>
 80077a6:	4642      	mov	r2, r8
 80077a8:	464b      	mov	r3, r9
 80077aa:	4640      	mov	r0, r8
 80077ac:	4649      	mov	r1, r9
 80077ae:	f7f8 ff43 	bl	8000638 <__aeabi_dmul>
 80077b2:	2200      	movs	r2, #0
 80077b4:	4b4e      	ldr	r3, [pc, #312]	; (80078f0 <__kernel_cos+0x178>)
 80077b6:	4604      	mov	r4, r0
 80077b8:	460d      	mov	r5, r1
 80077ba:	f7f8 ff3d 	bl	8000638 <__aeabi_dmul>
 80077be:	a340      	add	r3, pc, #256	; (adr r3, 80078c0 <__kernel_cos+0x148>)
 80077c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c4:	4682      	mov	sl, r0
 80077c6:	468b      	mov	fp, r1
 80077c8:	4620      	mov	r0, r4
 80077ca:	4629      	mov	r1, r5
 80077cc:	f7f8 ff34 	bl	8000638 <__aeabi_dmul>
 80077d0:	a33d      	add	r3, pc, #244	; (adr r3, 80078c8 <__kernel_cos+0x150>)
 80077d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d6:	f7f8 fd79 	bl	80002cc <__adddf3>
 80077da:	4622      	mov	r2, r4
 80077dc:	462b      	mov	r3, r5
 80077de:	f7f8 ff2b 	bl	8000638 <__aeabi_dmul>
 80077e2:	a33b      	add	r3, pc, #236	; (adr r3, 80078d0 <__kernel_cos+0x158>)
 80077e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e8:	f7f8 fd6e 	bl	80002c8 <__aeabi_dsub>
 80077ec:	4622      	mov	r2, r4
 80077ee:	462b      	mov	r3, r5
 80077f0:	f7f8 ff22 	bl	8000638 <__aeabi_dmul>
 80077f4:	a338      	add	r3, pc, #224	; (adr r3, 80078d8 <__kernel_cos+0x160>)
 80077f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077fa:	f7f8 fd67 	bl	80002cc <__adddf3>
 80077fe:	4622      	mov	r2, r4
 8007800:	462b      	mov	r3, r5
 8007802:	f7f8 ff19 	bl	8000638 <__aeabi_dmul>
 8007806:	a336      	add	r3, pc, #216	; (adr r3, 80078e0 <__kernel_cos+0x168>)
 8007808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780c:	f7f8 fd5c 	bl	80002c8 <__aeabi_dsub>
 8007810:	4622      	mov	r2, r4
 8007812:	462b      	mov	r3, r5
 8007814:	f7f8 ff10 	bl	8000638 <__aeabi_dmul>
 8007818:	a333      	add	r3, pc, #204	; (adr r3, 80078e8 <__kernel_cos+0x170>)
 800781a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781e:	f7f8 fd55 	bl	80002cc <__adddf3>
 8007822:	4622      	mov	r2, r4
 8007824:	462b      	mov	r3, r5
 8007826:	f7f8 ff07 	bl	8000638 <__aeabi_dmul>
 800782a:	4622      	mov	r2, r4
 800782c:	462b      	mov	r3, r5
 800782e:	f7f8 ff03 	bl	8000638 <__aeabi_dmul>
 8007832:	ec53 2b18 	vmov	r2, r3, d8
 8007836:	4604      	mov	r4, r0
 8007838:	460d      	mov	r5, r1
 800783a:	4640      	mov	r0, r8
 800783c:	4649      	mov	r1, r9
 800783e:	f7f8 fefb 	bl	8000638 <__aeabi_dmul>
 8007842:	460b      	mov	r3, r1
 8007844:	4602      	mov	r2, r0
 8007846:	4629      	mov	r1, r5
 8007848:	4620      	mov	r0, r4
 800784a:	f7f8 fd3d 	bl	80002c8 <__aeabi_dsub>
 800784e:	4b29      	ldr	r3, [pc, #164]	; (80078f4 <__kernel_cos+0x17c>)
 8007850:	429e      	cmp	r6, r3
 8007852:	4680      	mov	r8, r0
 8007854:	4689      	mov	r9, r1
 8007856:	dc11      	bgt.n	800787c <__kernel_cos+0x104>
 8007858:	4602      	mov	r2, r0
 800785a:	460b      	mov	r3, r1
 800785c:	4650      	mov	r0, sl
 800785e:	4659      	mov	r1, fp
 8007860:	f7f8 fd32 	bl	80002c8 <__aeabi_dsub>
 8007864:	460b      	mov	r3, r1
 8007866:	4924      	ldr	r1, [pc, #144]	; (80078f8 <__kernel_cos+0x180>)
 8007868:	4602      	mov	r2, r0
 800786a:	2000      	movs	r0, #0
 800786c:	f7f8 fd2c 	bl	80002c8 <__aeabi_dsub>
 8007870:	ecbd 8b02 	vpop	{d8}
 8007874:	ec41 0b10 	vmov	d0, r0, r1
 8007878:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800787c:	4b1f      	ldr	r3, [pc, #124]	; (80078fc <__kernel_cos+0x184>)
 800787e:	491e      	ldr	r1, [pc, #120]	; (80078f8 <__kernel_cos+0x180>)
 8007880:	429e      	cmp	r6, r3
 8007882:	bfcc      	ite	gt
 8007884:	4d1e      	ldrgt	r5, [pc, #120]	; (8007900 <__kernel_cos+0x188>)
 8007886:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800788a:	2400      	movs	r4, #0
 800788c:	4622      	mov	r2, r4
 800788e:	462b      	mov	r3, r5
 8007890:	2000      	movs	r0, #0
 8007892:	f7f8 fd19 	bl	80002c8 <__aeabi_dsub>
 8007896:	4622      	mov	r2, r4
 8007898:	4606      	mov	r6, r0
 800789a:	460f      	mov	r7, r1
 800789c:	462b      	mov	r3, r5
 800789e:	4650      	mov	r0, sl
 80078a0:	4659      	mov	r1, fp
 80078a2:	f7f8 fd11 	bl	80002c8 <__aeabi_dsub>
 80078a6:	4642      	mov	r2, r8
 80078a8:	464b      	mov	r3, r9
 80078aa:	f7f8 fd0d 	bl	80002c8 <__aeabi_dsub>
 80078ae:	4602      	mov	r2, r0
 80078b0:	460b      	mov	r3, r1
 80078b2:	4630      	mov	r0, r6
 80078b4:	4639      	mov	r1, r7
 80078b6:	e7d9      	b.n	800786c <__kernel_cos+0xf4>
 80078b8:	2000      	movs	r0, #0
 80078ba:	490f      	ldr	r1, [pc, #60]	; (80078f8 <__kernel_cos+0x180>)
 80078bc:	e7d8      	b.n	8007870 <__kernel_cos+0xf8>
 80078be:	bf00      	nop
 80078c0:	be8838d4 	.word	0xbe8838d4
 80078c4:	bda8fae9 	.word	0xbda8fae9
 80078c8:	bdb4b1c4 	.word	0xbdb4b1c4
 80078cc:	3e21ee9e 	.word	0x3e21ee9e
 80078d0:	809c52ad 	.word	0x809c52ad
 80078d4:	3e927e4f 	.word	0x3e927e4f
 80078d8:	19cb1590 	.word	0x19cb1590
 80078dc:	3efa01a0 	.word	0x3efa01a0
 80078e0:	16c15177 	.word	0x16c15177
 80078e4:	3f56c16c 	.word	0x3f56c16c
 80078e8:	5555554c 	.word	0x5555554c
 80078ec:	3fa55555 	.word	0x3fa55555
 80078f0:	3fe00000 	.word	0x3fe00000
 80078f4:	3fd33332 	.word	0x3fd33332
 80078f8:	3ff00000 	.word	0x3ff00000
 80078fc:	3fe90000 	.word	0x3fe90000
 8007900:	3fd20000 	.word	0x3fd20000
 8007904:	00000000 	.word	0x00000000

08007908 <__kernel_rem_pio2>:
 8007908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800790c:	ed2d 8b02 	vpush	{d8}
 8007910:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8007914:	1ed4      	subs	r4, r2, #3
 8007916:	9308      	str	r3, [sp, #32]
 8007918:	9101      	str	r1, [sp, #4]
 800791a:	4bc5      	ldr	r3, [pc, #788]	; (8007c30 <__kernel_rem_pio2+0x328>)
 800791c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800791e:	9009      	str	r0, [sp, #36]	; 0x24
 8007920:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007924:	9304      	str	r3, [sp, #16]
 8007926:	9b08      	ldr	r3, [sp, #32]
 8007928:	3b01      	subs	r3, #1
 800792a:	9307      	str	r3, [sp, #28]
 800792c:	2318      	movs	r3, #24
 800792e:	fb94 f4f3 	sdiv	r4, r4, r3
 8007932:	f06f 0317 	mvn.w	r3, #23
 8007936:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800793a:	fb04 3303 	mla	r3, r4, r3, r3
 800793e:	eb03 0a02 	add.w	sl, r3, r2
 8007942:	9b04      	ldr	r3, [sp, #16]
 8007944:	9a07      	ldr	r2, [sp, #28]
 8007946:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8007c20 <__kernel_rem_pio2+0x318>
 800794a:	eb03 0802 	add.w	r8, r3, r2
 800794e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007950:	1aa7      	subs	r7, r4, r2
 8007952:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007956:	ae22      	add	r6, sp, #136	; 0x88
 8007958:	2500      	movs	r5, #0
 800795a:	4545      	cmp	r5, r8
 800795c:	dd13      	ble.n	8007986 <__kernel_rem_pio2+0x7e>
 800795e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8007c20 <__kernel_rem_pio2+0x318>
 8007962:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8007966:	2600      	movs	r6, #0
 8007968:	9b04      	ldr	r3, [sp, #16]
 800796a:	429e      	cmp	r6, r3
 800796c:	dc32      	bgt.n	80079d4 <__kernel_rem_pio2+0xcc>
 800796e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007970:	9302      	str	r3, [sp, #8]
 8007972:	9b08      	ldr	r3, [sp, #32]
 8007974:	199d      	adds	r5, r3, r6
 8007976:	ab22      	add	r3, sp, #136	; 0x88
 8007978:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800797c:	9306      	str	r3, [sp, #24]
 800797e:	ec59 8b18 	vmov	r8, r9, d8
 8007982:	2700      	movs	r7, #0
 8007984:	e01f      	b.n	80079c6 <__kernel_rem_pio2+0xbe>
 8007986:	42ef      	cmn	r7, r5
 8007988:	d407      	bmi.n	800799a <__kernel_rem_pio2+0x92>
 800798a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800798e:	f7f8 fde9 	bl	8000564 <__aeabi_i2d>
 8007992:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007996:	3501      	adds	r5, #1
 8007998:	e7df      	b.n	800795a <__kernel_rem_pio2+0x52>
 800799a:	ec51 0b18 	vmov	r0, r1, d8
 800799e:	e7f8      	b.n	8007992 <__kernel_rem_pio2+0x8a>
 80079a0:	9906      	ldr	r1, [sp, #24]
 80079a2:	9d02      	ldr	r5, [sp, #8]
 80079a4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80079a8:	9106      	str	r1, [sp, #24]
 80079aa:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80079ae:	9502      	str	r5, [sp, #8]
 80079b0:	f7f8 fe42 	bl	8000638 <__aeabi_dmul>
 80079b4:	4602      	mov	r2, r0
 80079b6:	460b      	mov	r3, r1
 80079b8:	4640      	mov	r0, r8
 80079ba:	4649      	mov	r1, r9
 80079bc:	f7f8 fc86 	bl	80002cc <__adddf3>
 80079c0:	3701      	adds	r7, #1
 80079c2:	4680      	mov	r8, r0
 80079c4:	4689      	mov	r9, r1
 80079c6:	9b07      	ldr	r3, [sp, #28]
 80079c8:	429f      	cmp	r7, r3
 80079ca:	dde9      	ble.n	80079a0 <__kernel_rem_pio2+0x98>
 80079cc:	e8eb 8902 	strd	r8, r9, [fp], #8
 80079d0:	3601      	adds	r6, #1
 80079d2:	e7c9      	b.n	8007968 <__kernel_rem_pio2+0x60>
 80079d4:	9b04      	ldr	r3, [sp, #16]
 80079d6:	aa0e      	add	r2, sp, #56	; 0x38
 80079d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80079dc:	930c      	str	r3, [sp, #48]	; 0x30
 80079de:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80079e0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80079e4:	9c04      	ldr	r4, [sp, #16]
 80079e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80079e8:	ab9a      	add	r3, sp, #616	; 0x268
 80079ea:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 80079ee:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80079f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80079f6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80079fa:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80079fe:	ab9a      	add	r3, sp, #616	; 0x268
 8007a00:	445b      	add	r3, fp
 8007a02:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8007a06:	2500      	movs	r5, #0
 8007a08:	1b63      	subs	r3, r4, r5
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	dc78      	bgt.n	8007b00 <__kernel_rem_pio2+0x1f8>
 8007a0e:	4650      	mov	r0, sl
 8007a10:	ec49 8b10 	vmov	d0, r8, r9
 8007a14:	f000 fc00 	bl	8008218 <scalbn>
 8007a18:	ec57 6b10 	vmov	r6, r7, d0
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007a22:	ee10 0a10 	vmov	r0, s0
 8007a26:	4639      	mov	r1, r7
 8007a28:	f7f8 fe06 	bl	8000638 <__aeabi_dmul>
 8007a2c:	ec41 0b10 	vmov	d0, r0, r1
 8007a30:	f000 fb6e 	bl	8008110 <floor>
 8007a34:	2200      	movs	r2, #0
 8007a36:	ec51 0b10 	vmov	r0, r1, d0
 8007a3a:	4b7e      	ldr	r3, [pc, #504]	; (8007c34 <__kernel_rem_pio2+0x32c>)
 8007a3c:	f7f8 fdfc 	bl	8000638 <__aeabi_dmul>
 8007a40:	4602      	mov	r2, r0
 8007a42:	460b      	mov	r3, r1
 8007a44:	4630      	mov	r0, r6
 8007a46:	4639      	mov	r1, r7
 8007a48:	f7f8 fc3e 	bl	80002c8 <__aeabi_dsub>
 8007a4c:	460f      	mov	r7, r1
 8007a4e:	4606      	mov	r6, r0
 8007a50:	f7f9 f8a2 	bl	8000b98 <__aeabi_d2iz>
 8007a54:	9006      	str	r0, [sp, #24]
 8007a56:	f7f8 fd85 	bl	8000564 <__aeabi_i2d>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	4630      	mov	r0, r6
 8007a60:	4639      	mov	r1, r7
 8007a62:	f7f8 fc31 	bl	80002c8 <__aeabi_dsub>
 8007a66:	f1ba 0f00 	cmp.w	sl, #0
 8007a6a:	4606      	mov	r6, r0
 8007a6c:	460f      	mov	r7, r1
 8007a6e:	dd6c      	ble.n	8007b4a <__kernel_rem_pio2+0x242>
 8007a70:	1e62      	subs	r2, r4, #1
 8007a72:	ab0e      	add	r3, sp, #56	; 0x38
 8007a74:	f1ca 0118 	rsb	r1, sl, #24
 8007a78:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007a7c:	9d06      	ldr	r5, [sp, #24]
 8007a7e:	fa40 f301 	asr.w	r3, r0, r1
 8007a82:	441d      	add	r5, r3
 8007a84:	408b      	lsls	r3, r1
 8007a86:	1ac0      	subs	r0, r0, r3
 8007a88:	ab0e      	add	r3, sp, #56	; 0x38
 8007a8a:	9506      	str	r5, [sp, #24]
 8007a8c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007a90:	f1ca 0317 	rsb	r3, sl, #23
 8007a94:	fa40 f303 	asr.w	r3, r0, r3
 8007a98:	9302      	str	r3, [sp, #8]
 8007a9a:	9b02      	ldr	r3, [sp, #8]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	dd62      	ble.n	8007b66 <__kernel_rem_pio2+0x25e>
 8007aa0:	9b06      	ldr	r3, [sp, #24]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	9306      	str	r3, [sp, #24]
 8007aa8:	4615      	mov	r5, r2
 8007aaa:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007aae:	4294      	cmp	r4, r2
 8007ab0:	f300 8095 	bgt.w	8007bde <__kernel_rem_pio2+0x2d6>
 8007ab4:	f1ba 0f00 	cmp.w	sl, #0
 8007ab8:	dd07      	ble.n	8007aca <__kernel_rem_pio2+0x1c2>
 8007aba:	f1ba 0f01 	cmp.w	sl, #1
 8007abe:	f000 80a2 	beq.w	8007c06 <__kernel_rem_pio2+0x2fe>
 8007ac2:	f1ba 0f02 	cmp.w	sl, #2
 8007ac6:	f000 80c1 	beq.w	8007c4c <__kernel_rem_pio2+0x344>
 8007aca:	9b02      	ldr	r3, [sp, #8]
 8007acc:	2b02      	cmp	r3, #2
 8007ace:	d14a      	bne.n	8007b66 <__kernel_rem_pio2+0x25e>
 8007ad0:	4632      	mov	r2, r6
 8007ad2:	463b      	mov	r3, r7
 8007ad4:	2000      	movs	r0, #0
 8007ad6:	4958      	ldr	r1, [pc, #352]	; (8007c38 <__kernel_rem_pio2+0x330>)
 8007ad8:	f7f8 fbf6 	bl	80002c8 <__aeabi_dsub>
 8007adc:	4606      	mov	r6, r0
 8007ade:	460f      	mov	r7, r1
 8007ae0:	2d00      	cmp	r5, #0
 8007ae2:	d040      	beq.n	8007b66 <__kernel_rem_pio2+0x25e>
 8007ae4:	4650      	mov	r0, sl
 8007ae6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8007c28 <__kernel_rem_pio2+0x320>
 8007aea:	f000 fb95 	bl	8008218 <scalbn>
 8007aee:	4630      	mov	r0, r6
 8007af0:	4639      	mov	r1, r7
 8007af2:	ec53 2b10 	vmov	r2, r3, d0
 8007af6:	f7f8 fbe7 	bl	80002c8 <__aeabi_dsub>
 8007afa:	4606      	mov	r6, r0
 8007afc:	460f      	mov	r7, r1
 8007afe:	e032      	b.n	8007b66 <__kernel_rem_pio2+0x25e>
 8007b00:	2200      	movs	r2, #0
 8007b02:	4b4e      	ldr	r3, [pc, #312]	; (8007c3c <__kernel_rem_pio2+0x334>)
 8007b04:	4640      	mov	r0, r8
 8007b06:	4649      	mov	r1, r9
 8007b08:	f7f8 fd96 	bl	8000638 <__aeabi_dmul>
 8007b0c:	f7f9 f844 	bl	8000b98 <__aeabi_d2iz>
 8007b10:	f7f8 fd28 	bl	8000564 <__aeabi_i2d>
 8007b14:	2200      	movs	r2, #0
 8007b16:	4b4a      	ldr	r3, [pc, #296]	; (8007c40 <__kernel_rem_pio2+0x338>)
 8007b18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b1c:	f7f8 fd8c 	bl	8000638 <__aeabi_dmul>
 8007b20:	4602      	mov	r2, r0
 8007b22:	460b      	mov	r3, r1
 8007b24:	4640      	mov	r0, r8
 8007b26:	4649      	mov	r1, r9
 8007b28:	f7f8 fbce 	bl	80002c8 <__aeabi_dsub>
 8007b2c:	f7f9 f834 	bl	8000b98 <__aeabi_d2iz>
 8007b30:	ab0e      	add	r3, sp, #56	; 0x38
 8007b32:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8007b36:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8007b3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b3e:	f7f8 fbc5 	bl	80002cc <__adddf3>
 8007b42:	3501      	adds	r5, #1
 8007b44:	4680      	mov	r8, r0
 8007b46:	4689      	mov	r9, r1
 8007b48:	e75e      	b.n	8007a08 <__kernel_rem_pio2+0x100>
 8007b4a:	d105      	bne.n	8007b58 <__kernel_rem_pio2+0x250>
 8007b4c:	1e63      	subs	r3, r4, #1
 8007b4e:	aa0e      	add	r2, sp, #56	; 0x38
 8007b50:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007b54:	15c3      	asrs	r3, r0, #23
 8007b56:	e79f      	b.n	8007a98 <__kernel_rem_pio2+0x190>
 8007b58:	2200      	movs	r2, #0
 8007b5a:	4b3a      	ldr	r3, [pc, #232]	; (8007c44 <__kernel_rem_pio2+0x33c>)
 8007b5c:	f7f8 fff2 	bl	8000b44 <__aeabi_dcmpge>
 8007b60:	2800      	cmp	r0, #0
 8007b62:	d139      	bne.n	8007bd8 <__kernel_rem_pio2+0x2d0>
 8007b64:	9002      	str	r0, [sp, #8]
 8007b66:	2200      	movs	r2, #0
 8007b68:	2300      	movs	r3, #0
 8007b6a:	4630      	mov	r0, r6
 8007b6c:	4639      	mov	r1, r7
 8007b6e:	f7f8 ffcb 	bl	8000b08 <__aeabi_dcmpeq>
 8007b72:	2800      	cmp	r0, #0
 8007b74:	f000 80c7 	beq.w	8007d06 <__kernel_rem_pio2+0x3fe>
 8007b78:	1e65      	subs	r5, r4, #1
 8007b7a:	462b      	mov	r3, r5
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	9904      	ldr	r1, [sp, #16]
 8007b80:	428b      	cmp	r3, r1
 8007b82:	da6a      	bge.n	8007c5a <__kernel_rem_pio2+0x352>
 8007b84:	2a00      	cmp	r2, #0
 8007b86:	f000 8088 	beq.w	8007c9a <__kernel_rem_pio2+0x392>
 8007b8a:	ab0e      	add	r3, sp, #56	; 0x38
 8007b8c:	f1aa 0a18 	sub.w	sl, sl, #24
 8007b90:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	f000 80b4 	beq.w	8007d02 <__kernel_rem_pio2+0x3fa>
 8007b9a:	4650      	mov	r0, sl
 8007b9c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8007c28 <__kernel_rem_pio2+0x320>
 8007ba0:	f000 fb3a 	bl	8008218 <scalbn>
 8007ba4:	00ec      	lsls	r4, r5, #3
 8007ba6:	ab72      	add	r3, sp, #456	; 0x1c8
 8007ba8:	191e      	adds	r6, r3, r4
 8007baa:	ec59 8b10 	vmov	r8, r9, d0
 8007bae:	f106 0a08 	add.w	sl, r6, #8
 8007bb2:	462f      	mov	r7, r5
 8007bb4:	2f00      	cmp	r7, #0
 8007bb6:	f280 80df 	bge.w	8007d78 <__kernel_rem_pio2+0x470>
 8007bba:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8007c20 <__kernel_rem_pio2+0x318>
 8007bbe:	f04f 0a00 	mov.w	sl, #0
 8007bc2:	eba5 030a 	sub.w	r3, r5, sl
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	f2c0 810a 	blt.w	8007de0 <__kernel_rem_pio2+0x4d8>
 8007bcc:	f8df b078 	ldr.w	fp, [pc, #120]	; 8007c48 <__kernel_rem_pio2+0x340>
 8007bd0:	ec59 8b18 	vmov	r8, r9, d8
 8007bd4:	2700      	movs	r7, #0
 8007bd6:	e0f5      	b.n	8007dc4 <__kernel_rem_pio2+0x4bc>
 8007bd8:	2302      	movs	r3, #2
 8007bda:	9302      	str	r3, [sp, #8]
 8007bdc:	e760      	b.n	8007aa0 <__kernel_rem_pio2+0x198>
 8007bde:	ab0e      	add	r3, sp, #56	; 0x38
 8007be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007be4:	b94d      	cbnz	r5, 8007bfa <__kernel_rem_pio2+0x2f2>
 8007be6:	b12b      	cbz	r3, 8007bf4 <__kernel_rem_pio2+0x2ec>
 8007be8:	a80e      	add	r0, sp, #56	; 0x38
 8007bea:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007bee:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	3201      	adds	r2, #1
 8007bf6:	461d      	mov	r5, r3
 8007bf8:	e759      	b.n	8007aae <__kernel_rem_pio2+0x1a6>
 8007bfa:	a80e      	add	r0, sp, #56	; 0x38
 8007bfc:	1acb      	subs	r3, r1, r3
 8007bfe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8007c02:	462b      	mov	r3, r5
 8007c04:	e7f6      	b.n	8007bf4 <__kernel_rem_pio2+0x2ec>
 8007c06:	1e62      	subs	r2, r4, #1
 8007c08:	ab0e      	add	r3, sp, #56	; 0x38
 8007c0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c0e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007c12:	a90e      	add	r1, sp, #56	; 0x38
 8007c14:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007c18:	e757      	b.n	8007aca <__kernel_rem_pio2+0x1c2>
 8007c1a:	bf00      	nop
 8007c1c:	f3af 8000 	nop.w
	...
 8007c2c:	3ff00000 	.word	0x3ff00000
 8007c30:	08008820 	.word	0x08008820
 8007c34:	40200000 	.word	0x40200000
 8007c38:	3ff00000 	.word	0x3ff00000
 8007c3c:	3e700000 	.word	0x3e700000
 8007c40:	41700000 	.word	0x41700000
 8007c44:	3fe00000 	.word	0x3fe00000
 8007c48:	080087e0 	.word	0x080087e0
 8007c4c:	1e62      	subs	r2, r4, #1
 8007c4e:	ab0e      	add	r3, sp, #56	; 0x38
 8007c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c54:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007c58:	e7db      	b.n	8007c12 <__kernel_rem_pio2+0x30a>
 8007c5a:	a90e      	add	r1, sp, #56	; 0x38
 8007c5c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007c60:	3b01      	subs	r3, #1
 8007c62:	430a      	orrs	r2, r1
 8007c64:	e78b      	b.n	8007b7e <__kernel_rem_pio2+0x276>
 8007c66:	3301      	adds	r3, #1
 8007c68:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007c6c:	2900      	cmp	r1, #0
 8007c6e:	d0fa      	beq.n	8007c66 <__kernel_rem_pio2+0x35e>
 8007c70:	9a08      	ldr	r2, [sp, #32]
 8007c72:	4422      	add	r2, r4
 8007c74:	00d2      	lsls	r2, r2, #3
 8007c76:	a922      	add	r1, sp, #136	; 0x88
 8007c78:	18e3      	adds	r3, r4, r3
 8007c7a:	9206      	str	r2, [sp, #24]
 8007c7c:	440a      	add	r2, r1
 8007c7e:	9302      	str	r3, [sp, #8]
 8007c80:	f10b 0108 	add.w	r1, fp, #8
 8007c84:	f102 0308 	add.w	r3, r2, #8
 8007c88:	1c66      	adds	r6, r4, #1
 8007c8a:	910a      	str	r1, [sp, #40]	; 0x28
 8007c8c:	2500      	movs	r5, #0
 8007c8e:	930d      	str	r3, [sp, #52]	; 0x34
 8007c90:	9b02      	ldr	r3, [sp, #8]
 8007c92:	42b3      	cmp	r3, r6
 8007c94:	da04      	bge.n	8007ca0 <__kernel_rem_pio2+0x398>
 8007c96:	461c      	mov	r4, r3
 8007c98:	e6a6      	b.n	80079e8 <__kernel_rem_pio2+0xe0>
 8007c9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	e7e3      	b.n	8007c68 <__kernel_rem_pio2+0x360>
 8007ca0:	9b06      	ldr	r3, [sp, #24]
 8007ca2:	18ef      	adds	r7, r5, r3
 8007ca4:	ab22      	add	r3, sp, #136	; 0x88
 8007ca6:	441f      	add	r7, r3
 8007ca8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007caa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007cae:	f7f8 fc59 	bl	8000564 <__aeabi_i2d>
 8007cb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cb4:	461c      	mov	r4, r3
 8007cb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cb8:	e9c7 0100 	strd	r0, r1, [r7]
 8007cbc:	eb03 0b05 	add.w	fp, r3, r5
 8007cc0:	2700      	movs	r7, #0
 8007cc2:	f04f 0800 	mov.w	r8, #0
 8007cc6:	f04f 0900 	mov.w	r9, #0
 8007cca:	9b07      	ldr	r3, [sp, #28]
 8007ccc:	429f      	cmp	r7, r3
 8007cce:	dd08      	ble.n	8007ce2 <__kernel_rem_pio2+0x3da>
 8007cd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cd2:	aa72      	add	r2, sp, #456	; 0x1c8
 8007cd4:	18eb      	adds	r3, r5, r3
 8007cd6:	4413      	add	r3, r2
 8007cd8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8007cdc:	3601      	adds	r6, #1
 8007cde:	3508      	adds	r5, #8
 8007ce0:	e7d6      	b.n	8007c90 <__kernel_rem_pio2+0x388>
 8007ce2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007ce6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8007cea:	f7f8 fca5 	bl	8000638 <__aeabi_dmul>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	4640      	mov	r0, r8
 8007cf4:	4649      	mov	r1, r9
 8007cf6:	f7f8 fae9 	bl	80002cc <__adddf3>
 8007cfa:	3701      	adds	r7, #1
 8007cfc:	4680      	mov	r8, r0
 8007cfe:	4689      	mov	r9, r1
 8007d00:	e7e3      	b.n	8007cca <__kernel_rem_pio2+0x3c2>
 8007d02:	3d01      	subs	r5, #1
 8007d04:	e741      	b.n	8007b8a <__kernel_rem_pio2+0x282>
 8007d06:	f1ca 0000 	rsb	r0, sl, #0
 8007d0a:	ec47 6b10 	vmov	d0, r6, r7
 8007d0e:	f000 fa83 	bl	8008218 <scalbn>
 8007d12:	ec57 6b10 	vmov	r6, r7, d0
 8007d16:	2200      	movs	r2, #0
 8007d18:	4b99      	ldr	r3, [pc, #612]	; (8007f80 <__kernel_rem_pio2+0x678>)
 8007d1a:	ee10 0a10 	vmov	r0, s0
 8007d1e:	4639      	mov	r1, r7
 8007d20:	f7f8 ff10 	bl	8000b44 <__aeabi_dcmpge>
 8007d24:	b1f8      	cbz	r0, 8007d66 <__kernel_rem_pio2+0x45e>
 8007d26:	2200      	movs	r2, #0
 8007d28:	4b96      	ldr	r3, [pc, #600]	; (8007f84 <__kernel_rem_pio2+0x67c>)
 8007d2a:	4630      	mov	r0, r6
 8007d2c:	4639      	mov	r1, r7
 8007d2e:	f7f8 fc83 	bl	8000638 <__aeabi_dmul>
 8007d32:	f7f8 ff31 	bl	8000b98 <__aeabi_d2iz>
 8007d36:	4680      	mov	r8, r0
 8007d38:	f7f8 fc14 	bl	8000564 <__aeabi_i2d>
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	4b90      	ldr	r3, [pc, #576]	; (8007f80 <__kernel_rem_pio2+0x678>)
 8007d40:	f7f8 fc7a 	bl	8000638 <__aeabi_dmul>
 8007d44:	460b      	mov	r3, r1
 8007d46:	4602      	mov	r2, r0
 8007d48:	4639      	mov	r1, r7
 8007d4a:	4630      	mov	r0, r6
 8007d4c:	f7f8 fabc 	bl	80002c8 <__aeabi_dsub>
 8007d50:	f7f8 ff22 	bl	8000b98 <__aeabi_d2iz>
 8007d54:	1c65      	adds	r5, r4, #1
 8007d56:	ab0e      	add	r3, sp, #56	; 0x38
 8007d58:	f10a 0a18 	add.w	sl, sl, #24
 8007d5c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007d60:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8007d64:	e719      	b.n	8007b9a <__kernel_rem_pio2+0x292>
 8007d66:	4630      	mov	r0, r6
 8007d68:	4639      	mov	r1, r7
 8007d6a:	f7f8 ff15 	bl	8000b98 <__aeabi_d2iz>
 8007d6e:	ab0e      	add	r3, sp, #56	; 0x38
 8007d70:	4625      	mov	r5, r4
 8007d72:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007d76:	e710      	b.n	8007b9a <__kernel_rem_pio2+0x292>
 8007d78:	ab0e      	add	r3, sp, #56	; 0x38
 8007d7a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8007d7e:	f7f8 fbf1 	bl	8000564 <__aeabi_i2d>
 8007d82:	4642      	mov	r2, r8
 8007d84:	464b      	mov	r3, r9
 8007d86:	f7f8 fc57 	bl	8000638 <__aeabi_dmul>
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8007d90:	4b7c      	ldr	r3, [pc, #496]	; (8007f84 <__kernel_rem_pio2+0x67c>)
 8007d92:	4640      	mov	r0, r8
 8007d94:	4649      	mov	r1, r9
 8007d96:	f7f8 fc4f 	bl	8000638 <__aeabi_dmul>
 8007d9a:	3f01      	subs	r7, #1
 8007d9c:	4680      	mov	r8, r0
 8007d9e:	4689      	mov	r9, r1
 8007da0:	e708      	b.n	8007bb4 <__kernel_rem_pio2+0x2ac>
 8007da2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8007da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007daa:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8007dae:	f7f8 fc43 	bl	8000638 <__aeabi_dmul>
 8007db2:	4602      	mov	r2, r0
 8007db4:	460b      	mov	r3, r1
 8007db6:	4640      	mov	r0, r8
 8007db8:	4649      	mov	r1, r9
 8007dba:	f7f8 fa87 	bl	80002cc <__adddf3>
 8007dbe:	3701      	adds	r7, #1
 8007dc0:	4680      	mov	r8, r0
 8007dc2:	4689      	mov	r9, r1
 8007dc4:	9b04      	ldr	r3, [sp, #16]
 8007dc6:	429f      	cmp	r7, r3
 8007dc8:	dc01      	bgt.n	8007dce <__kernel_rem_pio2+0x4c6>
 8007dca:	45ba      	cmp	sl, r7
 8007dcc:	dae9      	bge.n	8007da2 <__kernel_rem_pio2+0x49a>
 8007dce:	ab4a      	add	r3, sp, #296	; 0x128
 8007dd0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007dd4:	e9c3 8900 	strd	r8, r9, [r3]
 8007dd8:	f10a 0a01 	add.w	sl, sl, #1
 8007ddc:	3e08      	subs	r6, #8
 8007dde:	e6f0      	b.n	8007bc2 <__kernel_rem_pio2+0x2ba>
 8007de0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8007de2:	2b03      	cmp	r3, #3
 8007de4:	d85b      	bhi.n	8007e9e <__kernel_rem_pio2+0x596>
 8007de6:	e8df f003 	tbb	[pc, r3]
 8007dea:	264a      	.short	0x264a
 8007dec:	0226      	.short	0x0226
 8007dee:	ab9a      	add	r3, sp, #616	; 0x268
 8007df0:	441c      	add	r4, r3
 8007df2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8007df6:	46a2      	mov	sl, r4
 8007df8:	46ab      	mov	fp, r5
 8007dfa:	f1bb 0f00 	cmp.w	fp, #0
 8007dfe:	dc6c      	bgt.n	8007eda <__kernel_rem_pio2+0x5d2>
 8007e00:	46a2      	mov	sl, r4
 8007e02:	46ab      	mov	fp, r5
 8007e04:	f1bb 0f01 	cmp.w	fp, #1
 8007e08:	f300 8086 	bgt.w	8007f18 <__kernel_rem_pio2+0x610>
 8007e0c:	2000      	movs	r0, #0
 8007e0e:	2100      	movs	r1, #0
 8007e10:	2d01      	cmp	r5, #1
 8007e12:	f300 80a0 	bgt.w	8007f56 <__kernel_rem_pio2+0x64e>
 8007e16:	9b02      	ldr	r3, [sp, #8]
 8007e18:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8007e1c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	f040 809e 	bne.w	8007f62 <__kernel_rem_pio2+0x65a>
 8007e26:	9b01      	ldr	r3, [sp, #4]
 8007e28:	e9c3 7800 	strd	r7, r8, [r3]
 8007e2c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8007e30:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007e34:	e033      	b.n	8007e9e <__kernel_rem_pio2+0x596>
 8007e36:	3408      	adds	r4, #8
 8007e38:	ab4a      	add	r3, sp, #296	; 0x128
 8007e3a:	441c      	add	r4, r3
 8007e3c:	462e      	mov	r6, r5
 8007e3e:	2000      	movs	r0, #0
 8007e40:	2100      	movs	r1, #0
 8007e42:	2e00      	cmp	r6, #0
 8007e44:	da3a      	bge.n	8007ebc <__kernel_rem_pio2+0x5b4>
 8007e46:	9b02      	ldr	r3, [sp, #8]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d03d      	beq.n	8007ec8 <__kernel_rem_pio2+0x5c0>
 8007e4c:	4602      	mov	r2, r0
 8007e4e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e52:	9c01      	ldr	r4, [sp, #4]
 8007e54:	e9c4 2300 	strd	r2, r3, [r4]
 8007e58:	4602      	mov	r2, r0
 8007e5a:	460b      	mov	r3, r1
 8007e5c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8007e60:	f7f8 fa32 	bl	80002c8 <__aeabi_dsub>
 8007e64:	ae4c      	add	r6, sp, #304	; 0x130
 8007e66:	2401      	movs	r4, #1
 8007e68:	42a5      	cmp	r5, r4
 8007e6a:	da30      	bge.n	8007ece <__kernel_rem_pio2+0x5c6>
 8007e6c:	9b02      	ldr	r3, [sp, #8]
 8007e6e:	b113      	cbz	r3, 8007e76 <__kernel_rem_pio2+0x56e>
 8007e70:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e74:	4619      	mov	r1, r3
 8007e76:	9b01      	ldr	r3, [sp, #4]
 8007e78:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007e7c:	e00f      	b.n	8007e9e <__kernel_rem_pio2+0x596>
 8007e7e:	ab9a      	add	r3, sp, #616	; 0x268
 8007e80:	441c      	add	r4, r3
 8007e82:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8007e86:	2000      	movs	r0, #0
 8007e88:	2100      	movs	r1, #0
 8007e8a:	2d00      	cmp	r5, #0
 8007e8c:	da10      	bge.n	8007eb0 <__kernel_rem_pio2+0x5a8>
 8007e8e:	9b02      	ldr	r3, [sp, #8]
 8007e90:	b113      	cbz	r3, 8007e98 <__kernel_rem_pio2+0x590>
 8007e92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e96:	4619      	mov	r1, r3
 8007e98:	9b01      	ldr	r3, [sp, #4]
 8007e9a:	e9c3 0100 	strd	r0, r1, [r3]
 8007e9e:	9b06      	ldr	r3, [sp, #24]
 8007ea0:	f003 0007 	and.w	r0, r3, #7
 8007ea4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8007ea8:	ecbd 8b02 	vpop	{d8}
 8007eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eb0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007eb4:	f7f8 fa0a 	bl	80002cc <__adddf3>
 8007eb8:	3d01      	subs	r5, #1
 8007eba:	e7e6      	b.n	8007e8a <__kernel_rem_pio2+0x582>
 8007ebc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007ec0:	f7f8 fa04 	bl	80002cc <__adddf3>
 8007ec4:	3e01      	subs	r6, #1
 8007ec6:	e7bc      	b.n	8007e42 <__kernel_rem_pio2+0x53a>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	460b      	mov	r3, r1
 8007ecc:	e7c1      	b.n	8007e52 <__kernel_rem_pio2+0x54a>
 8007ece:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8007ed2:	f7f8 f9fb 	bl	80002cc <__adddf3>
 8007ed6:	3401      	adds	r4, #1
 8007ed8:	e7c6      	b.n	8007e68 <__kernel_rem_pio2+0x560>
 8007eda:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8007ede:	ed3a 7b02 	vldmdb	sl!, {d7}
 8007ee2:	4640      	mov	r0, r8
 8007ee4:	ec53 2b17 	vmov	r2, r3, d7
 8007ee8:	4649      	mov	r1, r9
 8007eea:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007eee:	f7f8 f9ed 	bl	80002cc <__adddf3>
 8007ef2:	4602      	mov	r2, r0
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	4606      	mov	r6, r0
 8007ef8:	460f      	mov	r7, r1
 8007efa:	4640      	mov	r0, r8
 8007efc:	4649      	mov	r1, r9
 8007efe:	f7f8 f9e3 	bl	80002c8 <__aeabi_dsub>
 8007f02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f06:	f7f8 f9e1 	bl	80002cc <__adddf3>
 8007f0a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007f0e:	e9ca 0100 	strd	r0, r1, [sl]
 8007f12:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8007f16:	e770      	b.n	8007dfa <__kernel_rem_pio2+0x4f2>
 8007f18:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8007f1c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8007f20:	4630      	mov	r0, r6
 8007f22:	ec53 2b17 	vmov	r2, r3, d7
 8007f26:	4639      	mov	r1, r7
 8007f28:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007f2c:	f7f8 f9ce 	bl	80002cc <__adddf3>
 8007f30:	4602      	mov	r2, r0
 8007f32:	460b      	mov	r3, r1
 8007f34:	4680      	mov	r8, r0
 8007f36:	4689      	mov	r9, r1
 8007f38:	4630      	mov	r0, r6
 8007f3a:	4639      	mov	r1, r7
 8007f3c:	f7f8 f9c4 	bl	80002c8 <__aeabi_dsub>
 8007f40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f44:	f7f8 f9c2 	bl	80002cc <__adddf3>
 8007f48:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007f4c:	e9ca 0100 	strd	r0, r1, [sl]
 8007f50:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8007f54:	e756      	b.n	8007e04 <__kernel_rem_pio2+0x4fc>
 8007f56:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007f5a:	f7f8 f9b7 	bl	80002cc <__adddf3>
 8007f5e:	3d01      	subs	r5, #1
 8007f60:	e756      	b.n	8007e10 <__kernel_rem_pio2+0x508>
 8007f62:	9b01      	ldr	r3, [sp, #4]
 8007f64:	9a01      	ldr	r2, [sp, #4]
 8007f66:	601f      	str	r7, [r3, #0]
 8007f68:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8007f6c:	605c      	str	r4, [r3, #4]
 8007f6e:	609d      	str	r5, [r3, #8]
 8007f70:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007f74:	60d3      	str	r3, [r2, #12]
 8007f76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f7a:	6110      	str	r0, [r2, #16]
 8007f7c:	6153      	str	r3, [r2, #20]
 8007f7e:	e78e      	b.n	8007e9e <__kernel_rem_pio2+0x596>
 8007f80:	41700000 	.word	0x41700000
 8007f84:	3e700000 	.word	0x3e700000

08007f88 <__kernel_sin>:
 8007f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f8c:	ec55 4b10 	vmov	r4, r5, d0
 8007f90:	b085      	sub	sp, #20
 8007f92:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007f96:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007f9a:	ed8d 1b00 	vstr	d1, [sp]
 8007f9e:	9002      	str	r0, [sp, #8]
 8007fa0:	da06      	bge.n	8007fb0 <__kernel_sin+0x28>
 8007fa2:	ee10 0a10 	vmov	r0, s0
 8007fa6:	4629      	mov	r1, r5
 8007fa8:	f7f8 fdf6 	bl	8000b98 <__aeabi_d2iz>
 8007fac:	2800      	cmp	r0, #0
 8007fae:	d051      	beq.n	8008054 <__kernel_sin+0xcc>
 8007fb0:	4622      	mov	r2, r4
 8007fb2:	462b      	mov	r3, r5
 8007fb4:	4620      	mov	r0, r4
 8007fb6:	4629      	mov	r1, r5
 8007fb8:	f7f8 fb3e 	bl	8000638 <__aeabi_dmul>
 8007fbc:	4682      	mov	sl, r0
 8007fbe:	468b      	mov	fp, r1
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	4620      	mov	r0, r4
 8007fc6:	4629      	mov	r1, r5
 8007fc8:	f7f8 fb36 	bl	8000638 <__aeabi_dmul>
 8007fcc:	a341      	add	r3, pc, #260	; (adr r3, 80080d4 <__kernel_sin+0x14c>)
 8007fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd2:	4680      	mov	r8, r0
 8007fd4:	4689      	mov	r9, r1
 8007fd6:	4650      	mov	r0, sl
 8007fd8:	4659      	mov	r1, fp
 8007fda:	f7f8 fb2d 	bl	8000638 <__aeabi_dmul>
 8007fde:	a33f      	add	r3, pc, #252	; (adr r3, 80080dc <__kernel_sin+0x154>)
 8007fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe4:	f7f8 f970 	bl	80002c8 <__aeabi_dsub>
 8007fe8:	4652      	mov	r2, sl
 8007fea:	465b      	mov	r3, fp
 8007fec:	f7f8 fb24 	bl	8000638 <__aeabi_dmul>
 8007ff0:	a33c      	add	r3, pc, #240	; (adr r3, 80080e4 <__kernel_sin+0x15c>)
 8007ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff6:	f7f8 f969 	bl	80002cc <__adddf3>
 8007ffa:	4652      	mov	r2, sl
 8007ffc:	465b      	mov	r3, fp
 8007ffe:	f7f8 fb1b 	bl	8000638 <__aeabi_dmul>
 8008002:	a33a      	add	r3, pc, #232	; (adr r3, 80080ec <__kernel_sin+0x164>)
 8008004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008008:	f7f8 f95e 	bl	80002c8 <__aeabi_dsub>
 800800c:	4652      	mov	r2, sl
 800800e:	465b      	mov	r3, fp
 8008010:	f7f8 fb12 	bl	8000638 <__aeabi_dmul>
 8008014:	a337      	add	r3, pc, #220	; (adr r3, 80080f4 <__kernel_sin+0x16c>)
 8008016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800801a:	f7f8 f957 	bl	80002cc <__adddf3>
 800801e:	9b02      	ldr	r3, [sp, #8]
 8008020:	4606      	mov	r6, r0
 8008022:	460f      	mov	r7, r1
 8008024:	b9db      	cbnz	r3, 800805e <__kernel_sin+0xd6>
 8008026:	4602      	mov	r2, r0
 8008028:	460b      	mov	r3, r1
 800802a:	4650      	mov	r0, sl
 800802c:	4659      	mov	r1, fp
 800802e:	f7f8 fb03 	bl	8000638 <__aeabi_dmul>
 8008032:	a325      	add	r3, pc, #148	; (adr r3, 80080c8 <__kernel_sin+0x140>)
 8008034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008038:	f7f8 f946 	bl	80002c8 <__aeabi_dsub>
 800803c:	4642      	mov	r2, r8
 800803e:	464b      	mov	r3, r9
 8008040:	f7f8 fafa 	bl	8000638 <__aeabi_dmul>
 8008044:	4602      	mov	r2, r0
 8008046:	460b      	mov	r3, r1
 8008048:	4620      	mov	r0, r4
 800804a:	4629      	mov	r1, r5
 800804c:	f7f8 f93e 	bl	80002cc <__adddf3>
 8008050:	4604      	mov	r4, r0
 8008052:	460d      	mov	r5, r1
 8008054:	ec45 4b10 	vmov	d0, r4, r5
 8008058:	b005      	add	sp, #20
 800805a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800805e:	2200      	movs	r2, #0
 8008060:	4b1b      	ldr	r3, [pc, #108]	; (80080d0 <__kernel_sin+0x148>)
 8008062:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008066:	f7f8 fae7 	bl	8000638 <__aeabi_dmul>
 800806a:	4632      	mov	r2, r6
 800806c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008070:	463b      	mov	r3, r7
 8008072:	4640      	mov	r0, r8
 8008074:	4649      	mov	r1, r9
 8008076:	f7f8 fadf 	bl	8000638 <__aeabi_dmul>
 800807a:	4602      	mov	r2, r0
 800807c:	460b      	mov	r3, r1
 800807e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008082:	f7f8 f921 	bl	80002c8 <__aeabi_dsub>
 8008086:	4652      	mov	r2, sl
 8008088:	465b      	mov	r3, fp
 800808a:	f7f8 fad5 	bl	8000638 <__aeabi_dmul>
 800808e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008092:	f7f8 f919 	bl	80002c8 <__aeabi_dsub>
 8008096:	a30c      	add	r3, pc, #48	; (adr r3, 80080c8 <__kernel_sin+0x140>)
 8008098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809c:	4606      	mov	r6, r0
 800809e:	460f      	mov	r7, r1
 80080a0:	4640      	mov	r0, r8
 80080a2:	4649      	mov	r1, r9
 80080a4:	f7f8 fac8 	bl	8000638 <__aeabi_dmul>
 80080a8:	4602      	mov	r2, r0
 80080aa:	460b      	mov	r3, r1
 80080ac:	4630      	mov	r0, r6
 80080ae:	4639      	mov	r1, r7
 80080b0:	f7f8 f90c 	bl	80002cc <__adddf3>
 80080b4:	4602      	mov	r2, r0
 80080b6:	460b      	mov	r3, r1
 80080b8:	4620      	mov	r0, r4
 80080ba:	4629      	mov	r1, r5
 80080bc:	f7f8 f904 	bl	80002c8 <__aeabi_dsub>
 80080c0:	e7c6      	b.n	8008050 <__kernel_sin+0xc8>
 80080c2:	bf00      	nop
 80080c4:	f3af 8000 	nop.w
 80080c8:	55555549 	.word	0x55555549
 80080cc:	3fc55555 	.word	0x3fc55555
 80080d0:	3fe00000 	.word	0x3fe00000
 80080d4:	5acfd57c 	.word	0x5acfd57c
 80080d8:	3de5d93a 	.word	0x3de5d93a
 80080dc:	8a2b9ceb 	.word	0x8a2b9ceb
 80080e0:	3e5ae5e6 	.word	0x3e5ae5e6
 80080e4:	57b1fe7d 	.word	0x57b1fe7d
 80080e8:	3ec71de3 	.word	0x3ec71de3
 80080ec:	19c161d5 	.word	0x19c161d5
 80080f0:	3f2a01a0 	.word	0x3f2a01a0
 80080f4:	1110f8a6 	.word	0x1110f8a6
 80080f8:	3f811111 	.word	0x3f811111

080080fc <fabs>:
 80080fc:	ec51 0b10 	vmov	r0, r1, d0
 8008100:	ee10 2a10 	vmov	r2, s0
 8008104:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008108:	ec43 2b10 	vmov	d0, r2, r3
 800810c:	4770      	bx	lr
	...

08008110 <floor>:
 8008110:	ec51 0b10 	vmov	r0, r1, d0
 8008114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008118:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800811c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008120:	2e13      	cmp	r6, #19
 8008122:	460c      	mov	r4, r1
 8008124:	ee10 5a10 	vmov	r5, s0
 8008128:	4680      	mov	r8, r0
 800812a:	dc34      	bgt.n	8008196 <floor+0x86>
 800812c:	2e00      	cmp	r6, #0
 800812e:	da16      	bge.n	800815e <floor+0x4e>
 8008130:	a335      	add	r3, pc, #212	; (adr r3, 8008208 <floor+0xf8>)
 8008132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008136:	f7f8 f8c9 	bl	80002cc <__adddf3>
 800813a:	2200      	movs	r2, #0
 800813c:	2300      	movs	r3, #0
 800813e:	f7f8 fd0b 	bl	8000b58 <__aeabi_dcmpgt>
 8008142:	b148      	cbz	r0, 8008158 <floor+0x48>
 8008144:	2c00      	cmp	r4, #0
 8008146:	da59      	bge.n	80081fc <floor+0xec>
 8008148:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800814c:	4a30      	ldr	r2, [pc, #192]	; (8008210 <floor+0x100>)
 800814e:	432b      	orrs	r3, r5
 8008150:	2500      	movs	r5, #0
 8008152:	42ab      	cmp	r3, r5
 8008154:	bf18      	it	ne
 8008156:	4614      	movne	r4, r2
 8008158:	4621      	mov	r1, r4
 800815a:	4628      	mov	r0, r5
 800815c:	e025      	b.n	80081aa <floor+0x9a>
 800815e:	4f2d      	ldr	r7, [pc, #180]	; (8008214 <floor+0x104>)
 8008160:	4137      	asrs	r7, r6
 8008162:	ea01 0307 	and.w	r3, r1, r7
 8008166:	4303      	orrs	r3, r0
 8008168:	d01f      	beq.n	80081aa <floor+0x9a>
 800816a:	a327      	add	r3, pc, #156	; (adr r3, 8008208 <floor+0xf8>)
 800816c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008170:	f7f8 f8ac 	bl	80002cc <__adddf3>
 8008174:	2200      	movs	r2, #0
 8008176:	2300      	movs	r3, #0
 8008178:	f7f8 fcee 	bl	8000b58 <__aeabi_dcmpgt>
 800817c:	2800      	cmp	r0, #0
 800817e:	d0eb      	beq.n	8008158 <floor+0x48>
 8008180:	2c00      	cmp	r4, #0
 8008182:	bfbe      	ittt	lt
 8008184:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008188:	fa43 f606 	asrlt.w	r6, r3, r6
 800818c:	19a4      	addlt	r4, r4, r6
 800818e:	ea24 0407 	bic.w	r4, r4, r7
 8008192:	2500      	movs	r5, #0
 8008194:	e7e0      	b.n	8008158 <floor+0x48>
 8008196:	2e33      	cmp	r6, #51	; 0x33
 8008198:	dd0b      	ble.n	80081b2 <floor+0xa2>
 800819a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800819e:	d104      	bne.n	80081aa <floor+0x9a>
 80081a0:	ee10 2a10 	vmov	r2, s0
 80081a4:	460b      	mov	r3, r1
 80081a6:	f7f8 f891 	bl	80002cc <__adddf3>
 80081aa:	ec41 0b10 	vmov	d0, r0, r1
 80081ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081b2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80081b6:	f04f 33ff 	mov.w	r3, #4294967295
 80081ba:	fa23 f707 	lsr.w	r7, r3, r7
 80081be:	4207      	tst	r7, r0
 80081c0:	d0f3      	beq.n	80081aa <floor+0x9a>
 80081c2:	a311      	add	r3, pc, #68	; (adr r3, 8008208 <floor+0xf8>)
 80081c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c8:	f7f8 f880 	bl	80002cc <__adddf3>
 80081cc:	2200      	movs	r2, #0
 80081ce:	2300      	movs	r3, #0
 80081d0:	f7f8 fcc2 	bl	8000b58 <__aeabi_dcmpgt>
 80081d4:	2800      	cmp	r0, #0
 80081d6:	d0bf      	beq.n	8008158 <floor+0x48>
 80081d8:	2c00      	cmp	r4, #0
 80081da:	da02      	bge.n	80081e2 <floor+0xd2>
 80081dc:	2e14      	cmp	r6, #20
 80081de:	d103      	bne.n	80081e8 <floor+0xd8>
 80081e0:	3401      	adds	r4, #1
 80081e2:	ea25 0507 	bic.w	r5, r5, r7
 80081e6:	e7b7      	b.n	8008158 <floor+0x48>
 80081e8:	2301      	movs	r3, #1
 80081ea:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80081ee:	fa03 f606 	lsl.w	r6, r3, r6
 80081f2:	4435      	add	r5, r6
 80081f4:	4545      	cmp	r5, r8
 80081f6:	bf38      	it	cc
 80081f8:	18e4      	addcc	r4, r4, r3
 80081fa:	e7f2      	b.n	80081e2 <floor+0xd2>
 80081fc:	2500      	movs	r5, #0
 80081fe:	462c      	mov	r4, r5
 8008200:	e7aa      	b.n	8008158 <floor+0x48>
 8008202:	bf00      	nop
 8008204:	f3af 8000 	nop.w
 8008208:	8800759c 	.word	0x8800759c
 800820c:	7e37e43c 	.word	0x7e37e43c
 8008210:	bff00000 	.word	0xbff00000
 8008214:	000fffff 	.word	0x000fffff

08008218 <scalbn>:
 8008218:	b570      	push	{r4, r5, r6, lr}
 800821a:	ec55 4b10 	vmov	r4, r5, d0
 800821e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008222:	4606      	mov	r6, r0
 8008224:	462b      	mov	r3, r5
 8008226:	b9aa      	cbnz	r2, 8008254 <scalbn+0x3c>
 8008228:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800822c:	4323      	orrs	r3, r4
 800822e:	d03b      	beq.n	80082a8 <scalbn+0x90>
 8008230:	4b31      	ldr	r3, [pc, #196]	; (80082f8 <scalbn+0xe0>)
 8008232:	4629      	mov	r1, r5
 8008234:	2200      	movs	r2, #0
 8008236:	ee10 0a10 	vmov	r0, s0
 800823a:	f7f8 f9fd 	bl	8000638 <__aeabi_dmul>
 800823e:	4b2f      	ldr	r3, [pc, #188]	; (80082fc <scalbn+0xe4>)
 8008240:	429e      	cmp	r6, r3
 8008242:	4604      	mov	r4, r0
 8008244:	460d      	mov	r5, r1
 8008246:	da12      	bge.n	800826e <scalbn+0x56>
 8008248:	a327      	add	r3, pc, #156	; (adr r3, 80082e8 <scalbn+0xd0>)
 800824a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800824e:	f7f8 f9f3 	bl	8000638 <__aeabi_dmul>
 8008252:	e009      	b.n	8008268 <scalbn+0x50>
 8008254:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008258:	428a      	cmp	r2, r1
 800825a:	d10c      	bne.n	8008276 <scalbn+0x5e>
 800825c:	ee10 2a10 	vmov	r2, s0
 8008260:	4620      	mov	r0, r4
 8008262:	4629      	mov	r1, r5
 8008264:	f7f8 f832 	bl	80002cc <__adddf3>
 8008268:	4604      	mov	r4, r0
 800826a:	460d      	mov	r5, r1
 800826c:	e01c      	b.n	80082a8 <scalbn+0x90>
 800826e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008272:	460b      	mov	r3, r1
 8008274:	3a36      	subs	r2, #54	; 0x36
 8008276:	4432      	add	r2, r6
 8008278:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800827c:	428a      	cmp	r2, r1
 800827e:	dd0b      	ble.n	8008298 <scalbn+0x80>
 8008280:	ec45 4b11 	vmov	d1, r4, r5
 8008284:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80082f0 <scalbn+0xd8>
 8008288:	f000 f83c 	bl	8008304 <copysign>
 800828c:	a318      	add	r3, pc, #96	; (adr r3, 80082f0 <scalbn+0xd8>)
 800828e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008292:	ec51 0b10 	vmov	r0, r1, d0
 8008296:	e7da      	b.n	800824e <scalbn+0x36>
 8008298:	2a00      	cmp	r2, #0
 800829a:	dd08      	ble.n	80082ae <scalbn+0x96>
 800829c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80082a0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80082a4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80082a8:	ec45 4b10 	vmov	d0, r4, r5
 80082ac:	bd70      	pop	{r4, r5, r6, pc}
 80082ae:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80082b2:	da0d      	bge.n	80082d0 <scalbn+0xb8>
 80082b4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80082b8:	429e      	cmp	r6, r3
 80082ba:	ec45 4b11 	vmov	d1, r4, r5
 80082be:	dce1      	bgt.n	8008284 <scalbn+0x6c>
 80082c0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80082e8 <scalbn+0xd0>
 80082c4:	f000 f81e 	bl	8008304 <copysign>
 80082c8:	a307      	add	r3, pc, #28	; (adr r3, 80082e8 <scalbn+0xd0>)
 80082ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ce:	e7e0      	b.n	8008292 <scalbn+0x7a>
 80082d0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80082d4:	3236      	adds	r2, #54	; 0x36
 80082d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80082da:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80082de:	4620      	mov	r0, r4
 80082e0:	4629      	mov	r1, r5
 80082e2:	2200      	movs	r2, #0
 80082e4:	4b06      	ldr	r3, [pc, #24]	; (8008300 <scalbn+0xe8>)
 80082e6:	e7b2      	b.n	800824e <scalbn+0x36>
 80082e8:	c2f8f359 	.word	0xc2f8f359
 80082ec:	01a56e1f 	.word	0x01a56e1f
 80082f0:	8800759c 	.word	0x8800759c
 80082f4:	7e37e43c 	.word	0x7e37e43c
 80082f8:	43500000 	.word	0x43500000
 80082fc:	ffff3cb0 	.word	0xffff3cb0
 8008300:	3c900000 	.word	0x3c900000

08008304 <copysign>:
 8008304:	ec51 0b10 	vmov	r0, r1, d0
 8008308:	ee11 0a90 	vmov	r0, s3
 800830c:	ee10 2a10 	vmov	r2, s0
 8008310:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008314:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8008318:	ea41 0300 	orr.w	r3, r1, r0
 800831c:	ec43 2b10 	vmov	d0, r2, r3
 8008320:	4770      	bx	lr
	...

08008324 <_init>:
 8008324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008326:	bf00      	nop
 8008328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800832a:	bc08      	pop	{r3}
 800832c:	469e      	mov	lr, r3
 800832e:	4770      	bx	lr

08008330 <_fini>:
 8008330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008332:	bf00      	nop
 8008334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008336:	bc08      	pop	{r3}
 8008338:	469e      	mov	lr, r3
 800833a:	4770      	bx	lr
